{
  "swagger": "2.0",
  "info": {
    "title": "Azure.WebPubSub service",
    "version": "2022-11-01-preview",
    "x-typespec-generated": [
      {
        "emitter": "@azure-tools/typespec-autorest"
      }
    ]
  },
  "schemes": [
    "https"
  ],
  "produces": [
    "application/json"
  ],
  "consumes": [
    "application/json"
  ],
  "security": [
    {
      "ApiKeyAuth": []
    },
    {
      "OAuth2Auth": [
        "https://widget.contoso.com/.default"
      ]
    }
  ],
  "securityDefinitions": {
    "ApiKeyAuth": {
      "type": "apiKey",
      "name": "api-key",
      "in": "header"
    },
    "OAuth2Auth": {
      "type": "oauth2",
      "flow": "implicit",
      "authorizationUrl": "https://login.contoso.com/common/oauth2/v2.0/authorize",
      "scopes": {
        "https://widget.contoso.com/.default": ""
      }
    }
  },
  "tags": [],
  "paths": {
    "/OnMqttClientConnect/Doesn'tMatter/DependOnYourEventHandlerSettings": {
      "post": {
        "operationId": "OnMqttConnect",
        "description": "This event is triggered when the service receive an MQTT CONNECT packet.",
        "parameters": [
          {
            "name": "ce-physicalConnectionId",
            "in": "header",
            "description": "A unique ID generated by the service for each physical connection. Its format may change, and you shouldn't try to parse it.",
            "required": true,
            "type": "string",
            "x-ms-client-name": "_"
          },
          {
            "$ref": "#/parameters/CommonRequestHeaders.userId"
          },
          {
            "$ref": "#/parameters/CommonRequestHeaders.hub"
          },
          {
            "$ref": "#/parameters/CommonRequestHeaders.connectionId"
          },
          {
            "$ref": "#/parameters/CommonRequestHeaders.eventName"
          },
          {
            "$ref": "#/parameters/CommonRequestHeaders.subprotocol"
          },
          {
            "$ref": "#/parameters/CommonRequestHeaders.connectionState"
          },
          {
            "$ref": "#/parameters/CommonRequestHeaders.signature"
          },
          {
            "name": "req",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MqttConnectEventRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/MqttConnectEventSuccessResponse"
            }
          },
          "202": {
            "description": "The request has been accepted for processing, but processing has not yet completed."
          },
          "401": {
            "description": "Access is unauthorized.",
            "schema": {
              "$ref": "#/definitions/MqttConnectEventFailureResponse"
            }
          },
          "403": {
            "description": "Access is forbidden",
            "schema": {
              "$ref": "#/definitions/MqttConnectEventFailureResponse"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/MqttConnectEventFailureResponse"
            }
          }
        }
      }
    },
    "/OnMqttClientConnected/Doesn'tMatter/DependOnYourEventHandlerSettings": {
      "post": {
        "operationId": "OnMqttClientConnected",
        "description": "This event is triggered when the service establishes a Web PubSub CONNECTION(aka. session, not a network connection) with a client.",
        "parameters": [
          {
            "name": "ce-physicalConnectionId",
            "in": "header",
            "description": "A unique ID generated by the service for each physical connection. Its format may change, and you shouldn't try to parse it.",
            "required": true,
            "type": "string",
            "x-ms-client-name": "_"
          },
          {
            "$ref": "#/parameters/CommonRequestHeaders.userId"
          },
          {
            "$ref": "#/parameters/CommonRequestHeaders.hub"
          },
          {
            "$ref": "#/parameters/CommonRequestHeaders.connectionId"
          },
          {
            "$ref": "#/parameters/CommonRequestHeaders.eventName"
          },
          {
            "$ref": "#/parameters/CommonRequestHeaders.subprotocol"
          },
          {
            "$ref": "#/parameters/CommonRequestHeaders.connectionState"
          },
          {
            "$ref": "#/parameters/CommonRequestHeaders.signature"
          },
          {
            "name": "req",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded."
          }
        }
      }
    },
    "/OnMqttClientDisconnected/Doesn'tMatter/DependOnYourEventHandlerSettings": {
      "post": {
        "operationId": "OnMqttClientDisconnected",
        "description": "This event is triggered when a Web PubSub CONNECTION(aka. session, not a network connection) is ended.",
        "parameters": [
          {
            "name": "ce-physicalConnectionId",
            "in": "header",
            "description": "A unique ID generated by the service for each physical connection. Its format may change, and you shouldn't try to parse it.",
            "required": true,
            "type": "string",
            "x-ms-client-name": "_"
          },
          {
            "$ref": "#/parameters/CommonRequestHeaders.userId"
          },
          {
            "$ref": "#/parameters/CommonRequestHeaders.hub"
          },
          {
            "$ref": "#/parameters/CommonRequestHeaders.connectionId"
          },
          {
            "$ref": "#/parameters/CommonRequestHeaders.eventName"
          },
          {
            "$ref": "#/parameters/CommonRequestHeaders.subprotocol"
          },
          {
            "$ref": "#/parameters/CommonRequestHeaders.connectionState"
          },
          {
            "$ref": "#/parameters/CommonRequestHeaders.signature"
          },
          {
            "name": "req",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MqttDisconnectedEventRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded."
          }
        }
      }
    }
  },
  "definitions": {
    "ClientCertificateInfo": {
      "type": "object",
      "properties": {
        "thumbprint": {
          "type": "string"
        },
        "content": {
          "type": "string"
        }
      },
      "required": [
        "thumbprint",
        "content"
      ]
    },
    "ConnectEventRequest": {
      "type": "object",
      "description": "Represents a request for a connection event.",
      "properties": {
        "claims": {
          "type": "object",
          "additionalProperties": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "query": {
          "type": "object",
          "additionalProperties": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "headers": {
          "type": "object",
          "additionalProperties": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "subprotocols": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "clientCertificates": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ClientCertificateInfo"
          },
          "x-ms-identifiers": []
        }
      },
      "required": [
        "claims",
        "query",
        "headers",
        "subprotocols",
        "clientCertificates"
      ]
    },
    "DisconnectEventRequest": {
      "type": "object",
      "description": "Represents a request for a disconnection event.",
      "properties": {
        "reason": {
          "type": "string"
        }
      },
      "required": [
        "reason"
      ]
    },
    "DisconnectedEventMqttProperties": {
      "type": "object",
      "description": "Represents the properties of an MQTT disconnection event.",
      "properties": {
        "initiatedByClient": {
          "type": "boolean",
          "description": "Indicates whether the disconnection is initiated by the client."
        },
        "disconnectPacket": {
          "$ref": "#/definitions/MqttDisconnectPacketProperties",
          "description": "The DISCONNECT packet properties to end the last physical connection.\nIt may be sent by the client or server."
        }
      },
      "required": [
        "initiatedByClient"
      ]
    },
    "EmptyConnectedEventRequest": {
      "type": "object"
    },
    "FakedSharedModel": {
      "type": "object",
      "description": "Faked shared model",
      "properties": {
        "tag": {
          "type": "string",
          "description": "The tag."
        },
        "createdDate": {
          "type": "string",
          "format": "date-time",
          "description": "The created date."
        }
      },
      "required": [
        "tag",
        "createdDate"
      ]
    },
    "MqttConnectEventFailureResponse": {
      "type": "object",
      "description": "Represents the response properties of an MQTT connection failure.",
      "properties": {
        "mqtt": {
          "$ref": "#/definitions/MqttConnectEventFailureResponseProperties"
        }
      },
      "required": [
        "mqtt"
      ]
    },
    "MqttConnectEventFailureResponseProperties": {
      "type": "object",
      "description": "Represents the properties of an MQTT connection failure response.",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int64",
          "description": "The failure code. It will be sent to the clients in the CONNACK packet as a return code (MQTT 3.1.1) or reason code (MQTT 5.0). Upstream webhook should select a valid integer value defined the MQTT protocols according to the protocol versions of the clients. If Upstream webhook sets an invalid value, clients will receive \"unspecified error\" in the CONNACK packet."
        },
        "reason": {
          "type": "string",
          "description": "The reason for the failure. It's a human readable failure reason string designed for diagnostics. It will be sent to those clients whose protocols support reason string in the CONNACK packet. Now only MQTT 5.0 supports it."
        },
        "userProperties": {
          "type": "array",
          "description": "The user properties associated with the failure. They'll be converted to user properties in the CONNACK packet, and sent to clients whose protocols support user properties. Now only MQTT 5.0 supports user properties. Upstream webhook can use the property for additional diagnostic or other information.",
          "items": {
            "$ref": "#/definitions/MqttUserProperty"
          },
          "x-ms-identifiers": []
        }
      },
      "required": [
        "code"
      ]
    },
    "MqttConnectEventRequest": {
      "type": "object",
      "description": "Represents a request for an MQTT connection event.",
      "properties": {
        "mqtt": {
          "$ref": "#/definitions/MqttProperties"
        }
      },
      "required": [
        "mqtt"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/ConnectEventRequest"
        }
      ]
    },
    "MqttConnectEventSuccessResponse": {
      "type": "object",
      "description": "Represents a successful response to an MQTT connection event.",
      "properties": {
        "roles": {
          "type": "array",
          "description": "The property provides a way for the upstream Webhook to authorize the client. There are different roles to grant initial permissions for PubSub WebSocket clients. See details in https://learn.microsoft.com/azure/azure-web-pubsub/concept-client-protocols#permissions",
          "items": {
            "type": "string"
          }
        },
        "subprotocol": {
          "type": "string",
          "description": "It should be \"mqtt\" or omitted."
        },
        "userId": {
          "type": "string",
          "description": "As the service allows anonymous connections, it's the connect event's responsibility to tell the service the user ID of the client connection. The service reads the user ID from the response payload userId if it exists."
        },
        "groups": {
          "type": "array",
          "description": "The property provides a convenient way for user to add the client to one or multiple groups. In this way, there's no need to have another call to add this connection to some group.",
          "items": {
            "type": "string"
          }
        },
        "mqtt": {
          "$ref": "#/definitions/MqttConnectEventSuccessResponseProperties"
        }
      }
    },
    "MqttConnectEventSuccessResponseProperties": {
      "type": "object",
      "description": "Represents the MQTT specific properties in a successful MQTT connection event response.",
      "properties": {
        "userProperties": {
          "type": "array",
          "description": "It's additional diagnostic or other information provided by upstream server. They'll be converted to the user properties field in the CONNACK packet, and sent to clients whose protocols support user properties. Now only MQTT 5.0 supports user properties. Upstream webhook can use the property to communicate additional diagnostic or other information with clients.",
          "items": {
            "$ref": "#/definitions/MqttUserProperty"
          },
          "x-ms-identifiers": []
        }
      }
    },
    "MqttDisconnectPacketProperties": {
      "type": "object",
      "description": "Represents the properties of an MQTT DISCONNECT packet.",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int64",
          "description": "The DISCONNECT reason code defined in MQTT 5.0 spec.\nFor MQTT 3.1.1 clients, it's always the default value 0."
        },
        "userProperties": {
          "type": "array",
          "description": "The user properties in the DISCONNECT packet sent by the client.\nThe value is not null only if the client sent a DISCONNECT packet with user properties.",
          "items": {
            "$ref": "#/definitions/MqttUserProperty"
          },
          "x-ms-identifiers": []
        }
      },
      "required": [
        "code"
      ]
    },
    "MqttDisconnectedEventRequest": {
      "type": "object",
      "description": "Represents a request for an MQTT disconnection event.",
      "properties": {
        "mqtt": {
          "$ref": "#/definitions/DisconnectedEventMqttProperties"
        }
      },
      "required": [
        "mqtt"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/DisconnectEventRequest"
        }
      ]
    },
    "MqttProperties": {
      "type": "object",
      "description": "Represents the properties of an MQTT connection.",
      "properties": {
        "protocolVersion": {
          "type": "integer",
          "format": "int64",
          "description": "MQTT protocol version. The same as the CONNECT packet's ProtocolVersion.\nMQTT 3.1.1 is 4, MQTT 5.0 is 5."
        },
        "username": {
          "type": "string",
          "description": "The username field in the MQTT CONNECT packet."
        },
        "password": {
          "type": "string",
          "description": "The base64 encoded password field in the MQTT CONNECT packet."
        },
        "userProperties": {
          "type": "array",
          "description": "The user properties in the MQTT CONNECT packet.",
          "items": {
            "$ref": "#/definitions/MqttUserProperty"
          },
          "x-ms-identifiers": []
        }
      },
      "required": [
        "protocolVersion"
      ]
    },
    "MqttUserProperty": {
      "type": "object",
      "description": "Represents a user property in an MQTT connection.",
      "properties": {
        "name": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      },
      "required": [
        "name",
        "value"
      ]
    },
    "Widget": {
      "type": "object",
      "description": "A widget.",
      "properties": {
        "name": {
          "type": "string",
          "description": "The widget name.",
          "readOnly": true
        },
        "manufacturerId": {
          "type": "string",
          "description": "The ID of the manufacturer."
        },
        "sharedModel": {
          "$ref": "#/definitions/FakedSharedModel",
          "description": "The faked shared model."
        }
      },
      "required": [
        "name",
        "manufacturerId"
      ]
    }
  },
  "parameters": {
    "CommonRequestHeaders.connectionId": {
      "name": "ce-connectionId",
      "in": "header",
      "description": "The connectionId is unique for the client connection.",
      "required": true,
      "type": "string",
      "x-ms-parameter-location": "method",
      "x-ms-client-name": "connectionId"
    },
    "CommonRequestHeaders.connectionState": {
      "name": "ce-connectionState",
      "in": "header",
      "description": "Defines the state for the connection. You can use the same response header to reset the value of the state. Multiple `connectionState` headers aren't allowed. Do base64 encode the string value if it contains complex characters inside, for example, `base64(jsonString)` to pass complex object using this attribute.",
      "required": true,
      "type": "string",
      "x-ms-parameter-location": "method",
      "x-ms-client-name": "connectionState"
    },
    "CommonRequestHeaders.eventName": {
      "name": "ce-eventName",
      "in": "header",
      "description": "The name of the event without prefix.",
      "required": true,
      "type": "string",
      "x-ms-parameter-location": "method",
      "x-ms-client-name": "eventName"
    },
    "CommonRequestHeaders.hub": {
      "name": "ce-hub",
      "in": "header",
      "description": "The hub the connection belongs to.",
      "required": true,
      "type": "string",
      "x-ms-parameter-location": "method",
      "x-ms-client-name": "hub"
    },
    "CommonRequestHeaders.signature": {
      "name": "ce-signature",
      "in": "header",
      "description": "The signature for the upstream webhook to validate if the incoming request is from the expected origin. The service calculates the value using both primary access key and secondary access key as the `HMAC` key: `Hex_encoded(HMAC_SHA256(accessKey, connectionId))`. The upstream should check if the request is valid before processing it.",
      "required": true,
      "type": "string",
      "x-ms-parameter-location": "method",
      "x-ms-client-name": "signature"
    },
    "CommonRequestHeaders.subprotocol": {
      "name": "ce-subprotocol",
      "in": "header",
      "description": "The subprotocol the client is using if any.",
      "required": true,
      "type": "string",
      "x-ms-parameter-location": "method",
      "x-ms-client-name": "subprotocol"
    },
    "CommonRequestHeaders.userId": {
      "name": "ce-userId",
      "in": "header",
      "description": "The user the connection authed.",
      "required": true,
      "type": "string",
      "x-ms-parameter-location": "method",
      "x-ms-client-name": "userId"
    }
  }
}
