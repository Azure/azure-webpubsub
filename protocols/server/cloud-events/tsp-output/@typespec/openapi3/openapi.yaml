openapi: 3.0.0
info:
  title: (title)
  version: 0.0.0
tags: []
paths:
  /OnMqttClientConnect/DoesNotMatter/DependOnYourEventHandlerSettings:
    post:
      operationId: OnMqttConnect
      description: This event is triggered when the service receive an MQTT CONNECT packet.
      parameters:
        - name: ce-physicalConnectionId
          in: header
          required: true
          description: A unique ID generated by the service for each physical connection. Its format may change, and you shouldn't try to parse it.
          schema:
            type: string
        - $ref: '#/components/parameters/CommonRequestHeaders.userId'
        - $ref: '#/components/parameters/CommonRequestHeaders.hub'
        - $ref: '#/components/parameters/CommonRequestHeaders.connectionId'
        - $ref: '#/components/parameters/CommonRequestHeaders.eventName'
        - $ref: '#/components/parameters/CommonRequestHeaders.subprotocol'
        - $ref: '#/components/parameters/CommonRequestHeaders.connectionState'
        - $ref: '#/components/parameters/CommonRequestHeaders.signature'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MqttConnectEventSuccessResponse'
        '202':
          description: The request has been accepted for processing, but processing has not yet completed.
        '401':
          description: Access is unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MqttConnectEventFailureResponse'
        '403':
          description: Access is forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MqttConnectEventFailureResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MqttConnectEventFailureResponse'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MqttConnectEventRequest'
  /OnMqttClientConnected/DoesNotMatter/DependOnYourEventHandlerSettings:
    post:
      operationId: OnMqttClientConnected
      description: This event is triggered when the service establishes a Web PubSub CONNECTION(aka. session, not a network connection) with a client.
      parameters:
        - name: ce-physicalConnectionId
          in: header
          required: true
          description: A unique ID generated by the service for each physical connection. Its format may change, and you shouldn't try to parse it.
          schema:
            type: string
        - $ref: '#/components/parameters/CommonRequestHeaders.userId'
        - $ref: '#/components/parameters/CommonRequestHeaders.hub'
        - $ref: '#/components/parameters/CommonRequestHeaders.connectionId'
        - $ref: '#/components/parameters/CommonRequestHeaders.eventName'
        - $ref: '#/components/parameters/CommonRequestHeaders.subprotocol'
        - $ref: '#/components/parameters/CommonRequestHeaders.connectionState'
        - $ref: '#/components/parameters/CommonRequestHeaders.signature'
      responses:
        '200':
          description: The request has succeeded.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
  /OnMqttClientDisconnected/DoesNotMatter/DependOnYourEventHandlerSettings:
    post:
      operationId: OnMqttClientDisconnected
      description: This event is triggered when a Web PubSub CONNECTION(aka. session, not a network connection) is ended.
      parameters:
        - name: ce-physicalConnectionId
          in: header
          required: true
          description: A unique ID generated by the service for each physical connection. Its format may change, and you shouldn't try to parse it.
          schema:
            type: string
        - $ref: '#/components/parameters/CommonRequestHeaders.userId'
        - $ref: '#/components/parameters/CommonRequestHeaders.hub'
        - $ref: '#/components/parameters/CommonRequestHeaders.connectionId'
        - $ref: '#/components/parameters/CommonRequestHeaders.eventName'
        - $ref: '#/components/parameters/CommonRequestHeaders.subprotocol'
        - $ref: '#/components/parameters/CommonRequestHeaders.connectionState'
        - $ref: '#/components/parameters/CommonRequestHeaders.signature'
      responses:
        '200':
          description: The request has succeeded.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MqttDisconnectedEventRequest'
components:
  parameters:
    CommonRequestHeaders.connectionId:
      name: ce-connectionId
      in: header
      required: true
      description: The connectionId is unique for the client connection.
      schema:
        type: string
    CommonRequestHeaders.connectionState:
      name: ce-connectionState
      in: header
      required: false
      description: Defines the state for the connection. You can use the same response header to reset the value of the state. Multiple `connectionState` headers aren't allowed. Do base64 encode the string value if it contains complex characters inside, for example, `base64(jsonString)` to pass complex object using this attribute.
      schema:
        type: string
    CommonRequestHeaders.eventName:
      name: ce-eventName
      in: header
      required: true
      description: The name of the event without prefix.
      schema:
        type: string
    CommonRequestHeaders.hub:
      name: ce-hub
      in: header
      required: true
      description: The hub the connection belongs to.
      schema:
        type: string
    CommonRequestHeaders.signature:
      name: ce-signature
      in: header
      required: false
      description: 'The signature for the upstream webhook to validate if the incoming request is from the expected origin. The service calculates the value using both primary access key and secondary access key as the `HMAC` key: `Hex_encoded(HMAC_SHA256(accessKey, connectionId))`. The upstream should check if the request is valid before processing it.'
      schema:
        type: string
    CommonRequestHeaders.subprotocol:
      name: ce-subprotocol
      in: header
      required: false
      description: The subprotocol the client is using if any.
      schema:
        type: string
    CommonRequestHeaders.userId:
      name: ce-userId
      in: header
      required: false
      description: The user the connection authed.
      schema:
        type: string
  schemas:
    ClientCertificateInfo:
      type: object
      required:
        - thumbprint
        - content
      properties:
        thumbprint:
          type: string
        content:
          type: string
    ConnectEventRequest:
      type: object
      required:
        - claims
        - query
        - headers
        - subprotocols
        - clientCertificates
      properties:
        claims:
          type: object
          additionalProperties:
            type: array
            items:
              type: string
        query:
          type: object
          additionalProperties:
            type: array
            items:
              type: string
        headers:
          type: object
          additionalProperties:
            type: array
            items:
              type: string
        subprotocols:
          type: array
          items:
            type: string
        clientCertificates:
          type: array
          items:
            $ref: '#/components/schemas/ClientCertificateInfo'
      description: Represents a request for a connection event.
    DisconnectEventRequest:
      type: object
      required:
        - reason
      properties:
        reason:
          type: string
      description: Represents a request for a disconnection event.
    EmptyConnectedEventRequest:
      type: object
    MqttConnectEventFailureResponse:
      type: object
      required:
        - mqtt
      properties:
        mqtt:
          $ref: '#/components/schemas/MqttConnectEventFailureResponseProperties'
      description: Represents the response properties of an MQTT connection failure.
    MqttConnectEventFailureResponseProperties:
      type: object
      required:
        - code
      properties:
        code:
          type: integer
          description: The failure code. It will be sent to the clients in the CONNACK packet as a return code (MQTT 3.1.1) or reason code (MQTT 5.0). Upstream webhook should select a valid integer value defined the MQTT protocols according to the protocol versions of the clients. If Upstream webhook sets an invalid value, clients will receive "unspecified error" in the CONNACK packet.
        reason:
          type: string
          description: The reason for the failure. It's a human readable failure reason string designed for diagnostics. It will be sent to those clients whose protocols support reason string in the CONNACK packet. Now only MQTT 5.0 supports it.
        userProperties:
          type: array
          items:
            $ref: '#/components/schemas/MqttUserProperty'
          description: The user properties associated with the failure. They'll be converted to user properties in the CONNACK packet, and sent to clients whose protocols support user properties. Now only MQTT 5.0 supports user properties. Upstream webhook can use the property for additional diagnostic or other information.
      description: Represents the properties of an MQTT connection failure response.
    MqttConnectEventProperties:
      type: object
      required:
        - protocolVersion
      properties:
        protocolVersion:
          type: integer
          description: |-
            MQTT protocol version. The same as the CONNECT packet's ProtocolVersion.
            MQTT 3.1.1 is 4, MQTT 5.0 is 5.
        username:
          type: string
          description: The username field in the MQTT CONNECT packet.
        password:
          type: string
          description: The base64 encoded password field in the MQTT CONNECT packet.
        userProperties:
          type: array
          items:
            $ref: '#/components/schemas/MqttUserProperty'
          description: The user properties in the MQTT CONNECT packet.
      description: Represents the properties of an MQTT connection.
    MqttConnectEventRequest:
      type: object
      required:
        - mqtt
      properties:
        mqtt:
          $ref: '#/components/schemas/MqttConnectEventProperties'
      allOf:
        - $ref: '#/components/schemas/ConnectEventRequest'
      description: Represents a request for an MQTT connection event.
    MqttConnectEventSuccessResponse:
      type: object
      properties:
        roles:
          type: array
          items:
            type: string
          description: The property provides a way for the upstream Webhook to authorize the client. There are different roles to grant initial permissions for PubSub WebSocket clients. See details in https://learn.microsoft.com/azure/azure-web-pubsub/concept-client-protocols#permissions
        subprotocol:
          type: string
          description: It should be "mqtt" or omitted.
        userId:
          type: string
          description: As the service allows anonymous connections, it's the connect event's responsibility to tell the service the user ID of the client connection. The service reads the user ID from the response payload userId if it exists.
        groups:
          type: array
          items:
            type: string
          description: Initial groups the client joins. The property provides a convenient way for user to add the client to one or multiple groups. In this way, there's no need to have another call to add this connection to some groups.
        mqtt:
          $ref: '#/components/schemas/MqttConnectEventSuccessResponseProperties'
      description: Represents a successful response to an MQTT connection event.
    MqttConnectEventSuccessResponseProperties:
      type: object
      properties:
        userProperties:
          type: array
          items:
            $ref: '#/components/schemas/MqttUserProperty'
          description: It's additional diagnostic or other information provided by upstream server. They'll be converted to the user properties field in the CONNACK packet, and sent to clients whose protocols support user properties. Now only MQTT 5.0 supports user properties. Upstream webhook can use the property to communicate additional diagnostic or other information with clients.
      description: Represents the MQTT specific properties in a successful MQTT connection event response.
    MqttDisconnectPacketProperties:
      type: object
      required:
        - code
      properties:
        code:
          type: integer
          description: |-
            The DISCONNECT reason code defined in MQTT 5.0 spec.
            For MQTT 3.1.1 clients, it's always the default value 0.
        userProperties:
          type: array
          items:
            $ref: '#/components/schemas/MqttUserProperty'
          description: |-
            The user properties in the DISCONNECT packet sent by the client.
            The value is not null only if the client sent a DISCONNECT packet with user properties.
      description: Represents the properties of an MQTT DISCONNECT packet.
    MqttDisconnectedEventProperties:
      type: object
      required:
        - initiatedByClient
      properties:
        initiatedByClient:
          type: boolean
          description: Indicates whether the disconnection is initiated by the client.
        disconnectPacket:
          allOf:
            - $ref: '#/components/schemas/MqttDisconnectPacketProperties'
          description: |-
            The DISCONNECT packet properties to end the last physical connection.
            It may be sent by the client or server.
      description: Represents the properties of an MQTT disconnection event.
    MqttDisconnectedEventRequest:
      type: object
      required:
        - mqtt
      properties:
        mqtt:
          $ref: '#/components/schemas/MqttDisconnectedEventProperties'
      allOf:
        - $ref: '#/components/schemas/DisconnectEventRequest'
      description: Represents a request for an MQTT disconnection event.
    MqttUserProperty:
      type: object
      required:
        - name
        - value
      properties:
        name:
          type: string
        value:
          type: string
      description: Represents a user property in an MQTT connection.
