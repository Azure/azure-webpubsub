/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/webPubSubApiMappers";
import * as Parameters from "../models/parameters";
import { WebPubSubServiceClientContext } from "../webPubSubServiceClientContext";

/** Class representing a WebPubSubApi. */
export class WebPubSubApi {
  private readonly client: WebPubSubServiceClientContext;

  /**
   * Create a WebPubSubApi.
   * @param {WebPubSubServiceClientContext} client Reference to the service client.
   */
  constructor(client: WebPubSubServiceClientContext) {
    this.client = client;
  }

  /**
   * @summary Broadcast content inside request body to all the connected client connections
   * @param payloadMessage
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  broadcast(payloadMessage: string, options?: Models.WebPubSubApiBroadcastOptionalParams): Promise<msRest.RestResponse>;
  /**
   * @param payloadMessage
   * @param callback The callback
   */
  broadcast(payloadMessage: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param payloadMessage
   * @param options The optional parameters
   * @param callback The callback
   */
  broadcast(payloadMessage: string, options: Models.WebPubSubApiBroadcastOptionalParams, callback: msRest.ServiceCallback<void>): void;
  broadcast(payloadMessage: string, options?: Models.WebPubSubApiBroadcastOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        payloadMessage,
        options
      },
      broadcastOperationSpec,
      callback);
  }

  /**
   * @summary Send content inside request body to the specific user.
   * @param id The user Id.
   * @param payloadMessage
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  sendToUser(id: string, payloadMessage: string, options?: Models.WebPubSubApiSendToUserOptionalParams): Promise<msRest.RestResponse>;
  /**
   * @param id The user Id.
   * @param payloadMessage
   * @param callback The callback
   */
  sendToUser(id: string, payloadMessage: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param id The user Id.
   * @param payloadMessage
   * @param options The optional parameters
   * @param callback The callback
   */
  sendToUser(id: string, payloadMessage: string, options: Models.WebPubSubApiSendToUserOptionalParams, callback: msRest.ServiceCallback<void>): void;
  sendToUser(id: string, payloadMessage: string, options?: Models.WebPubSubApiSendToUserOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        id,
        payloadMessage,
        options
      },
      sendToUserOperationSpec,
      callback);
  }

  /**
   * @summary Send content inside request body to the specific connection.
   * @param connectionId The connection Id.
   * @param payloadMessage
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  sendToConnection(connectionId: string, payloadMessage: string, options?: Models.WebPubSubApiSendToConnectionOptionalParams): Promise<msRest.RestResponse>;
  /**
   * @param connectionId The connection Id.
   * @param payloadMessage
   * @param callback The callback
   */
  sendToConnection(connectionId: string, payloadMessage: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param connectionId The connection Id.
   * @param payloadMessage
   * @param options The optional parameters
   * @param callback The callback
   */
  sendToConnection(connectionId: string, payloadMessage: string, options: Models.WebPubSubApiSendToConnectionOptionalParams, callback: msRest.ServiceCallback<void>): void;
  sendToConnection(connectionId: string, payloadMessage: string, options?: Models.WebPubSubApiSendToConnectionOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        connectionId,
        payloadMessage,
        options
      },
      sendToConnectionOperationSpec,
      callback);
  }

  /**
   * @summary Send content inside request body to a group of connections.
   * @param group Target group name, which length should be greater than 0 and less than 1025.
   * @param payloadMessage
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  groupBroadcast(group: string, payloadMessage: string, options?: Models.WebPubSubApiGroupBroadcastOptionalParams): Promise<msRest.RestResponse>;
  /**
   * @param group Target group name, which length should be greater than 0 and less than 1025.
   * @param payloadMessage
   * @param callback The callback
   */
  groupBroadcast(group: string, payloadMessage: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param group Target group name, which length should be greater than 0 and less than 1025.
   * @param payloadMessage
   * @param options The optional parameters
   * @param callback The callback
   */
  groupBroadcast(group: string, payloadMessage: string, options: Models.WebPubSubApiGroupBroadcastOptionalParams, callback: msRest.ServiceCallback<void>): void;
  groupBroadcast(group: string, payloadMessage: string, options?: Models.WebPubSubApiGroupBroadcastOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        group,
        payloadMessage,
        options
      },
      groupBroadcastOperationSpec,
      callback);
  }

  /**
   * @summary Check if the connection with the given connectionId exists
   * @param connectionId The connection Id.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebPubSubApiCheckConnectionExistenceResponse>
   */
  checkConnectionExistence(connectionId: string, options?: Models.WebPubSubApiCheckConnectionExistenceOptionalParams): Promise<Models.WebPubSubApiCheckConnectionExistenceResponse>;
  /**
   * @param connectionId The connection Id.
   * @param callback The callback
   */
  checkConnectionExistence(connectionId: string, callback: msRest.ServiceCallback<boolean>): void;
  /**
   * @param connectionId The connection Id.
   * @param options The optional parameters
   * @param callback The callback
   */
  checkConnectionExistence(connectionId: string, options: Models.WebPubSubApiCheckConnectionExistenceOptionalParams, callback: msRest.ServiceCallback<boolean>): void;
  checkConnectionExistence(connectionId: string, options?: Models.WebPubSubApiCheckConnectionExistenceOptionalParams | msRest.ServiceCallback<boolean>, callback?: msRest.ServiceCallback<boolean>): Promise<Models.WebPubSubApiCheckConnectionExistenceResponse> {
    return this.client.sendOperationRequest(
      {
        connectionId,
        options
      },
      checkConnectionExistenceOperationSpec,
      callback) as Promise<Models.WebPubSubApiCheckConnectionExistenceResponse>;
  }

  /**
   * @summary Close the client connection
   * @param connectionId Target connection Id
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  closeClientConnection(connectionId: string, options?: Models.WebPubSubApiCloseClientConnectionOptionalParams): Promise<msRest.RestResponse>;
  /**
   * @param connectionId Target connection Id
   * @param callback The callback
   */
  closeClientConnection(connectionId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param connectionId Target connection Id
   * @param options The optional parameters
   * @param callback The callback
   */
  closeClientConnection(connectionId: string, options: Models.WebPubSubApiCloseClientConnectionOptionalParams, callback: msRest.ServiceCallback<void>): void;
  closeClientConnection(connectionId: string, options?: Models.WebPubSubApiCloseClientConnectionOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        connectionId,
        options
      },
      closeClientConnectionOperationSpec,
      callback);
  }

  /**
   * @summary Check if there are any client connections inside the given group
   * @param group Target group name, which length should be greater than 0 and less than 1025.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebPubSubApiCheckGroupExistenceResponse>
   */
  checkGroupExistence(group: string, options?: Models.WebPubSubApiCheckGroupExistenceOptionalParams): Promise<Models.WebPubSubApiCheckGroupExistenceResponse>;
  /**
   * @param group Target group name, which length should be greater than 0 and less than 1025.
   * @param callback The callback
   */
  checkGroupExistence(group: string, callback: msRest.ServiceCallback<boolean>): void;
  /**
   * @param group Target group name, which length should be greater than 0 and less than 1025.
   * @param options The optional parameters
   * @param callback The callback
   */
  checkGroupExistence(group: string, options: Models.WebPubSubApiCheckGroupExistenceOptionalParams, callback: msRest.ServiceCallback<boolean>): void;
  checkGroupExistence(group: string, options?: Models.WebPubSubApiCheckGroupExistenceOptionalParams | msRest.ServiceCallback<boolean>, callback?: msRest.ServiceCallback<boolean>): Promise<Models.WebPubSubApiCheckGroupExistenceResponse> {
    return this.client.sendOperationRequest(
      {
        group,
        options
      },
      checkGroupExistenceOperationSpec,
      callback) as Promise<Models.WebPubSubApiCheckGroupExistenceResponse>;
  }

  /**
   * @summary Check if there are any client connections connected for the given user
   * @param user Target user Id
   * @param [options] The optional parameters
   * @returns Promise<Models.WebPubSubApiCheckUserExistenceResponse>
   */
  checkUserExistence(user: string, options?: Models.WebPubSubApiCheckUserExistenceOptionalParams): Promise<Models.WebPubSubApiCheckUserExistenceResponse>;
  /**
   * @param user Target user Id
   * @param callback The callback
   */
  checkUserExistence(user: string, callback: msRest.ServiceCallback<boolean>): void;
  /**
   * @param user Target user Id
   * @param options The optional parameters
   * @param callback The callback
   */
  checkUserExistence(user: string, options: Models.WebPubSubApiCheckUserExistenceOptionalParams, callback: msRest.ServiceCallback<boolean>): void;
  checkUserExistence(user: string, options?: Models.WebPubSubApiCheckUserExistenceOptionalParams | msRest.ServiceCallback<boolean>, callback?: msRest.ServiceCallback<boolean>): Promise<Models.WebPubSubApiCheckUserExistenceResponse> {
    return this.client.sendOperationRequest(
      {
        user,
        options
      },
      checkUserExistenceOperationSpec,
      callback) as Promise<Models.WebPubSubApiCheckUserExistenceResponse>;
  }

  /**
   * @summary Add a connection to the target group.
   * @param group Target group name, which length should be greater than 0 and less than 1025.
   * @param connectionId Target connection Id
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  addConnectionToGroup(group: string, connectionId: string, options?: Models.WebPubSubApiAddConnectionToGroupOptionalParams): Promise<msRest.RestResponse>;
  /**
   * @param group Target group name, which length should be greater than 0 and less than 1025.
   * @param connectionId Target connection Id
   * @param callback The callback
   */
  addConnectionToGroup(group: string, connectionId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param group Target group name, which length should be greater than 0 and less than 1025.
   * @param connectionId Target connection Id
   * @param options The optional parameters
   * @param callback The callback
   */
  addConnectionToGroup(group: string, connectionId: string, options: Models.WebPubSubApiAddConnectionToGroupOptionalParams, callback: msRest.ServiceCallback<void>): void;
  addConnectionToGroup(group: string, connectionId: string, options?: Models.WebPubSubApiAddConnectionToGroupOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        group,
        connectionId,
        options
      },
      addConnectionToGroupOperationSpec,
      callback);
  }

  /**
   * @summary Remove a connection from the target group.
   * @param group Target group name, which length should be greater than 0 and less than 1025.
   * @param connectionId Target connection Id
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  removeConnectionFromGroup(group: string, connectionId: string, options?: Models.WebPubSubApiRemoveConnectionFromGroupOptionalParams): Promise<msRest.RestResponse>;
  /**
   * @param group Target group name, which length should be greater than 0 and less than 1025.
   * @param connectionId Target connection Id
   * @param callback The callback
   */
  removeConnectionFromGroup(group: string, connectionId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param group Target group name, which length should be greater than 0 and less than 1025.
   * @param connectionId Target connection Id
   * @param options The optional parameters
   * @param callback The callback
   */
  removeConnectionFromGroup(group: string, connectionId: string, options: Models.WebPubSubApiRemoveConnectionFromGroupOptionalParams, callback: msRest.ServiceCallback<void>): void;
  removeConnectionFromGroup(group: string, connectionId: string, options?: Models.WebPubSubApiRemoveConnectionFromGroupOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        group,
        connectionId,
        options
      },
      removeConnectionFromGroupOperationSpec,
      callback);
  }

  /**
   * @summary Check whether a user exists in the target group.
   * @param group Target group name, which length should be greater than 0 and less than 1025.
   * @param user Target user Id
   * @param [options] The optional parameters
   * @returns Promise<Models.WebPubSubApiCheckUserExistenceInGroupResponse>
   */
  checkUserExistenceInGroup(group: string, user: string, options?: Models.WebPubSubApiCheckUserExistenceInGroupOptionalParams): Promise<Models.WebPubSubApiCheckUserExistenceInGroupResponse>;
  /**
   * @param group Target group name, which length should be greater than 0 and less than 1025.
   * @param user Target user Id
   * @param callback The callback
   */
  checkUserExistenceInGroup(group: string, user: string, callback: msRest.ServiceCallback<boolean>): void;
  /**
   * @param group Target group name, which length should be greater than 0 and less than 1025.
   * @param user Target user Id
   * @param options The optional parameters
   * @param callback The callback
   */
  checkUserExistenceInGroup(group: string, user: string, options: Models.WebPubSubApiCheckUserExistenceInGroupOptionalParams, callback: msRest.ServiceCallback<boolean>): void;
  checkUserExistenceInGroup(group: string, user: string, options?: Models.WebPubSubApiCheckUserExistenceInGroupOptionalParams | msRest.ServiceCallback<boolean>, callback?: msRest.ServiceCallback<boolean>): Promise<Models.WebPubSubApiCheckUserExistenceInGroupResponse> {
    return this.client.sendOperationRequest(
      {
        group,
        user,
        options
      },
      checkUserExistenceInGroupOperationSpec,
      callback) as Promise<Models.WebPubSubApiCheckUserExistenceInGroupResponse>;
  }

  /**
   * @summary Add a user to the target group.
   * @param group Target group name, which length should be greater than 0 and less than 1025.
   * @param user Target user Id
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  addUserToGroup(group: string, user: string, options?: Models.WebPubSubApiAddUserToGroupOptionalParams): Promise<msRest.RestResponse>;
  /**
   * @param group Target group name, which length should be greater than 0 and less than 1025.
   * @param user Target user Id
   * @param callback The callback
   */
  addUserToGroup(group: string, user: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param group Target group name, which length should be greater than 0 and less than 1025.
   * @param user Target user Id
   * @param options The optional parameters
   * @param callback The callback
   */
  addUserToGroup(group: string, user: string, options: Models.WebPubSubApiAddUserToGroupOptionalParams, callback: msRest.ServiceCallback<void>): void;
  addUserToGroup(group: string, user: string, options?: Models.WebPubSubApiAddUserToGroupOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        group,
        user,
        options
      },
      addUserToGroupOperationSpec,
      callback);
  }

  /**
   * @summary Remove a user from the target group.
   * @param group Target group name, which length should be greater than 0 and less than 1025.
   * @param user Target user Id
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  removeUserFromGroup(group: string, user: string, options?: Models.WebPubSubApiRemoveUserFromGroupOptionalParams): Promise<msRest.RestResponse>;
  /**
   * @param group Target group name, which length should be greater than 0 and less than 1025.
   * @param user Target user Id
   * @param callback The callback
   */
  removeUserFromGroup(group: string, user: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param group Target group name, which length should be greater than 0 and less than 1025.
   * @param user Target user Id
   * @param options The optional parameters
   * @param callback The callback
   */
  removeUserFromGroup(group: string, user: string, options: Models.WebPubSubApiRemoveUserFromGroupOptionalParams, callback: msRest.ServiceCallback<void>): void;
  removeUserFromGroup(group: string, user: string, options?: Models.WebPubSubApiRemoveUserFromGroupOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        group,
        user,
        options
      },
      removeUserFromGroupOperationSpec,
      callback);
  }

  /**
   * @summary Remove a user from all groups.
   * @param user Target user Id
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  removeUserFromAllGroups(user: string, options?: Models.WebPubSubApiRemoveUserFromAllGroupsOptionalParams): Promise<msRest.RestResponse>;
  /**
   * @param user Target user Id
   * @param callback The callback
   */
  removeUserFromAllGroups(user: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param user Target user Id
   * @param options The optional parameters
   * @param callback The callback
   */
  removeUserFromAllGroups(user: string, options: Models.WebPubSubApiRemoveUserFromAllGroupsOptionalParams, callback: msRest.ServiceCallback<void>): void;
  removeUserFromAllGroups(user: string, options?: Models.WebPubSubApiRemoveUserFromAllGroupsOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        user,
        options
      },
      removeUserFromAllGroupsOperationSpec,
      callback);
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const broadcastOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "api/:send",
  queryParameters: [
    Parameters.hub,
    Parameters.excluded,
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "payloadMessage",
    mapper: {
      required: true,
      serializedName: "payloadMessage",
      type: {
        name: "String"
      }
    }
  },
  contentType: "application/octet-stream",
  responses: {
    202: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const sendToUserOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "api/users/{id}/:send",
  urlParameters: [
    Parameters.id
  ],
  queryParameters: [
    Parameters.hub,
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "payloadMessage",
    mapper: {
      required: true,
      serializedName: "payloadMessage",
      type: {
        name: "String"
      }
    }
  },
  contentType: "application/octet-stream",
  responses: {
    202: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const sendToConnectionOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "api/connections/{connectionId}/:send",
  urlParameters: [
    Parameters.connectionId0
  ],
  queryParameters: [
    Parameters.hub,
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "payloadMessage",
    mapper: {
      required: true,
      serializedName: "payloadMessage",
      type: {
        name: "String"
      }
    }
  },
  contentType: "application/octet-stream",
  responses: {
    202: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const groupBroadcastOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "api/groups/{group}/:send",
  urlParameters: [
    Parameters.group0
  ],
  queryParameters: [
    Parameters.hub,
    Parameters.excluded,
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "payloadMessage",
    mapper: {
      required: true,
      serializedName: "payloadMessage",
      type: {
        name: "String"
      }
    }
  },
  contentType: "application/octet-stream",
  responses: {
    202: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const checkConnectionExistenceOperationSpec: msRest.OperationSpec = {
  httpMethod: "HEAD",
  path: "api/connections/{connectionId}",
  urlParameters: [
    Parameters.connectionId1
  ],
  queryParameters: [
    Parameters.hub,
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    404: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const closeClientConnectionOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "api/connections/{connectionId}",
  urlParameters: [
    Parameters.connectionId1
  ],
  queryParameters: [
    Parameters.hub,
    Parameters.reason,
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const checkGroupExistenceOperationSpec: msRest.OperationSpec = {
  httpMethod: "HEAD",
  path: "api/groups/{group}",
  urlParameters: [
    Parameters.group1
  ],
  queryParameters: [
    Parameters.hub,
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    404: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const checkUserExistenceOperationSpec: msRest.OperationSpec = {
  httpMethod: "HEAD",
  path: "api/users/{user}",
  urlParameters: [
    Parameters.user0
  ],
  queryParameters: [
    Parameters.hub,
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    404: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const addConnectionToGroupOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "api/groups/{group}/connections/{connectionId}",
  urlParameters: [
    Parameters.group1,
    Parameters.connectionId0
  ],
  queryParameters: [
    Parameters.hub,
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    404: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const removeConnectionFromGroupOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "api/groups/{group}/connections/{connectionId}",
  urlParameters: [
    Parameters.group1,
    Parameters.connectionId0
  ],
  queryParameters: [
    Parameters.hub,
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    404: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const checkUserExistenceInGroupOperationSpec: msRest.OperationSpec = {
  httpMethod: "HEAD",
  path: "api/users/{user}/groups/{group}",
  urlParameters: [
    Parameters.group1,
    Parameters.user1
  ],
  queryParameters: [
    Parameters.hub,
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    404: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const addUserToGroupOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "api/users/{user}/groups/{group}",
  urlParameters: [
    Parameters.group1,
    Parameters.user1
  ],
  queryParameters: [
    Parameters.hub,
    Parameters.ttl,
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    202: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const removeUserFromGroupOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "api/users/{user}/groups/{group}",
  urlParameters: [
    Parameters.group1,
    Parameters.user1
  ],
  queryParameters: [
    Parameters.hub,
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const removeUserFromAllGroupsOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "api/users/{user}/groups",
  urlParameters: [
    Parameters.user0
  ],
  queryParameters: [
    Parameters.hub,
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};
