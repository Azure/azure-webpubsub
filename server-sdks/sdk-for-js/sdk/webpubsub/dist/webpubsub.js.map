{"version":3,"file":"webpubsub.js","sources":["../node_modules/tslib/tslib.es6.js","../src/webPubSubServiceEndpoint.ts","../node_modules/typescript-base64-arraybuffer/index.js","../src/webPubSubEventProtocols.ts","../src/generated/models/mappers.ts","../src/generated/models/healthApiMappers.ts","../src/generated/models/parameters.ts","../src/generated/operations/healthApi.ts","../src/generated/models/webPubSubApiMappers.ts","../src/generated/operations/webPubSubApi.ts","../src/generated/webPubSubServiceClientContext.ts","../src/generated/webPubSubServiceClient.ts","../src/webPubSubApiExtensions.ts","../src/webPubSubKeyCredentials.ts","../src/webPubSubServiceRestClient.ts","../src/webPubSubServer.ts"],"sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __createBinding(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","// Copyright (c) Microsoft Corporation.\r\n// Licensed under the MIT license.\r\n\r\nimport jwt from \"jsonwebtoken\";\r\nimport { URL } from \"url\";\r\n\r\nexport interface NegotiateResponse {\r\n  url: string;\r\n  token: string;\r\n}\r\n\r\ninterface ServiceEndpoint {\r\n  serviceUrl: URL;\r\n  websocketHost: string;\r\n  audience: string;\r\n  key: string;\r\n}\r\n\r\ninterface NegotiateOptions {\r\n  userId?: string;\r\n  claims?: { [key: string]: string[] };\r\n}\r\n\r\nexport class WebPubSubServiceEndpoint {\r\n  endpoint: ServiceEndpoint;\r\n\r\n  /**\r\n   * Creates a new WebPubSubServiceEndpoint object.\r\n   *\r\n   * @constructor\r\n   * @param {string} conn The Connection String.\r\n   * @param {string} hub The Hub\r\n   */\r\n  constructor(conn: string) {\r\n    this.endpoint = this.getServiceEndpoint(conn);\r\n  }\r\n\r\n  clientNegotiate(hub: string, options?: NegotiateOptions): NegotiateResponse {\r\n    var clientUrl = `${this.endpoint.websocketHost}client/hubs/${hub}`;\r\n    const audience = `${this.endpoint.audience}client/hubs/${hub}`;\r\n    var key = this.endpoint.key;\r\n    var payload = options?.claims ?? {};\r\n    var signOptions: jwt.SignOptions = {\r\n      audience: audience,\r\n      expiresIn: \"1h\",\r\n      algorithm: \"HS256\",\r\n    };\r\n    if (options?.userId) {\r\n      signOptions.subject = options?.userId;\r\n    }\r\n\r\n    return {\r\n      url: clientUrl,\r\n      token: jwt.sign(payload, key, signOptions),\r\n    };\r\n  }\r\n\r\n  private getServiceEndpoint(conn: string): ServiceEndpoint {\r\n    var endpoint = this.parseConnectionString(conn);\r\n\r\n    if (!endpoint) {\r\n      throw new Error(\"Invalid connection string: \" + conn);\r\n    }\r\n\r\n    return endpoint as ServiceEndpoint;\r\n  }\r\n\r\n  private parseConnectionString(conn: string): ServiceEndpoint | null {\r\n    const em = /Endpoint=(.*?)(;|$)/g.exec(conn);\r\n    if (!em) return null;\r\n    const endpoint = em[1];\r\n    const km = /AccessKey=(.*?)(;|$)/g.exec(conn);\r\n    if (!km) return null;\r\n    const key = km[1];\r\n    if (!endpoint || !key) return null;\r\n    const pm = /Port=(.*?)(;|$)/g.exec(conn);\r\n    const port = pm == null ? '' : pm[1];\r\n    var url = new URL(endpoint);\r\n    var originalProtocol = url.protocol;\r\n    url.protocol = originalProtocol === 'http:' ? 'ws:' : 'wss:';\r\n    const audience = url.toString();\r\n    url.port = port;\r\n    var websocketHost = url.toString();\r\n    url.protocol = originalProtocol;\r\n    return {\r\n      websocketHost: websocketHost, \r\n      serviceUrl: url,\r\n      audience: audience,\r\n      key: key,\r\n    };\r\n  }\r\n}\r\n","// For the base64 encoding pieces.\nvar alphabet = [\n    'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H',\n    'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P',\n    'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X',\n    'Y', 'Z', 'a', 'b', 'c', 'd', 'e', 'f',\n    'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n    'o', 'p', 'q', 'r', 's', 't', 'u', 'v',\n    'w', 'x', 'y', 'z', '0', '1', '2', '3',\n    '4', '5', '6', '7', '8', '9', '+', '/'\n];\nvar values = {};\nfor (var /** @type {?} */ i = 0; i < 64; ++i) {\n    values[alphabet[i]] = i;\n}\n/**\n * @param {?} bytes\n * @return {?}\n */\nfunction encode(bytes) {\n    var /** @type {?} */ array = new Uint8Array(bytes);\n    var /** @type {?} */ base64 = [];\n    var /** @type {?} */ index = 0;\n    var /** @type {?} */ quantum;\n    var /** @type {?} */ value;\n    /* tslint:disable:no-bitwise */\n    // Grab as many sets of 3 bytes as we can, that form 24 bits.\n    while (index + 2 < array.byteLength) {\n        quantum = (array[index] << 16) | (array[index + 1] << 8) | array[index + 2];\n        // 24 bits will become 4 base64 chars.\n        value = (quantum >> 18) & 0x3f;\n        base64.push(alphabet[value]);\n        value = (quantum >> 12) & 0x3f;\n        base64.push(alphabet[value]);\n        value = (quantum >> 6) & 0x3f;\n        base64.push(alphabet[value]);\n        value = quantum & 0x3f;\n        base64.push(alphabet[value]);\n        index += 3;\n    }\n    // At this point, there are 0, 1 or 2 bytes left.\n    if (index + 1 === array.byteLength) {\n        // 8 bits; shift by 4 to pad on the right with 0s to make 12 bits total.\n        quantum = array[index] << 4;\n        value = (quantum >> 6) & 0x3f;\n        base64.push(alphabet[value]);\n        value = quantum & 0x3f;\n        base64.push(alphabet[value]);\n        base64.push('==');\n    }\n    else if (index + 2 === array.byteLength) {\n        // 16 bits; shift by 2 to pad on the right with 0s to make 18 bits total.\n        quantum = (array[index] << 10) | (array[index + 1] << 2);\n        value = (quantum >> 12) & 0x3f;\n        base64.push(alphabet[value]);\n        value = (quantum >> 6) & 0x3f;\n        base64.push(alphabet[value]);\n        value = quantum & 0x3f;\n        base64.push(alphabet[value]);\n        base64.push('=');\n    }\n    /* tslint:enable:no-bitwise */\n    return base64.join('');\n}\n/**\n * @param {?} string\n * @return {?}\n */\nfunction decode(string) {\n    var /** @type {?} */ size = string.length;\n    if (size === 0) {\n        return new Uint8Array(new ArrayBuffer(0));\n    }\n    if (size % 4 !== 0) {\n        throw new Error('Bad length: ' + size);\n    }\n    if (!string.match(/^[a-zA-Z0-9+/]+={0,2}$/)) {\n        throw new Error('Invalid base64 encoded value');\n    }\n    // Every 4 base64 chars = 24 bits = 3 bytes. But, we also need to figure out\n    // padding, if any.\n    var /** @type {?} */ bytes = 3 * (size / 4);\n    var /** @type {?} */ numPad = 0;\n    if (string.charAt(size - 1) === '=') {\n        numPad++;\n        bytes--;\n    }\n    if (string.charAt(size - 2) === '=') {\n        numPad++;\n        bytes--;\n    }\n    var /** @type {?} */ buffer = new Uint8Array(new ArrayBuffer(bytes));\n    var /** @type {?} */ index = 0;\n    var /** @type {?} */ bufferIndex = 0;\n    var /** @type {?} */ quantum;\n    if (numPad > 0) {\n        size -= 4; // handle the last one specially\n    }\n    /* tslint:disable:no-bitwise */\n    while (index < size) {\n        quantum = 0;\n        for (var /** @type {?} */ i = 0; i < 4; ++i) {\n            quantum = (quantum << 6) | values[string.charAt(index + i)];\n        }\n        // quantum is now a 24-bit value.\n        buffer[bufferIndex++] = (quantum >> 16) & 0xff;\n        buffer[bufferIndex++] = (quantum >> 8) & 0xff;\n        buffer[bufferIndex++] = quantum & 0xff;\n        index += 4;\n    }\n    if (numPad > 0) {\n        // if numPad == 1, there is one =, and we have 18 bits with 2 0s at end.\n        // if numPad == 2, there is two ==, and we have 12 bits with 4 0s at end.\n        // First, grab my quantum.\n        quantum = 0;\n        for (var /** @type {?} */ i = 0; i < 4 - numPad; ++i) {\n            quantum = (quantum << 6) | values[string.charAt(index + i)];\n        }\n        if (numPad === 1) {\n            // quantum is 18 bits, but really represents two bytes.\n            quantum = quantum >> 2;\n            buffer[bufferIndex++] = (quantum >> 8) & 0xff;\n            buffer[bufferIndex++] = quantum & 0xff;\n        }\n        else {\n            // quantum is 12 bits, but really represents only one byte.\n            quantum = quantum >> 4;\n            buffer[bufferIndex++] = quantum & 0xff;\n        }\n    }\n    /* tslint:enable:no-bitwise */\n    return buffer;\n}\n\nexport { encode, decode };\n","// Copyright (c) Microsoft Corporation.\r\n// Licensed under the MIT license.\r\n\r\nimport { CloudEvent, Message, HTTP } from \"cloudevents\";\r\nimport { IncomingMessage, ServerResponse } from \"http\";\r\nimport { decode } from 'typescript-base64-arraybuffer';\r\n\r\n\r\nexport interface ErrorResponse {\r\n  code: ErrorCode;\r\n  detail?: string;\r\n}\r\n\r\nexport enum ErrorCode {\r\n  serverError, // Response to service using 500\r\n  userError, // Response to service using 400\r\n  unauthorized, // Response to service using 401\r\n}\r\n\r\nexport interface ConnectResponse {\r\n  error?: ErrorResponse; // If error is set, we consider this a failed response\r\n  groups?: string[];\r\n  roles?: string[];\r\n  userId?: string;\r\n  subprotocol?: string;\r\n}\r\n\r\nexport interface UserEventResponse {\r\n  error?: ErrorResponse, // If error is set, we consider this a failed response\r\n  payload?: PayloadData;\r\n}\r\n\r\nexport interface ConnectionContext {\r\n  hub: string;\r\n  connectionId: string;\r\n  eventName: string;\r\n  userId?: string;\r\n}\r\n\r\nexport interface ConnectRequest {\r\n  context: ConnectionContext,\r\n  claims?: { [key: string]: string[] };\r\n  queries?: { [key: string]: string[] };\r\n  subprotocols?: string[];\r\n  clientCertificates?: Certificate[];\r\n}\r\n\r\nexport interface Certificate {\r\n  thumbprint: string;\r\n}\r\n\r\nexport interface ConnectedRequest {\r\n  context: ConnectionContext,\r\n}\r\n\r\nexport interface UserEventRequest {\r\n  context: ConnectionContext,\r\n  eventName: string;\r\n  payload: PayloadData;\r\n}\r\n\r\nexport interface PayloadData {\r\n  data: string | ArrayBuffer;\r\n  dataType: PayloadDataType;\r\n}\r\n\r\nenum PayloadDataType {\r\n  binary,\r\n  text,\r\n  json,\r\n}\r\n\r\nexport interface DisconnectedRequest {\r\n  context: ConnectionContext,\r\n  reason?: string;\r\n}\r\n\r\nexport interface WebPubSubEventHandler {\r\n  onConnect?: (r: ConnectRequest) => Promise<ConnectResponse>\r\n  onUserEvent?: (r: UserEventRequest) => Promise<UserEventResponse>\r\n  onConnected?: (r: ConnectedRequest) => Promise<void>;\r\n  onDisconnected?: (r: DisconnectedRequest) => Promise<void>;\r\n}\r\n\r\nexport class ProtocolParser {\r\n  constructor(private hub: string, private eventHandler?: WebPubSubEventHandler, private dumpRequest?: boolean) {\r\n  }\r\n\r\n  public async processNodeHttpRequest(request: IncomingMessage, response: ServerResponse): Promise<void> {\r\n    if (!this.eventHandler) {\r\n      response.end();\r\n      return;\r\n    }\r\n    try {\r\n      var eventRequest = await this.convertHttpToEvent(request);\r\n      var eventResponse = await this.getResponse(eventRequest);\r\n      if (!eventResponse) {\r\n        // we consider no response as 200 valid response\r\n        response.end();\r\n        return;\r\n      }\r\n      if (eventResponse.error) {\r\n        switch (eventResponse.error.code) {\r\n          case ErrorCode.userError:\r\n            response.statusCode = 400;\r\n            break;\r\n          case ErrorCode.unauthorized:\r\n            response.statusCode = 402;\r\n            break;\r\n          default:\r\n            response.statusCode = 500;\r\n            break;\r\n        }\r\n        response.end(eventResponse.error.detail ?? '');\r\n        return;\r\n      }\r\n\r\n      if (eventResponse?.payload) {\r\n        if (eventResponse.payload.dataType === PayloadDataType.binary) {\r\n          response.setHeader(\"Content-Type\", \"application/octet-stream\");\r\n\r\n        } else if (eventResponse.payload.dataType === PayloadDataType.json) {\r\n          response.setHeader(\"Content-Type\", \"application/json\");\r\n\r\n        } else {\r\n          response.setHeader(\"Content-Type\", \"text/plain; charset=utf-8\");\r\n        }\r\n        response.end(eventResponse.payload?.data ?? '');\r\n      }\r\n    } catch (err) {\r\n      console.error(`Error processing request ${request}: ${err}`);\r\n      response.statusCode = 500;\r\n      response.end(err.message);\r\n    }\r\n  }\r\n\r\n  private async getResponse(request: Message): Promise<UserEventResponse | undefined> {\r\n    const receivedEvent = HTTP.toEvent(request);\r\n\r\n    if (this.dumpRequest === true) {\r\n      console.log(receivedEvent);\r\n    }\r\n\r\n    var type = receivedEvent.type.toLowerCase();\r\n    var context = this.GetContext(receivedEvent);\r\n    if (context.hub !== this.hub) {\r\n      // it is possible when multiple hubs share the same handler\r\n      console.info(`Incoming request is for hub '${this.hub}' while the incoming request is for hub '${context.hub}'`);\r\n      return;\r\n    }\r\n\r\n    // TODO: valid request is a valid cloud event with WebPubSub extension\r\n    if (type === \"azure.webpubsub.sys.connect\") {\r\n      if (!this.eventHandler?.onConnect){\r\n        return;\r\n      }\r\n      var connectRequest = receivedEvent.data as ConnectRequest;\r\n      if (!connectRequest) {\r\n        throw new Error(\"Data is expected\");\r\n      }\r\n\r\n      connectRequest.context = context;\r\n      var connectResponse = await this.eventHandler.onConnect(connectRequest);\r\n      if (connectRequest) {\r\n        return {\r\n          payload: {\r\n            data: JSON.stringify(connectResponse),\r\n            dataType: PayloadDataType.json\r\n          }\r\n        };\r\n      } else {\r\n        return;\r\n      }\r\n    } else if (type === \"azure.webpubsub.sys.connected\") {\r\n      if (!this.eventHandler?.onConnected){\r\n        return;\r\n      }\r\n\r\n      var connectedRequest = receivedEvent.data as ConnectedRequest;\r\n      if (!connectedRequest) {\r\n        throw new Error(\"Data is expected\");\r\n      }\r\n\r\n      connectedRequest.context = context;\r\n      this.eventHandler.onConnected(connectedRequest);\r\n    } else if (type === \"azure.webpubsub.sys.disconnected\") {\r\n      if (!this.eventHandler?.onDisconnected){\r\n        return;\r\n      }\r\n\r\n      var disconnectedRequest = receivedEvent.data as DisconnectedRequest;\r\n      if (!disconnectedRequest) {\r\n        throw new Error(\"Data is expected\");\r\n      }\r\n\r\n      disconnectedRequest.context = context;\r\n      this.eventHandler.onDisconnected(disconnectedRequest);\r\n    } else if (type.startsWith(\"azure.webpubsub.user\")) {\r\n      if (!this.eventHandler?.onUserEvent){\r\n        return;\r\n      }\r\n      var data: ArrayBuffer | string;\r\n      var dataType = PayloadDataType.binary;\r\n      if (receivedEvent.data) {\r\n        data = receivedEvent.data as string;\r\n        dataType = receivedEvent.datacontenttype === 'application/json' ? PayloadDataType.json : PayloadDataType.text;\r\n      } else if (receivedEvent.data_base64) {\r\n        data = decode(receivedEvent.data_base64);\r\n      } else {\r\n        throw new Error(\"empty data payload\");\r\n      }\r\n      var userRequest: UserEventRequest = {\r\n        eventName: context.eventName,\r\n        context: context,\r\n        payload: {\r\n          data: data,\r\n          dataType: dataType\r\n        }\r\n      };\r\n\r\n      if (!userRequest) {\r\n        throw new Error(\"Data is expected\");\r\n      }\r\n\r\n      userRequest.context = context;\r\n      return await this.eventHandler.onUserEvent(userRequest);\r\n    }\r\n    else {\r\n      throw new Error(\"Not supported event: \" + type);\r\n    }\r\n  }\r\n\r\n  private GetContext(ce: CloudEvent): ConnectionContext {\r\n    var context = {\r\n      signature: ce[\"signature\"] as string,\r\n      userId: ce[\"userid\"] as string,\r\n      hub: ce[\"hub\"] as string,\r\n      connectionId: ce[\"connectionid\"] as string,\r\n      eventName: ce[\"eventname\"] as string\r\n    }\r\n\r\n    // TODO: validation\r\n    return context;\r\n  }\r\n\r\n  private async convertHttpToEvent(request: IncomingMessage): Promise<Message> {\r\n    const normalized: Message = {\r\n      headers: {},\r\n      body: ''\r\n    };\r\n    if (request.headers) {\r\n      for (const key in request.headers) {\r\n        if (Object.prototype.hasOwnProperty.call(request.headers, key)) {\r\n          const element = request.headers[key];\r\n          if (element === undefined) {\r\n            continue;\r\n          }\r\n          if (typeof element === 'string') {\r\n            normalized.headers[key] = element;\r\n          } else {\r\n            normalized.headers[key] = element.join(',');\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    normalized.body = await this.readRequestBody(request);\r\n    return normalized;\r\n  }\r\n\r\n  private readRequestBody(req: IncomingMessage): Promise<string> {\r\n    return new Promise(function (resolve, reject) {\r\n      var body = \"\";\r\n      req.on('data', function (chunk) {\r\n        body += chunk;\r\n      });\r\n      req.on('end', function () {\r\n        resolve(body);\r\n      });\r\n      // reject on request error\r\n      req.on('error', function (err) {\r\n        // This is not a \"Second reject\", just a different sort of failure\r\n        reject(err);\r\n      });\r\n    });\r\n  }\r\n}","/*\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport { CloudErrorMapper, BaseResourceMapper } from \"@azure/ms-rest-azure-js\";\n\nexport const CloudError = CloudErrorMapper;\nexport const BaseResource = BaseResourceMapper;\n","/*\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nexport {\n  CloudError\n} from \"../models/mappers\";\n","/*\r\n * Code generated by Microsoft (R) AutoRest Code Generator.\r\n * Changes may cause incorrect behavior and will be lost if the code is\r\n * regenerated.\r\n */\r\n\r\nimport * as msRest from \"@azure/ms-rest-js\";\r\n\r\nexport const acceptLanguage: msRest.OperationParameter = {\r\n  parameterPath: \"acceptLanguage\",\r\n  mapper: {\r\n    serializedName: \"accept-language\",\r\n    defaultValue: 'en-US',\r\n    type: {\r\n      name: \"String\"\r\n    }\r\n  }\r\n};\r\nexport const apiVersion: msRest.OperationQueryParameter = {\r\n  parameterPath: [\r\n    \"options\",\r\n    \"apiVersion\"\r\n  ],\r\n  mapper: {\r\n    serializedName: \"api-version\",\r\n    defaultValue: '2020-10-01',\r\n    type: {\r\n      name: \"String\"\r\n    }\r\n  }\r\n};\r\nexport const connectionId: msRest.OperationURLParameter = {\r\n  parameterPath: \"connectionId\",\r\n  mapper: {\r\n    required: true,\r\n    serializedName: \"connectionId\",\r\n    type: {\r\n      name: \"String\"\r\n    }\r\n  }\r\n};\r\nexport const excluded: msRest.OperationQueryParameter = {\r\n  parameterPath: [\r\n    \"options\",\r\n    \"excluded\"\r\n  ],\r\n  mapper: {\r\n    serializedName: \"excluded\",\r\n    type: {\r\n      name: \"Sequence\",\r\n      element: {\r\n        type: {\r\n          name: \"String\"\r\n        }\r\n      }\r\n    }\r\n  },\r\n  collectionFormat: msRest.QueryCollectionFormat.Multi\r\n};\r\nexport const group0: msRest.OperationURLParameter = {\r\n  parameterPath: \"group\",\r\n  mapper: {\r\n    required: true,\r\n    serializedName: \"group\",\r\n    type: {\r\n      name: \"String\"\r\n    }\r\n  }\r\n};\r\nexport const group1: msRest.OperationQueryParameter = {\r\n  parameterPath: [\r\n    \"options\",\r\n    \"group\"\r\n  ],\r\n  mapper: {\r\n    serializedName: \"group\",\r\n    type: {\r\n      name: \"String\"\r\n    }\r\n  }\r\n};\r\nexport const hub: msRest.OperationURLParameter = {\r\n  parameterPath: \"hub\",\r\n  mapper: {\r\n    required: true,\r\n    serializedName: \"hub\",\r\n    type: {\r\n      name: \"String\"\r\n    }\r\n  }\r\n};\r\nexport const id: msRest.OperationURLParameter = {\r\n  parameterPath: \"id\",\r\n  mapper: {\r\n    required: true,\r\n    serializedName: \"id\",\r\n    type: {\r\n      name: \"String\"\r\n    }\r\n  }\r\n};\r\nexport const permission: msRest.OperationURLParameter = {\r\n  parameterPath: \"permission\",\r\n  mapper: {\r\n    required: true,\r\n    serializedName: \"permission\",\r\n    type: {\r\n      name: \"String\"\r\n    }\r\n  }\r\n};\r\nexport const reason: msRest.OperationQueryParameter = {\r\n  parameterPath: [\r\n    \"options\",\r\n    \"reason\"\r\n  ],\r\n  mapper: {\r\n    serializedName: \"reason\",\r\n    type: {\r\n      name: \"String\"\r\n    }\r\n  }\r\n};\r\nexport const user: msRest.OperationURLParameter = {\r\n  parameterPath: \"user\",\r\n  mapper: {\r\n    required: true,\r\n    serializedName: \"user\",\r\n    type: {\r\n      name: \"String\"\r\n    }\r\n  }\r\n};\r\n","/*\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is\n * regenerated.\n */\n\nimport * as msRest from \"@azure/ms-rest-js\";\nimport * as Models from \"../models\";\nimport * as Mappers from \"../models/healthApiMappers\";\nimport * as Parameters from \"../models/parameters\";\nimport { WebPubSubServiceClientContext } from \"../webPubSubServiceClientContext\";\n\n/** Class representing a HealthApi. */\nexport class HealthApi {\n  private readonly client: WebPubSubServiceClientContext;\n\n  /**\n   * Create a HealthApi.\n   * @param {WebPubSubServiceClientContext} client Reference to the service client.\n   */\n  constructor(client: WebPubSubServiceClientContext) {\n    this.client = client;\n  }\n\n  /**\n   * @summary Get service health status.\n   * @param [options] The optional parameters\n   * @returns Promise<msRest.RestResponse>\n   */\n  getHealthStatus(options?: Models.HealthApiGetHealthStatusOptionalParams): Promise<msRest.RestResponse>;\n  /**\n   * @param callback The callback\n   */\n  getHealthStatus(callback: msRest.ServiceCallback<void>): void;\n  /**\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  getHealthStatus(options: Models.HealthApiGetHealthStatusOptionalParams, callback: msRest.ServiceCallback<void>): void;\n  getHealthStatus(options?: Models.HealthApiGetHealthStatusOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {\n    return this.client.sendOperationRequest(\n      {\n        options\n      },\n      getHealthStatusOperationSpec,\n      callback);\n  }\n}\n\n// Operation Specifications\nconst serializer = new msRest.Serializer(Mappers);\nconst getHealthStatusOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"HEAD\",\n  path: \"api/health\",\n  queryParameters: [\n    Parameters.apiVersion\n  ],\n  headerParameters: [\n    Parameters.acceptLanguage\n  ],\n  responses: {\n    200: {},\n    default: {\n      bodyMapper: Mappers.CloudError\n    }\n  },\n  serializer\n};\n","/*\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nexport {\n  CloudError\n} from \"../models/mappers\";\n","/*\r\n * Code generated by Microsoft (R) AutoRest Code Generator.\r\n * Changes may cause incorrect behavior and will be lost if the code is\r\n * regenerated.\r\n */\r\n\r\nimport * as msRest from \"@azure/ms-rest-js\";\r\nimport * as Models from \"../models\";\r\nimport * as Mappers from \"../models/webPubSubApiMappers\";\r\nimport * as Parameters from \"../models/parameters\";\r\nimport { WebPubSubServiceClientContext } from \"../webPubSubServiceClientContext\";\r\n\r\n/** Class representing a WebPubSubApi. */\r\nexport class WebPubSubApi {\r\n  private readonly client: WebPubSubServiceClientContext;\r\n\r\n  /**\r\n   * Create a WebPubSubApi.\r\n   * @param {WebPubSubServiceClientContext} client Reference to the service client.\r\n   */\r\n  constructor(client: WebPubSubServiceClientContext) {\r\n    this.client = client;\r\n  }\r\n\r\n  /**\r\n   * @summary Broadcast content inside request body to all the connected client connections\r\n   * @param hub Target hub name, which should start with alphabetic characters and only contain\r\n   * alpha-numeric characters or underscore.\r\n   * @param payloadMessage\r\n   * @param [options] The optional parameters\r\n   * @returns Promise<msRest.RestResponse>\r\n   */\r\n  sendToAll(hub: string, payloadMessage: string, options?: Models.WebPubSubApiSendToAllOptionalParams): Promise<msRest.RestResponse>;\r\n  /**\r\n   * @param hub Target hub name, which should start with alphabetic characters and only contain\r\n   * alpha-numeric characters or underscore.\r\n   * @param payloadMessage\r\n   * @param callback The callback\r\n   */\r\n  sendToAll(hub: string, payloadMessage: string, callback: msRest.ServiceCallback<void>): void;\r\n  /**\r\n   * @param hub Target hub name, which should start with alphabetic characters and only contain\r\n   * alpha-numeric characters or underscore.\r\n   * @param payloadMessage\r\n   * @param options The optional parameters\r\n   * @param callback The callback\r\n   */\r\n  sendToAll(hub: string, payloadMessage: string, options: Models.WebPubSubApiSendToAllOptionalParams, callback: msRest.ServiceCallback<void>): void;\r\n  sendToAll(hub: string, payloadMessage: string, options?: Models.WebPubSubApiSendToAllOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {\r\n    return this.client.sendOperationRequest(\r\n      {\r\n        hub,\r\n        payloadMessage,\r\n        options\r\n      },\r\n      sendToAllOperationSpec,\r\n      callback);\r\n  }\r\n\r\n  /**\r\n   * @summary Check if the connection with the given connectionId exists\r\n   * @param hub Target hub name, which should start with alphabetic characters and only contain\r\n   * alpha-numeric characters or underscore.\r\n   * @param connectionId The connection Id.\r\n   * @param [options] The optional parameters\r\n   * @returns Promise<Models.WebPubSubApiCheckConnectionExistenceResponse>\r\n   */\r\n  checkConnectionExistence(hub: string, connectionId: string, options?: Models.WebPubSubApiCheckConnectionExistenceOptionalParams): Promise<Models.WebPubSubApiCheckConnectionExistenceResponse>;\r\n  /**\r\n   * @param hub Target hub name, which should start with alphabetic characters and only contain\r\n   * alpha-numeric characters or underscore.\r\n   * @param connectionId The connection Id.\r\n   * @param callback The callback\r\n   */\r\n  checkConnectionExistence(hub: string, connectionId: string, callback: msRest.ServiceCallback<boolean>): void;\r\n  /**\r\n   * @param hub Target hub name, which should start with alphabetic characters and only contain\r\n   * alpha-numeric characters or underscore.\r\n   * @param connectionId The connection Id.\r\n   * @param options The optional parameters\r\n   * @param callback The callback\r\n   */\r\n  checkConnectionExistence(hub: string, connectionId: string, options: Models.WebPubSubApiCheckConnectionExistenceOptionalParams, callback: msRest.ServiceCallback<boolean>): void;\r\n  checkConnectionExistence(hub: string, connectionId: string, options?: Models.WebPubSubApiCheckConnectionExistenceOptionalParams | msRest.ServiceCallback<boolean>, callback?: msRest.ServiceCallback<boolean>): Promise<Models.WebPubSubApiCheckConnectionExistenceResponse> {\r\n    return this.client.sendOperationRequest(\r\n      {\r\n        hub,\r\n        connectionId,\r\n        options\r\n      },\r\n      checkConnectionExistenceOperationSpec,\r\n      callback) as Promise<Models.WebPubSubApiCheckConnectionExistenceResponse>;\r\n  }\r\n\r\n  /**\r\n   * @summary Close the client connection\r\n   * @param hub Target hub name, which should start with alphabetic characters and only contain\r\n   * alpha-numeric characters or underscore.\r\n   * @param connectionId Target connection Id\r\n   * @param [options] The optional parameters\r\n   * @returns Promise<msRest.RestResponse>\r\n   */\r\n  closeClientConnection(hub: string, connectionId: string, options?: Models.WebPubSubApiCloseClientConnectionOptionalParams): Promise<msRest.RestResponse>;\r\n  /**\r\n   * @param hub Target hub name, which should start with alphabetic characters and only contain\r\n   * alpha-numeric characters or underscore.\r\n   * @param connectionId Target connection Id\r\n   * @param callback The callback\r\n   */\r\n  closeClientConnection(hub: string, connectionId: string, callback: msRest.ServiceCallback<void>): void;\r\n  /**\r\n   * @param hub Target hub name, which should start with alphabetic characters and only contain\r\n   * alpha-numeric characters or underscore.\r\n   * @param connectionId Target connection Id\r\n   * @param options The optional parameters\r\n   * @param callback The callback\r\n   */\r\n  closeClientConnection(hub: string, connectionId: string, options: Models.WebPubSubApiCloseClientConnectionOptionalParams, callback: msRest.ServiceCallback<void>): void;\r\n  closeClientConnection(hub: string, connectionId: string, options?: Models.WebPubSubApiCloseClientConnectionOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {\r\n    return this.client.sendOperationRequest(\r\n      {\r\n        hub,\r\n        connectionId,\r\n        options\r\n      },\r\n      closeClientConnectionOperationSpec,\r\n      callback);\r\n  }\r\n\r\n  /**\r\n   * @summary Send content inside request body to the specific connection.\r\n   * @param hub Target hub name, which should start with alphabetic characters and only contain\r\n   * alpha-numeric characters or underscore.\r\n   * @param connectionId The connection Id.\r\n   * @param payloadMessage\r\n   * @param [options] The optional parameters\r\n   * @returns Promise<msRest.RestResponse>\r\n   */\r\n  sendToConnection(hub: string, connectionId: string, payloadMessage: string, options?: Models.WebPubSubApiSendToConnectionOptionalParams): Promise<msRest.RestResponse>;\r\n  /**\r\n   * @param hub Target hub name, which should start with alphabetic characters and only contain\r\n   * alpha-numeric characters or underscore.\r\n   * @param connectionId The connection Id.\r\n   * @param payloadMessage\r\n   * @param callback The callback\r\n   */\r\n  sendToConnection(hub: string, connectionId: string, payloadMessage: string, callback: msRest.ServiceCallback<void>): void;\r\n  /**\r\n   * @param hub Target hub name, which should start with alphabetic characters and only contain\r\n   * alpha-numeric characters or underscore.\r\n   * @param connectionId The connection Id.\r\n   * @param payloadMessage\r\n   * @param options The optional parameters\r\n   * @param callback The callback\r\n   */\r\n  sendToConnection(hub: string, connectionId: string, payloadMessage: string, options: Models.WebPubSubApiSendToConnectionOptionalParams, callback: msRest.ServiceCallback<void>): void;\r\n  sendToConnection(hub: string, connectionId: string, payloadMessage: string, options?: Models.WebPubSubApiSendToConnectionOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {\r\n    return this.client.sendOperationRequest(\r\n      {\r\n        hub,\r\n        connectionId,\r\n        payloadMessage,\r\n        options\r\n      },\r\n      sendToConnectionOperationSpec,\r\n      callback);\r\n  }\r\n\r\n  /**\r\n   * @summary Check if there are any client connections inside the given group\r\n   * @param hub Target hub name, which should start with alphabetic characters and only contain\r\n   * alpha-numeric characters or underscore.\r\n   * @param group Target group name, which length should be greater than 0 and less than 1025.\r\n   * @param [options] The optional parameters\r\n   * @returns Promise<Models.WebPubSubApiCheckGroupExistenceResponse>\r\n   */\r\n  checkGroupExistence(hub: string, group: string, options?: Models.WebPubSubApiCheckGroupExistenceOptionalParams): Promise<Models.WebPubSubApiCheckGroupExistenceResponse>;\r\n  /**\r\n   * @param hub Target hub name, which should start with alphabetic characters and only contain\r\n   * alpha-numeric characters or underscore.\r\n   * @param group Target group name, which length should be greater than 0 and less than 1025.\r\n   * @param callback The callback\r\n   */\r\n  checkGroupExistence(hub: string, group: string, callback: msRest.ServiceCallback<boolean>): void;\r\n  /**\r\n   * @param hub Target hub name, which should start with alphabetic characters and only contain\r\n   * alpha-numeric characters or underscore.\r\n   * @param group Target group name, which length should be greater than 0 and less than 1025.\r\n   * @param options The optional parameters\r\n   * @param callback The callback\r\n   */\r\n  checkGroupExistence(hub: string, group: string, options: Models.WebPubSubApiCheckGroupExistenceOptionalParams, callback: msRest.ServiceCallback<boolean>): void;\r\n  checkGroupExistence(hub: string, group: string, options?: Models.WebPubSubApiCheckGroupExistenceOptionalParams | msRest.ServiceCallback<boolean>, callback?: msRest.ServiceCallback<boolean>): Promise<Models.WebPubSubApiCheckGroupExistenceResponse> {\r\n    return this.client.sendOperationRequest(\r\n      {\r\n        hub,\r\n        group,\r\n        options\r\n      },\r\n      checkGroupExistenceOperationSpec,\r\n      callback) as Promise<Models.WebPubSubApiCheckGroupExistenceResponse>;\r\n  }\r\n\r\n  /**\r\n   * @summary Send content inside request body to a group of connections.\r\n   * @param hub Target hub name, which should start with alphabetic characters and only contain\r\n   * alpha-numeric characters or underscore.\r\n   * @param group Target group name, which length should be greater than 0 and less than 1025.\r\n   * @param payloadMessage\r\n   * @param [options] The optional parameters\r\n   * @returns Promise<msRest.RestResponse>\r\n   */\r\n  sendToGroup(hub: string, group: string, payloadMessage: string, options?: Models.WebPubSubApiSendToGroupOptionalParams): Promise<msRest.RestResponse>;\r\n  /**\r\n   * @param hub Target hub name, which should start with alphabetic characters and only contain\r\n   * alpha-numeric characters or underscore.\r\n   * @param group Target group name, which length should be greater than 0 and less than 1025.\r\n   * @param payloadMessage\r\n   * @param callback The callback\r\n   */\r\n  sendToGroup(hub: string, group: string, payloadMessage: string, callback: msRest.ServiceCallback<void>): void;\r\n  /**\r\n   * @param hub Target hub name, which should start with alphabetic characters and only contain\r\n   * alpha-numeric characters or underscore.\r\n   * @param group Target group name, which length should be greater than 0 and less than 1025.\r\n   * @param payloadMessage\r\n   * @param options The optional parameters\r\n   * @param callback The callback\r\n   */\r\n  sendToGroup(hub: string, group: string, payloadMessage: string, options: Models.WebPubSubApiSendToGroupOptionalParams, callback: msRest.ServiceCallback<void>): void;\r\n  sendToGroup(hub: string, group: string, payloadMessage: string, options?: Models.WebPubSubApiSendToGroupOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {\r\n    return this.client.sendOperationRequest(\r\n      {\r\n        hub,\r\n        group,\r\n        payloadMessage,\r\n        options\r\n      },\r\n      sendToGroupOperationSpec,\r\n      callback);\r\n  }\r\n\r\n  /**\r\n   * @summary Add a connection to the target group.\r\n   * @param hub Target hub name, which should start with alphabetic characters and only contain\r\n   * alpha-numeric characters or underscore.\r\n   * @param group Target group name, which length should be greater than 0 and less than 1025.\r\n   * @param connectionId Target connection Id\r\n   * @param [options] The optional parameters\r\n   * @returns Promise<msRest.RestResponse>\r\n   */\r\n  addConnectionToGroup(hub: string, group: string, connectionId: string, options?: Models.WebPubSubApiAddConnectionToGroupOptionalParams): Promise<msRest.RestResponse>;\r\n  /**\r\n   * @param hub Target hub name, which should start with alphabetic characters and only contain\r\n   * alpha-numeric characters or underscore.\r\n   * @param group Target group name, which length should be greater than 0 and less than 1025.\r\n   * @param connectionId Target connection Id\r\n   * @param callback The callback\r\n   */\r\n  addConnectionToGroup(hub: string, group: string, connectionId: string, callback: msRest.ServiceCallback<void>): void;\r\n  /**\r\n   * @param hub Target hub name, which should start with alphabetic characters and only contain\r\n   * alpha-numeric characters or underscore.\r\n   * @param group Target group name, which length should be greater than 0 and less than 1025.\r\n   * @param connectionId Target connection Id\r\n   * @param options The optional parameters\r\n   * @param callback The callback\r\n   */\r\n  addConnectionToGroup(hub: string, group: string, connectionId: string, options: Models.WebPubSubApiAddConnectionToGroupOptionalParams, callback: msRest.ServiceCallback<void>): void;\r\n  addConnectionToGroup(hub: string, group: string, connectionId: string, options?: Models.WebPubSubApiAddConnectionToGroupOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {\r\n    return this.client.sendOperationRequest(\r\n      {\r\n        hub,\r\n        group,\r\n        connectionId,\r\n        options\r\n      },\r\n      addConnectionToGroupOperationSpec,\r\n      callback);\r\n  }\r\n\r\n  /**\r\n   * @summary Remove a connection from the target group.\r\n   * @param hub Target hub name, which should start with alphabetic characters and only contain\r\n   * alpha-numeric characters or underscore.\r\n   * @param group Target group name, which length should be greater than 0 and less than 1025.\r\n   * @param connectionId Target connection Id\r\n   * @param [options] The optional parameters\r\n   * @returns Promise<msRest.RestResponse>\r\n   */\r\n  removeConnectionFromGroup(hub: string, group: string, connectionId: string, options?: Models.WebPubSubApiRemoveConnectionFromGroupOptionalParams): Promise<msRest.RestResponse>;\r\n  /**\r\n   * @param hub Target hub name, which should start with alphabetic characters and only contain\r\n   * alpha-numeric characters or underscore.\r\n   * @param group Target group name, which length should be greater than 0 and less than 1025.\r\n   * @param connectionId Target connection Id\r\n   * @param callback The callback\r\n   */\r\n  removeConnectionFromGroup(hub: string, group: string, connectionId: string, callback: msRest.ServiceCallback<void>): void;\r\n  /**\r\n   * @param hub Target hub name, which should start with alphabetic characters and only contain\r\n   * alpha-numeric characters or underscore.\r\n   * @param group Target group name, which length should be greater than 0 and less than 1025.\r\n   * @param connectionId Target connection Id\r\n   * @param options The optional parameters\r\n   * @param callback The callback\r\n   */\r\n  removeConnectionFromGroup(hub: string, group: string, connectionId: string, options: Models.WebPubSubApiRemoveConnectionFromGroupOptionalParams, callback: msRest.ServiceCallback<void>): void;\r\n  removeConnectionFromGroup(hub: string, group: string, connectionId: string, options?: Models.WebPubSubApiRemoveConnectionFromGroupOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {\r\n    return this.client.sendOperationRequest(\r\n      {\r\n        hub,\r\n        group,\r\n        connectionId,\r\n        options\r\n      },\r\n      removeConnectionFromGroupOperationSpec,\r\n      callback);\r\n  }\r\n\r\n  /**\r\n   * @summary Check if there are any client connections connected for the given user\r\n   * @param hub Target hub name, which should start with alphabetic characters and only contain\r\n   * alpha-numeric characters or underscore.\r\n   * @param user Target user Id\r\n   * @param [options] The optional parameters\r\n   * @returns Promise<Models.WebPubSubApiCheckUserExistenceResponse>\r\n   */\r\n  checkUserExistence(hub: string, user: string, options?: Models.WebPubSubApiCheckUserExistenceOptionalParams): Promise<Models.WebPubSubApiCheckUserExistenceResponse>;\r\n  /**\r\n   * @param hub Target hub name, which should start with alphabetic characters and only contain\r\n   * alpha-numeric characters or underscore.\r\n   * @param user Target user Id\r\n   * @param callback The callback\r\n   */\r\n  checkUserExistence(hub: string, user: string, callback: msRest.ServiceCallback<boolean>): void;\r\n  /**\r\n   * @param hub Target hub name, which should start with alphabetic characters and only contain\r\n   * alpha-numeric characters or underscore.\r\n   * @param user Target user Id\r\n   * @param options The optional parameters\r\n   * @param callback The callback\r\n   */\r\n  checkUserExistence(hub: string, user: string, options: Models.WebPubSubApiCheckUserExistenceOptionalParams, callback: msRest.ServiceCallback<boolean>): void;\r\n  checkUserExistence(hub: string, user: string, options?: Models.WebPubSubApiCheckUserExistenceOptionalParams | msRest.ServiceCallback<boolean>, callback?: msRest.ServiceCallback<boolean>): Promise<Models.WebPubSubApiCheckUserExistenceResponse> {\r\n    return this.client.sendOperationRequest(\r\n      {\r\n        hub,\r\n        user,\r\n        options\r\n      },\r\n      checkUserExistenceOperationSpec,\r\n      callback) as Promise<Models.WebPubSubApiCheckUserExistenceResponse>;\r\n  }\r\n\r\n  /**\r\n   * @summary Send content inside request body to the specific user.\r\n   * @param hub Target hub name, which should start with alphabetic characters and only contain\r\n   * alpha-numeric characters or underscore.\r\n   * @param id The user Id.\r\n   * @param payloadMessage\r\n   * @param [options] The optional parameters\r\n   * @returns Promise<msRest.RestResponse>\r\n   */\r\n  sendToUser(hub: string, id: string, payloadMessage: string, options?: Models.WebPubSubApiSendToUserOptionalParams): Promise<msRest.RestResponse>;\r\n  /**\r\n   * @param hub Target hub name, which should start with alphabetic characters and only contain\r\n   * alpha-numeric characters or underscore.\r\n   * @param id The user Id.\r\n   * @param payloadMessage\r\n   * @param callback The callback\r\n   */\r\n  sendToUser(hub: string, id: string, payloadMessage: string, callback: msRest.ServiceCallback<void>): void;\r\n  /**\r\n   * @param hub Target hub name, which should start with alphabetic characters and only contain\r\n   * alpha-numeric characters or underscore.\r\n   * @param id The user Id.\r\n   * @param payloadMessage\r\n   * @param options The optional parameters\r\n   * @param callback The callback\r\n   */\r\n  sendToUser(hub: string, id: string, payloadMessage: string, options: Models.WebPubSubApiSendToUserOptionalParams, callback: msRest.ServiceCallback<void>): void;\r\n  sendToUser(hub: string, id: string, payloadMessage: string, options?: Models.WebPubSubApiSendToUserOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {\r\n    return this.client.sendOperationRequest(\r\n      {\r\n        hub,\r\n        id,\r\n        payloadMessage,\r\n        options\r\n      },\r\n      sendToUserOperationSpec,\r\n      callback);\r\n  }\r\n\r\n  /**\r\n   * @summary Check whether a user exists in the target group.\r\n   * @param hub Target hub name, which should start with alphabetic characters and only contain\r\n   * alpha-numeric characters or underscore.\r\n   * @param group Target group name, which length should be greater than 0 and less than 1025.\r\n   * @param user Target user Id\r\n   * @param [options] The optional parameters\r\n   * @returns Promise<Models.WebPubSubApiCheckUserExistenceInGroupResponse>\r\n   */\r\n  checkUserExistenceInGroup(hub: string, group: string, user: string, options?: Models.WebPubSubApiCheckUserExistenceInGroupOptionalParams): Promise<Models.WebPubSubApiCheckUserExistenceInGroupResponse>;\r\n  /**\r\n   * @param hub Target hub name, which should start with alphabetic characters and only contain\r\n   * alpha-numeric characters or underscore.\r\n   * @param group Target group name, which length should be greater than 0 and less than 1025.\r\n   * @param user Target user Id\r\n   * @param callback The callback\r\n   */\r\n  checkUserExistenceInGroup(hub: string, group: string, user: string, callback: msRest.ServiceCallback<boolean>): void;\r\n  /**\r\n   * @param hub Target hub name, which should start with alphabetic characters and only contain\r\n   * alpha-numeric characters or underscore.\r\n   * @param group Target group name, which length should be greater than 0 and less than 1025.\r\n   * @param user Target user Id\r\n   * @param options The optional parameters\r\n   * @param callback The callback\r\n   */\r\n  checkUserExistenceInGroup(hub: string, group: string, user: string, options: Models.WebPubSubApiCheckUserExistenceInGroupOptionalParams, callback: msRest.ServiceCallback<boolean>): void;\r\n  checkUserExistenceInGroup(hub: string, group: string, user: string, options?: Models.WebPubSubApiCheckUserExistenceInGroupOptionalParams | msRest.ServiceCallback<boolean>, callback?: msRest.ServiceCallback<boolean>): Promise<Models.WebPubSubApiCheckUserExistenceInGroupResponse> {\r\n    return this.client.sendOperationRequest(\r\n      {\r\n        hub,\r\n        group,\r\n        user,\r\n        options\r\n      },\r\n      checkUserExistenceInGroupOperationSpec,\r\n      callback) as Promise<Models.WebPubSubApiCheckUserExistenceInGroupResponse>;\r\n  }\r\n\r\n  /**\r\n   * @summary Add a user to the target group.\r\n   * @param hub Target hub name, which should start with alphabetic characters and only contain\r\n   * alpha-numeric characters or underscore.\r\n   * @param group Target group name, which length should be greater than 0 and less than 1025.\r\n   * @param user Target user Id\r\n   * @param [options] The optional parameters\r\n   * @returns Promise<msRest.RestResponse>\r\n   */\r\n  addUserToGroup(hub: string, group: string, user: string, options?: Models.WebPubSubApiAddUserToGroupOptionalParams): Promise<msRest.RestResponse>;\r\n  /**\r\n   * @param hub Target hub name, which should start with alphabetic characters and only contain\r\n   * alpha-numeric characters or underscore.\r\n   * @param group Target group name, which length should be greater than 0 and less than 1025.\r\n   * @param user Target user Id\r\n   * @param callback The callback\r\n   */\r\n  addUserToGroup(hub: string, group: string, user: string, callback: msRest.ServiceCallback<void>): void;\r\n  /**\r\n   * @param hub Target hub name, which should start with alphabetic characters and only contain\r\n   * alpha-numeric characters or underscore.\r\n   * @param group Target group name, which length should be greater than 0 and less than 1025.\r\n   * @param user Target user Id\r\n   * @param options The optional parameters\r\n   * @param callback The callback\r\n   */\r\n  addUserToGroup(hub: string, group: string, user: string, options: Models.WebPubSubApiAddUserToGroupOptionalParams, callback: msRest.ServiceCallback<void>): void;\r\n  addUserToGroup(hub: string, group: string, user: string, options?: Models.WebPubSubApiAddUserToGroupOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {\r\n    return this.client.sendOperationRequest(\r\n      {\r\n        hub,\r\n        group,\r\n        user,\r\n        options\r\n      },\r\n      addUserToGroupOperationSpec,\r\n      callback);\r\n  }\r\n\r\n  /**\r\n   * @summary Remove a user from the target group.\r\n   * @param hub Target hub name, which should start with alphabetic characters and only contain\r\n   * alpha-numeric characters or underscore.\r\n   * @param group Target group name, which length should be greater than 0 and less than 1025.\r\n   * @param user Target user Id\r\n   * @param [options] The optional parameters\r\n   * @returns Promise<msRest.RestResponse>\r\n   */\r\n  removeUserFromGroup(hub: string, group: string, user: string, options?: Models.WebPubSubApiRemoveUserFromGroupOptionalParams): Promise<msRest.RestResponse>;\r\n  /**\r\n   * @param hub Target hub name, which should start with alphabetic characters and only contain\r\n   * alpha-numeric characters or underscore.\r\n   * @param group Target group name, which length should be greater than 0 and less than 1025.\r\n   * @param user Target user Id\r\n   * @param callback The callback\r\n   */\r\n  removeUserFromGroup(hub: string, group: string, user: string, callback: msRest.ServiceCallback<void>): void;\r\n  /**\r\n   * @param hub Target hub name, which should start with alphabetic characters and only contain\r\n   * alpha-numeric characters or underscore.\r\n   * @param group Target group name, which length should be greater than 0 and less than 1025.\r\n   * @param user Target user Id\r\n   * @param options The optional parameters\r\n   * @param callback The callback\r\n   */\r\n  removeUserFromGroup(hub: string, group: string, user: string, options: Models.WebPubSubApiRemoveUserFromGroupOptionalParams, callback: msRest.ServiceCallback<void>): void;\r\n  removeUserFromGroup(hub: string, group: string, user: string, options?: Models.WebPubSubApiRemoveUserFromGroupOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {\r\n    return this.client.sendOperationRequest(\r\n      {\r\n        hub,\r\n        group,\r\n        user,\r\n        options\r\n      },\r\n      removeUserFromGroupOperationSpec,\r\n      callback);\r\n  }\r\n\r\n  /**\r\n   * @summary Remove a user from all groups.\r\n   * @param hub Target hub name, which should start with alphabetic characters and only contain\r\n   * alpha-numeric characters or underscore.\r\n   * @param user Target user Id\r\n   * @param [options] The optional parameters\r\n   * @returns Promise<msRest.RestResponse>\r\n   */\r\n  removeUserFromAllGroups(hub: string, user: string, options?: Models.WebPubSubApiRemoveUserFromAllGroupsOptionalParams): Promise<msRest.RestResponse>;\r\n  /**\r\n   * @param hub Target hub name, which should start with alphabetic characters and only contain\r\n   * alpha-numeric characters or underscore.\r\n   * @param user Target user Id\r\n   * @param callback The callback\r\n   */\r\n  removeUserFromAllGroups(hub: string, user: string, callback: msRest.ServiceCallback<void>): void;\r\n  /**\r\n   * @param hub Target hub name, which should start with alphabetic characters and only contain\r\n   * alpha-numeric characters or underscore.\r\n   * @param user Target user Id\r\n   * @param options The optional parameters\r\n   * @param callback The callback\r\n   */\r\n  removeUserFromAllGroups(hub: string, user: string, options: Models.WebPubSubApiRemoveUserFromAllGroupsOptionalParams, callback: msRest.ServiceCallback<void>): void;\r\n  removeUserFromAllGroups(hub: string, user: string, options?: Models.WebPubSubApiRemoveUserFromAllGroupsOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {\r\n    return this.client.sendOperationRequest(\r\n      {\r\n        hub,\r\n        user,\r\n        options\r\n      },\r\n      removeUserFromAllGroupsOperationSpec,\r\n      callback);\r\n  }\r\n\r\n  /**\r\n   * @summary Grant permission to join or publish to the target group\r\n   * @param hub Target hub name, which should start with alphabetic characters and only contain\r\n   * alpha-numeric characters or underscore.\r\n   * @param permission The permission. Possible values include: 'publish', 'join'\r\n   * @param connectionId Target connection Id\r\n   * @param [options] The optional parameters\r\n   * @returns Promise<msRest.RestResponse>\r\n   */\r\n  grantGroupPermission(hub: string, permission: Models.Permission, connectionId: string, options?: Models.WebPubSubApiGrantGroupPermissionOptionalParams): Promise<msRest.RestResponse>;\r\n  /**\r\n   * @param hub Target hub name, which should start with alphabetic characters and only contain\r\n   * alpha-numeric characters or underscore.\r\n   * @param permission The permission. Possible values include: 'publish', 'join'\r\n   * @param connectionId Target connection Id\r\n   * @param callback The callback\r\n   */\r\n  grantGroupPermission(hub: string, permission: Models.Permission, connectionId: string, callback: msRest.ServiceCallback<void>): void;\r\n  /**\r\n   * @param hub Target hub name, which should start with alphabetic characters and only contain\r\n   * alpha-numeric characters or underscore.\r\n   * @param permission The permission. Possible values include: 'publish', 'join'\r\n   * @param connectionId Target connection Id\r\n   * @param options The optional parameters\r\n   * @param callback The callback\r\n   */\r\n  grantGroupPermission(hub: string, permission: Models.Permission, connectionId: string, options: Models.WebPubSubApiGrantGroupPermissionOptionalParams, callback: msRest.ServiceCallback<void>): void;\r\n  grantGroupPermission(hub: string, permission: Models.Permission, connectionId: string, options?: Models.WebPubSubApiGrantGroupPermissionOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {\r\n    return this.client.sendOperationRequest(\r\n      {\r\n        hub,\r\n        permission,\r\n        connectionId,\r\n        options\r\n      },\r\n      grantGroupPermissionOperationSpec,\r\n      callback);\r\n  }\r\n\r\n  /**\r\n   * @summary Revoke permission to publish to or join a group\r\n   * @param hub Target hub name, which should start with alphabetic characters and only contain\r\n   * alpha-numeric characters or underscore.\r\n   * @param permission The permission. Possible values include: 'publish', 'join'\r\n   * @param connectionId Target connection Id\r\n   * @param [options] The optional parameters\r\n   * @returns Promise<msRest.RestResponse>\r\n   */\r\n  revokeGroupPermission(hub: string, permission: Models.Permission1, connectionId: string, options?: Models.WebPubSubApiRevokeGroupPermissionOptionalParams): Promise<msRest.RestResponse>;\r\n  /**\r\n   * @param hub Target hub name, which should start with alphabetic characters and only contain\r\n   * alpha-numeric characters or underscore.\r\n   * @param permission The permission. Possible values include: 'publish', 'join'\r\n   * @param connectionId Target connection Id\r\n   * @param callback The callback\r\n   */\r\n  revokeGroupPermission(hub: string, permission: Models.Permission1, connectionId: string, callback: msRest.ServiceCallback<void>): void;\r\n  /**\r\n   * @param hub Target hub name, which should start with alphabetic characters and only contain\r\n   * alpha-numeric characters or underscore.\r\n   * @param permission The permission. Possible values include: 'publish', 'join'\r\n   * @param connectionId Target connection Id\r\n   * @param options The optional parameters\r\n   * @param callback The callback\r\n   */\r\n  revokeGroupPermission(hub: string, permission: Models.Permission1, connectionId: string, options: Models.WebPubSubApiRevokeGroupPermissionOptionalParams, callback: msRest.ServiceCallback<void>): void;\r\n  revokeGroupPermission(hub: string, permission: Models.Permission1, connectionId: string, options?: Models.WebPubSubApiRevokeGroupPermissionOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {\r\n    return this.client.sendOperationRequest(\r\n      {\r\n        hub,\r\n        permission,\r\n        connectionId,\r\n        options\r\n      },\r\n      revokeGroupPermissionOperationSpec,\r\n      callback);\r\n  }\r\n\r\n  /**\r\n   * @summary Check if a connection can join or publish to the target group\r\n   * @param hub Target hub name, which should start with alphabetic characters and only contain\r\n   * alpha-numeric characters or underscore.\r\n   * @param permission The permission. Possible values include: 'publish', 'join'\r\n   * @param connectionId Target connection Id\r\n   * @param [options] The optional parameters\r\n   * @returns Promise<Models.WebPubSubApiCheckGroupPermissionResponse>\r\n   */\r\n  checkGroupPermission(hub: string, permission: Models.Permission2, connectionId: string, options?: Models.WebPubSubApiCheckGroupPermissionOptionalParams): Promise<Models.WebPubSubApiCheckGroupPermissionResponse>;\r\n  /**\r\n   * @param hub Target hub name, which should start with alphabetic characters and only contain\r\n   * alpha-numeric characters or underscore.\r\n   * @param permission The permission. Possible values include: 'publish', 'join'\r\n   * @param connectionId Target connection Id\r\n   * @param callback The callback\r\n   */\r\n  checkGroupPermission(hub: string, permission: Models.Permission2, connectionId: string, callback: msRest.ServiceCallback<boolean>): void;\r\n  /**\r\n   * @param hub Target hub name, which should start with alphabetic characters and only contain\r\n   * alpha-numeric characters or underscore.\r\n   * @param permission The permission. Possible values include: 'publish', 'join'\r\n   * @param connectionId Target connection Id\r\n   * @param options The optional parameters\r\n   * @param callback The callback\r\n   */\r\n  checkGroupPermission(hub: string, permission: Models.Permission2, connectionId: string, options: Models.WebPubSubApiCheckGroupPermissionOptionalParams, callback: msRest.ServiceCallback<boolean>): void;\r\n  checkGroupPermission(hub: string, permission: Models.Permission2, connectionId: string, options?: Models.WebPubSubApiCheckGroupPermissionOptionalParams | msRest.ServiceCallback<boolean>, callback?: msRest.ServiceCallback<boolean>): Promise<Models.WebPubSubApiCheckGroupPermissionResponse> {\r\n    return this.client.sendOperationRequest(\r\n      {\r\n        hub,\r\n        permission,\r\n        connectionId,\r\n        options\r\n      },\r\n      checkGroupPermissionOperationSpec,\r\n      callback) as Promise<Models.WebPubSubApiCheckGroupPermissionResponse>;\r\n  }\r\n}\r\n\r\n// Operation Specifications\r\nconst serializer = new msRest.Serializer(Mappers);\r\nconst sendToAllOperationSpec: msRest.OperationSpec = {\r\n  httpMethod: \"POST\",\r\n  path: \"api/hubs/{hub}/:send\",\r\n  urlParameters: [\r\n    Parameters.hub\r\n  ],\r\n  queryParameters: [\r\n    Parameters.excluded,\r\n    Parameters.apiVersion\r\n  ],\r\n  headerParameters: [\r\n    Parameters.acceptLanguage\r\n  ],\r\n  requestBody: {\r\n    parameterPath: \"payloadMessage\",\r\n    mapper: {\r\n      required: true,\r\n      serializedName: \"payloadMessage\",\r\n      type: {\r\n        name: \"String\"\r\n      }\r\n    }\r\n  },\r\n  contentType: \"application/octet-stream\",\r\n  responses: {\r\n    202: {},\r\n    default: {\r\n      bodyMapper: Mappers.CloudError\r\n    }\r\n  },\r\n  serializer\r\n};\r\n\r\nconst checkConnectionExistenceOperationSpec: msRest.OperationSpec = {\r\n  httpMethod: \"HEAD\",\r\n  path: \"api/hubs/{hub}/connections/{connectionId}\",\r\n  urlParameters: [\r\n    Parameters.hub,\r\n    Parameters.connectionId\r\n  ],\r\n  queryParameters: [\r\n    Parameters.apiVersion\r\n  ],\r\n  headerParameters: [\r\n    Parameters.acceptLanguage\r\n  ],\r\n  responses: {\r\n    200: {},\r\n    404: {},\r\n    default: {\r\n      bodyMapper: Mappers.CloudError\r\n    }\r\n  },\r\n  serializer\r\n};\r\n\r\nconst closeClientConnectionOperationSpec: msRest.OperationSpec = {\r\n  httpMethod: \"DELETE\",\r\n  path: \"api/hubs/{hub}/connections/{connectionId}\",\r\n  urlParameters: [\r\n    Parameters.hub,\r\n    Parameters.connectionId\r\n  ],\r\n  queryParameters: [\r\n    Parameters.reason,\r\n    Parameters.apiVersion\r\n  ],\r\n  headerParameters: [\r\n    Parameters.acceptLanguage\r\n  ],\r\n  responses: {\r\n    200: {},\r\n    default: {\r\n      bodyMapper: Mappers.CloudError\r\n    }\r\n  },\r\n  serializer\r\n};\r\n\r\nconst sendToConnectionOperationSpec: msRest.OperationSpec = {\r\n  httpMethod: \"POST\",\r\n  path: \"api/hubs/{hub}/connections/{connectionId}/:send\",\r\n  urlParameters: [\r\n    Parameters.hub,\r\n    Parameters.connectionId\r\n  ],\r\n  queryParameters: [\r\n    Parameters.apiVersion\r\n  ],\r\n  headerParameters: [\r\n    Parameters.acceptLanguage\r\n  ],\r\n  requestBody: {\r\n    parameterPath: \"payloadMessage\",\r\n    mapper: {\r\n      required: true,\r\n      serializedName: \"payloadMessage\",\r\n      type: {\r\n        name: \"String\"\r\n      }\r\n    }\r\n  },\r\n  contentType: \"application/octet-stream\",\r\n  responses: {\r\n    202: {},\r\n    default: {\r\n      bodyMapper: Mappers.CloudError\r\n    }\r\n  },\r\n  serializer\r\n};\r\n\r\nconst checkGroupExistenceOperationSpec: msRest.OperationSpec = {\r\n  httpMethod: \"HEAD\",\r\n  path: \"api/hubs/{hub}/groups/{group}\",\r\n  urlParameters: [\r\n    Parameters.hub,\r\n    Parameters.group0\r\n  ],\r\n  queryParameters: [\r\n    Parameters.apiVersion\r\n  ],\r\n  headerParameters: [\r\n    Parameters.acceptLanguage\r\n  ],\r\n  responses: {\r\n    200: {},\r\n    404: {},\r\n    default: {\r\n      bodyMapper: Mappers.CloudError\r\n    }\r\n  },\r\n  serializer\r\n};\r\n\r\nconst sendToGroupOperationSpec: msRest.OperationSpec = {\r\n  httpMethod: \"POST\",\r\n  path: \"api/hubs/{hub}/groups/{group}/:send\",\r\n  urlParameters: [\r\n    Parameters.hub,\r\n    Parameters.group0\r\n  ],\r\n  queryParameters: [\r\n    Parameters.excluded,\r\n    Parameters.apiVersion\r\n  ],\r\n  headerParameters: [\r\n    Parameters.acceptLanguage\r\n  ],\r\n  requestBody: {\r\n    parameterPath: \"payloadMessage\",\r\n    mapper: {\r\n      required: true,\r\n      serializedName: \"payloadMessage\",\r\n      type: {\r\n        name: \"String\"\r\n      }\r\n    }\r\n  },\r\n  contentType: \"application/octet-stream\",\r\n  responses: {\r\n    202: {},\r\n    default: {\r\n      bodyMapper: Mappers.CloudError\r\n    }\r\n  },\r\n  serializer\r\n};\r\n\r\nconst addConnectionToGroupOperationSpec: msRest.OperationSpec = {\r\n  httpMethod: \"PUT\",\r\n  path: \"api/hubs/{hub}/groups/{group}/connections/{connectionId}\",\r\n  urlParameters: [\r\n    Parameters.hub,\r\n    Parameters.group0,\r\n    Parameters.connectionId\r\n  ],\r\n  queryParameters: [\r\n    Parameters.apiVersion\r\n  ],\r\n  headerParameters: [\r\n    Parameters.acceptLanguage\r\n  ],\r\n  responses: {\r\n    200: {},\r\n    404: {},\r\n    default: {\r\n      bodyMapper: Mappers.CloudError\r\n    }\r\n  },\r\n  serializer\r\n};\r\n\r\nconst removeConnectionFromGroupOperationSpec: msRest.OperationSpec = {\r\n  httpMethod: \"DELETE\",\r\n  path: \"api/hubs/{hub}/groups/{group}/connections/{connectionId}\",\r\n  urlParameters: [\r\n    Parameters.hub,\r\n    Parameters.group0,\r\n    Parameters.connectionId\r\n  ],\r\n  queryParameters: [\r\n    Parameters.apiVersion\r\n  ],\r\n  headerParameters: [\r\n    Parameters.acceptLanguage\r\n  ],\r\n  responses: {\r\n    200: {},\r\n    404: {},\r\n    default: {\r\n      bodyMapper: Mappers.CloudError\r\n    }\r\n  },\r\n  serializer\r\n};\r\n\r\nconst checkUserExistenceOperationSpec: msRest.OperationSpec = {\r\n  httpMethod: \"HEAD\",\r\n  path: \"api/hubs/{hub}/users/{user}\",\r\n  urlParameters: [\r\n    Parameters.hub,\r\n    Parameters.user\r\n  ],\r\n  queryParameters: [\r\n    Parameters.apiVersion\r\n  ],\r\n  headerParameters: [\r\n    Parameters.acceptLanguage\r\n  ],\r\n  responses: {\r\n    200: {},\r\n    404: {},\r\n    default: {\r\n      bodyMapper: Mappers.CloudError\r\n    }\r\n  },\r\n  serializer\r\n};\r\n\r\nconst sendToUserOperationSpec: msRest.OperationSpec = {\r\n  httpMethod: \"POST\",\r\n  path: \"api/hubs/{hub}/users/{id}/:send\",\r\n  urlParameters: [\r\n    Parameters.hub,\r\n    Parameters.id\r\n  ],\r\n  queryParameters: [\r\n    Parameters.apiVersion\r\n  ],\r\n  headerParameters: [\r\n    Parameters.acceptLanguage\r\n  ],\r\n  requestBody: {\r\n    parameterPath: \"payloadMessage\",\r\n    mapper: {\r\n      required: true,\r\n      serializedName: \"payloadMessage\",\r\n      type: {\r\n        name: \"String\"\r\n      }\r\n    }\r\n  },\r\n  contentType: \"application/octet-stream\",\r\n  responses: {\r\n    202: {},\r\n    default: {\r\n      bodyMapper: Mappers.CloudError\r\n    }\r\n  },\r\n  serializer\r\n};\r\n\r\nconst checkUserExistenceInGroupOperationSpec: msRest.OperationSpec = {\r\n  httpMethod: \"HEAD\",\r\n  path: \"api/hubs/{hub}/users/{user}/groups/{group}\",\r\n  urlParameters: [\r\n    Parameters.hub,\r\n    Parameters.group0,\r\n    Parameters.user\r\n  ],\r\n  queryParameters: [\r\n    Parameters.apiVersion\r\n  ],\r\n  headerParameters: [\r\n    Parameters.acceptLanguage\r\n  ],\r\n  responses: {\r\n    200: {},\r\n    404: {},\r\n    default: {\r\n      bodyMapper: Mappers.CloudError\r\n    }\r\n  },\r\n  serializer\r\n};\r\n\r\nconst addUserToGroupOperationSpec: msRest.OperationSpec = {\r\n  httpMethod: \"PUT\",\r\n  path: \"api/hubs/{hub}/users/{user}/groups/{group}\",\r\n  urlParameters: [\r\n    Parameters.hub,\r\n    Parameters.group0,\r\n    Parameters.user\r\n  ],\r\n  queryParameters: [\r\n    Parameters.apiVersion\r\n  ],\r\n  headerParameters: [\r\n    Parameters.acceptLanguage\r\n  ],\r\n  responses: {\r\n    200: {},\r\n    default: {\r\n      bodyMapper: Mappers.CloudError\r\n    }\r\n  },\r\n  serializer\r\n};\r\n\r\nconst removeUserFromGroupOperationSpec: msRest.OperationSpec = {\r\n  httpMethod: \"DELETE\",\r\n  path: \"api/hubs/{hub}/users/{user}/groups/{group}\",\r\n  urlParameters: [\r\n    Parameters.hub,\r\n    Parameters.group0,\r\n    Parameters.user\r\n  ],\r\n  queryParameters: [\r\n    Parameters.apiVersion\r\n  ],\r\n  headerParameters: [\r\n    Parameters.acceptLanguage\r\n  ],\r\n  responses: {\r\n    200: {},\r\n    default: {\r\n      bodyMapper: Mappers.CloudError\r\n    }\r\n  },\r\n  serializer\r\n};\r\n\r\nconst removeUserFromAllGroupsOperationSpec: msRest.OperationSpec = {\r\n  httpMethod: \"DELETE\",\r\n  path: \"api/hubs/{hub}/users/{user}/groups\",\r\n  urlParameters: [\r\n    Parameters.hub,\r\n    Parameters.user\r\n  ],\r\n  queryParameters: [\r\n    Parameters.apiVersion\r\n  ],\r\n  headerParameters: [\r\n    Parameters.acceptLanguage\r\n  ],\r\n  responses: {\r\n    200: {},\r\n    default: {\r\n      bodyMapper: Mappers.CloudError\r\n    }\r\n  },\r\n  serializer\r\n};\r\n\r\nconst grantGroupPermissionOperationSpec: msRest.OperationSpec = {\r\n  httpMethod: \"PUT\",\r\n  path: \"api/hubs/{hub}/permissions/{permission}/connections/{connectionId}\",\r\n  urlParameters: [\r\n    Parameters.hub,\r\n    Parameters.permission,\r\n    Parameters.connectionId\r\n  ],\r\n  queryParameters: [\r\n    Parameters.group1,\r\n    Parameters.apiVersion\r\n  ],\r\n  headerParameters: [\r\n    Parameters.acceptLanguage\r\n  ],\r\n  responses: {\r\n    200: {},\r\n    default: {\r\n      bodyMapper: Mappers.CloudError\r\n    }\r\n  },\r\n  serializer\r\n};\r\n\r\nconst revokeGroupPermissionOperationSpec: msRest.OperationSpec = {\r\n  httpMethod: \"DELETE\",\r\n  path: \"api/hubs/{hub}/permissions/{permission}/connections/{connectionId}\",\r\n  urlParameters: [\r\n    Parameters.hub,\r\n    Parameters.permission,\r\n    Parameters.connectionId\r\n  ],\r\n  queryParameters: [\r\n    Parameters.group1,\r\n    Parameters.apiVersion\r\n  ],\r\n  headerParameters: [\r\n    Parameters.acceptLanguage\r\n  ],\r\n  responses: {\r\n    200: {},\r\n    default: {\r\n      bodyMapper: Mappers.CloudError\r\n    }\r\n  },\r\n  serializer\r\n};\r\n\r\nconst checkGroupPermissionOperationSpec: msRest.OperationSpec = {\r\n  httpMethod: \"HEAD\",\r\n  path: \"api/hubs/{hub}/permissions/{permission}/connections/{connectionId}\",\r\n  urlParameters: [\r\n    Parameters.hub,\r\n    Parameters.permission,\r\n    Parameters.connectionId\r\n  ],\r\n  queryParameters: [\r\n    Parameters.group1,\r\n    Parameters.apiVersion\r\n  ],\r\n  headerParameters: [\r\n    Parameters.acceptLanguage\r\n  ],\r\n  responses: {\r\n    200: {},\r\n    404: {},\r\n    default: {\r\n      bodyMapper: Mappers.CloudError\r\n    }\r\n  },\r\n  serializer\r\n};\r\n","/*\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is\n * regenerated.\n */\n\nimport * as Models from \"./models\";\nimport * as msRest from \"@azure/ms-rest-js\";\nimport * as msRestAzure from \"@azure/ms-rest-azure-js\";\n\nconst packageName = \"@azure/webpubsub\";\nconst packageVersion = \"1.0.0\";\n\nexport class WebPubSubServiceClientContext extends msRestAzure.AzureServiceClient {\n  credentials: msRest.ServiceClientCredentials;\n\n  /**\n   * Initializes a new instance of the WebPubSubServiceClient class.\n   * @param credentials Credentials needed for the client to connect to Azure.\n   * @param [options] The parameter options\n   */\n  constructor(credentials: msRest.ServiceClientCredentials, options?: Models.WebPubSubServiceClientOptions) {\n    if (credentials == undefined) {\n      throw new Error('\\'credentials\\' cannot be null.');\n    }\n\n    if (!options) {\n      options = {};\n    }\n    if(!options.userAgent) {\n      const defaultUserAgent = msRestAzure.getDefaultUserAgentValue();\n      options.userAgent = `${packageName}/${packageVersion} ${defaultUserAgent}`;\n    }\n\n    super(credentials, options);\n\n    this.acceptLanguage = 'en-US';\n    this.longRunningOperationRetryTimeout = 30;\n    this.baseUri = options.baseUri || this.baseUri || \"http://localhost\";\n    this.requestContentType = \"application/json; charset=utf-8\";\n    this.credentials = credentials;\n\n    if(options.acceptLanguage !== null && options.acceptLanguage !== undefined) {\n      this.acceptLanguage = options.acceptLanguage;\n    }\n    if(options.longRunningOperationRetryTimeout !== null && options.longRunningOperationRetryTimeout !== undefined) {\n      this.longRunningOperationRetryTimeout = options.longRunningOperationRetryTimeout;\n    }\n  }\n}\n","/*\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is\n * regenerated.\n */\n\nimport * as msRest from \"@azure/ms-rest-js\";\nimport * as Models from \"./models\";\nimport * as Mappers from \"./models/mappers\";\nimport * as operations from \"./operations\";\nimport { WebPubSubServiceClientContext } from \"./webPubSubServiceClientContext\";\n\n\nclass WebPubSubServiceClient extends WebPubSubServiceClientContext {\n  // Operation groups\n  healthApi: operations.HealthApi;\n  webPubSubApi: operations.WebPubSubApi;\n\n  /**\n   * Initializes a new instance of the WebPubSubServiceClient class.\n   * @param credentials Credentials needed for the client to connect to Azure.\n   * @param [options] The parameter options\n   */\n  constructor(credentials: msRest.ServiceClientCredentials, options?: Models.WebPubSubServiceClientOptions) {\n    super(credentials, options);\n    this.healthApi = new operations.HealthApi(this);\n    this.webPubSubApi = new operations.WebPubSubApi(this);\n  }\n}\n\n// Operation Specifications\n\nexport {\n  WebPubSubServiceClient,\n  WebPubSubServiceClientContext,\n  Models as WebPubSubServiceModels,\n  Mappers as WebPubSubServiceMappers\n};\nexport * from \"./operations\";\n","/*\r\n AutoRest has issue generating code from :\r\n \"consumes\": [\r\n          \"application/octet-stream\",\r\n          \"text/plain\"\r\n        ],\r\n        \"parameters\": [\r\n          {\r\n            \"in\": \"body\",\r\n            \"name\": \"payloadMessage\",\r\n            \"required\": true,\r\n            \"schema\": {\r\n              \"format\": \"binary\",\r\n              \"type\": \"string\"\r\n            }\r\n          }\r\n\r\n*/\r\nimport * as msRest from \"@azure/ms-rest-js\";\r\nimport * as Models from \"./generated/models\";\r\nimport * as Mappers from \"./generated/models/webPubSubApiMappers\";\r\nimport * as Parameters from \"./generated/models/parameters\";\r\nimport { WebPubSubServiceClientContext } from \"./generated/webPubSubServiceClientContext\";\r\n\r\n\r\n/** Class representing a WebPubSubApi. */\r\nexport class WebPubSubSendApi {\r\n  private readonly client: WebPubSubServiceClientContext;\r\n\r\n  /**\r\n   * Create a WebPubSubApi.\r\n   * @param {WebPubSubServiceClientContext} client Reference to the service client.\r\n   */\r\n  constructor(client: WebPubSubServiceClientContext) {\r\n    this.client = client;\r\n  }\r\n\r\n  /**\r\n   * @summary Broadcast content inside request body to all the connected client connections\r\n   * @param payloadMessage\r\n   * @param [options] The optional parameters\r\n   * @returns Promise<msRest.RestResponse>\r\n   */\r\n  sendToAll(hub: string, payloadMessage: string | msRest.HttpRequestBody, options?: Models.WebPubSubApiSendToAllOptionalParams): Promise<msRest.RestResponse>;\r\n  /**\r\n   * @param payloadMessage\r\n   * @param callback The callback\r\n   */\r\n  sendToAll(hub: string, payloadMessage: string | msRest.HttpRequestBody, callback: msRest.ServiceCallback<void>): void;\r\n  /**\r\n   * @param payloadMessage\r\n   * @param options The optional parameters\r\n   * @param callback The callback\r\n   */\r\n  sendToAll(hub: string, payloadMessage: string | msRest.HttpRequestBody, options: Models.WebPubSubApiSendToAllOptionalParams, callback: msRest.ServiceCallback<void>): void;\r\n  sendToAll(hub: string, payloadMessage: string | msRest.HttpRequestBody, options?: Models.WebPubSubApiSendToAllOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {\r\n    return this.client.sendOperationRequest(\r\n      {\r\n        hub,\r\n        payloadMessage,\r\n        options\r\n      },\r\n      fulfillSpec(payloadMessage, broadcastOperationSpec),\r\n      callback);\r\n  }\r\n\r\n  /**\r\n   * @summary Send content inside request body to the specific user.\r\n   * @param id The user Id.\r\n   * @param payloadMessage\r\n   * @param [options] The optional parameters\r\n   * @returns Promise<msRest.RestResponse>\r\n   */\r\n  sendToUser(hub: string, id: string, payloadMessage: string | msRest.HttpRequestBody, options?: Models.WebPubSubApiSendToUserOptionalParams): Promise<msRest.RestResponse>;\r\n  /**\r\n   * @param id The user Id.\r\n   * @param payloadMessage\r\n   * @param callback The callback\r\n   */\r\n  sendToUser(hub: string, id: string, payloadMessage: string | msRest.HttpRequestBody, callback: msRest.ServiceCallback<void>): void;\r\n  /**\r\n   * @param id The user Id.\r\n   * @param payloadMessage\r\n   * @param options The optional parameters\r\n   * @param callback The callback\r\n   */\r\n  sendToUser(hub: string, id: string, payloadMessage: string | msRest.HttpRequestBody, options: Models.WebPubSubApiSendToUserOptionalParams, callback: msRest.ServiceCallback<void>): void;\r\n  sendToUser(hub: string, id: string, payloadMessage: string | msRest.HttpRequestBody, options?: Models.WebPubSubApiSendToUserOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {\r\n    return this.client.sendOperationRequest(\r\n      {\r\n        hub,\r\n        id,\r\n        payloadMessage,\r\n        options\r\n      },\r\n      fulfillSpec(payloadMessage, sendToUserOperationSpec),\r\n      callback);\r\n  }\r\n\r\n  /**\r\n   * @summary Send content inside request body to the specific connection.\r\n   * @param connectionId The connection Id.\r\n   * @param payloadMessage\r\n   * @param [options] The optional parameters\r\n   * @returns Promise<msRest.RestResponse>\r\n   */\r\n  sendToConnection(hub: string, connectionId: string, payloadMessage: string | msRest.HttpRequestBody, options?: Models.WebPubSubApiSendToConnectionOptionalParams): Promise<msRest.RestResponse>;\r\n  /**\r\n   * @param connectionId The connection Id.\r\n   * @param payloadMessage\r\n   * @param callback The callback\r\n   */\r\n  sendToConnection(hub: string, connectionId: string, payloadMessage: string | msRest.HttpRequestBody, callback: msRest.ServiceCallback<void>): void;\r\n  /**\r\n   * @param connectionId The connection Id.\r\n   * @param payloadMessage\r\n   * @param options The optional parameters\r\n   * @param callback The callback\r\n   */\r\n  sendToConnection(hub: string, connectionId: string, payloadMessage: string | msRest.HttpRequestBody, options: Models.WebPubSubApiSendToConnectionOptionalParams, callback: msRest.ServiceCallback<void>): void;\r\n  sendToConnection(hub: string, connectionId: string, payloadMessage: string | msRest.HttpRequestBody, options?: Models.WebPubSubApiSendToConnectionOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {\r\n    return this.client.sendOperationRequest(\r\n      {\r\n        hub,\r\n        connectionId,\r\n        payloadMessage,\r\n        options\r\n      },\r\n      fulfillSpec(payloadMessage, sendToConnectionOperationSpec),\r\n      callback);\r\n  }\r\n\r\n  /**\r\n   * @summary Send content inside request body to a group of connections.\r\n   * @param group Target group name, which length should be greater than 0 and less than 1025.\r\n   * @param payloadMessage\r\n   * @param [options] The optional parameters\r\n   * @returns Promise<msRest.RestResponse>\r\n   */\r\n  sendToGroup(group: string, payloadMessage: string | msRest.HttpRequestBody, options?: Models.WebPubSubApiSendToGroupOptionalParams): Promise<msRest.RestResponse>;\r\n  /**\r\n   * @param group Target group name, which length should be greater than 0 and less than 1025.\r\n   * @param payloadMessage\r\n   * @param callback The callback\r\n   */\r\n  sendToGroup(group: string, payloadMessage: string | msRest.HttpRequestBody, callback: msRest.ServiceCallback<void>): void;\r\n  /**\r\n   * @param group Target group name, which length should be greater than 0 and less than 1025.\r\n   * @param payloadMessage\r\n   * @param options The optional parameters\r\n   * @param callback The callback\r\n   */\r\n  sendToGroup(group: string, payloadMessage: string | msRest.HttpRequestBody, options: Models.WebPubSubApiSendToGroupOptionalParams, callback: msRest.ServiceCallback<void>): void;\r\n  sendToGroup(group: string, payloadMessage: string | msRest.HttpRequestBody, options?: Models.WebPubSubApiSendToGroupOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {\r\n    return this.client.sendOperationRequest(\r\n      {\r\n        group,\r\n        payloadMessage,\r\n        options\r\n      },\r\n      fulfillSpec(payloadMessage, groupBroadcastOperationSpec),\r\n      callback);\r\n  }\r\n}\r\n\r\n// Operation Specifications\r\nconst serializer = new msRest.Serializer(Mappers);\r\nconst broadcastOperationSpec: msRest.OperationSpec = {\r\n  httpMethod: \"POST\",\r\n  path: \"api/hubs/{hub}/:send\",\r\n  urlParameters: [\r\n    Parameters.hub\r\n  ],\r\n  queryParameters: [\r\n    Parameters.excluded,\r\n    Parameters.apiVersion\r\n  ],\r\n  headerParameters: [\r\n    Parameters.acceptLanguage\r\n  ],\r\n  responses: {\r\n    202: {},\r\n    default: {\r\n      bodyMapper: Mappers.CloudError\r\n    }\r\n  },\r\n  serializer\r\n};\r\n\r\nconst sendToUserOperationSpec: msRest.OperationSpec = {\r\n  httpMethod: \"POST\",\r\n  path: \"api/hubs/{hub}/users/{id}/:send\",\r\n  urlParameters: [\r\n    Parameters.hub,\r\n    Parameters.id\r\n  ],\r\n  queryParameters: [\r\n    Parameters.apiVersion\r\n  ],\r\n  headerParameters: [\r\n    Parameters.acceptLanguage\r\n  ],\r\n  responses: {\r\n    202: {},\r\n    default: {\r\n      bodyMapper: Mappers.CloudError\r\n    }\r\n  },\r\n  serializer\r\n};\r\n\r\nconst sendToConnectionOperationSpec: msRest.OperationSpec = {\r\n  httpMethod: \"POST\",\r\n  path: \"api/hubs/{hub}/connections/{connectionId}/:send\",\r\n  urlParameters: [\r\n    Parameters.hub,\r\n    Parameters.connectionId\r\n  ],\r\n  queryParameters: [\r\n    Parameters.apiVersion\r\n  ],\r\n  headerParameters: [\r\n    Parameters.acceptLanguage\r\n  ],\r\n  responses: {\r\n    202: {},\r\n    default: {\r\n      bodyMapper: Mappers.CloudError\r\n    }\r\n  },\r\n  serializer\r\n};\r\n\r\nconst groupBroadcastOperationSpec: msRest.OperationSpec = {\r\n  httpMethod: \"POST\",\r\n  path: \"api/hubs/{hub}/groups/{group}/:send\",\r\n  urlParameters: [\r\n    Parameters.hub,\r\n    Parameters.group0\r\n  ],\r\n  queryParameters: [\r\n    Parameters.excluded,\r\n    Parameters.apiVersion\r\n  ],\r\n  headerParameters: [\r\n    Parameters.acceptLanguage\r\n  ],\r\n  responses: {\r\n    202: {},\r\n    default: {\r\n      bodyMapper: Mappers.CloudError\r\n    }\r\n  },\r\n  serializer\r\n};\r\n\r\nfunction fulfillSpec(payloadMessage: string | msRest.HttpRequestBody, baseSepc: msRest.OperationSpec): msRest.OperationSpec {\r\n  \r\n  if (typeof payloadMessage === \"string\") {\r\n    return {\r\n      ...baseSepc,\r\n      requestBody: {\r\n        parameterPath: \"payloadMessage\",\r\n        mapper: {\r\n          required: true,\r\n          serializedName: \"payloadMessage\",\r\n          type: {\r\n            name: \"String\"\r\n          }\r\n        }\r\n      },\r\n      contentType: \"text/plain\"\r\n    }\r\n  } else {\r\n    return {\r\n      ...baseSepc,\r\n      requestBody: {\r\n        parameterPath: \"payloadMessage\",\r\n        mapper: {\r\n          required: true,\r\n          serializedName: \"payloadMessage\",\r\n          type: {\r\n            name: \"Stream\"\r\n          }\r\n        }\r\n      },\r\n      contentType: \"application/octet-stream\",\r\n    }\r\n  }\r\n}","// Copyright (c) Microsoft Corporation.\r\n// Licensed under the MIT license.\r\n\r\nimport { HttpHeaders, WebResourceLike, ServiceClientCredentials } from \"@azure/ms-rest-js\";\r\nimport jwt from \"jsonwebtoken\";\r\n\r\nexport class WebPubSubKeyCredentials implements ServiceClientCredentials {\r\n  key: string;\r\n  \r\n  /**\r\n   * Creates a new TokenCredentials object.\r\n   *\r\n   * @constructor\r\n   * @param {string} key The key.\r\n   */\r\n  constructor(key: string) {\r\n    if (!key) {\r\n      throw new Error(\"token cannot be null or undefined.\");\r\n    }\r\n    this.key = key;\r\n  }\r\n\r\n  /**\r\n   * Signs a request with the Authentication header.\r\n   *\r\n   * @param {WebResourceLike} webResource The WebResourceLike to be signed.\r\n   * @return {Promise<WebResourceLike>} The signed request object.\r\n   */\r\n  signRequest(webResource: WebResourceLike) {\r\n    if (!webResource.headers) webResource.headers = new HttpHeaders();\r\n    var url = new URL(webResource.url + webResource.query ?? '');\r\n    url.port = '';\r\n    const audience = url.toString();\r\n    webResource.headers.set(\r\n      \"Authorization\",\r\n      \"Bearer \" +\r\n        jwt.sign({}, this.key, {\r\n          audience: audience,\r\n          expiresIn: \"1h\",\r\n          algorithm: \"HS256\"\r\n        })\r\n    );\r\n    return Promise.resolve(webResource);\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation.\r\n// Licensed under the MIT license.\r\n\r\nimport { WebPubSubServiceClient as GeneratedClient } from \"./generated/webPubSubServiceClient\";\r\nimport { ServiceClientCredentials, RestResponse, RestError, HttpRequestBody, HttpPipelineLogLevel, HttpPipelineLogger, RequestPolicyFactory, logPolicy } from \"@azure/ms-rest-js\";\r\n\r\nimport { WebPubSubSendApi } from \"./webPubSubApiExtensions\";\r\nimport { WebPubSubKeyCredentials } from \"./webPubSubKeyCredentials\";\r\nimport { WebPubSubServiceEndpoint } from \"./webPubSubServiceEndpoint\";\r\n\r\nexport interface OperationOptions {\r\n  apiVersion?: string;\r\n}\r\n\r\n/**\r\n * Options for closing a connection to a hub.\r\n */\r\nexport interface CloseConnectionOptions extends OperationOptions {\r\n  /**\r\n   * Reason the connection is being closed.\r\n   */\r\n  reason?: string;\r\n}\r\n\r\n/**\r\n * Options for sending messages to hubs, groups, users, or connections.\r\n */\r\nexport interface HubBroadcastOptions extends OperationOptions {\r\n  /**\r\n   * Connection ids to exclude from receiving this message.\r\n   */\r\n  excludedConnections?: string[];\r\n}\r\n\r\nexport interface WebPubSubServiceRestClientOptions {\r\n  dumpRequest?: boolean;\r\n}\r\n\r\nexport class ConsoleHttpPipelineLogger implements HttpPipelineLogger {\r\n  /**\r\n   * Create a new ConsoleHttpPipelineLogger.\r\n   * @param minimumLogLevel The log level threshold for what logs will be logged.\r\n   */\r\n  constructor(public minimumLogLevel: HttpPipelineLogLevel) {\r\n  }\r\n\r\n  /**\r\n   * Log the provided message.\r\n   * @param logLevel The HttpLogDetailLevel associated with this message.\r\n   * @param message The message to log.\r\n   */\r\n  log(logLevel: HttpPipelineLogLevel, message: string): void {\r\n    const logMessage = `${HttpPipelineLogLevel[logLevel]}: ${message}`;\r\n    switch (logLevel) {\r\n      case HttpPipelineLogLevel.ERROR:\r\n        console.error(logMessage);\r\n        break;\r\n\r\n      case HttpPipelineLogLevel.WARNING:\r\n        console.warn(logMessage);\r\n        break;\r\n\r\n      case HttpPipelineLogLevel.INFO:\r\n        console.log(logMessage);\r\n        break;\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Client for connecting to a SignalR hub\r\n */\r\nexport class WebPubSubServiceRestClient {\r\n  private readonly client: GeneratedClient;\r\n  private readonly sender: WebPubSubSendApi;\r\n  private credential!: ServiceClientCredentials;\r\n\r\n  /**\r\n   * The name of the hub this client is connected to\r\n   */\r\n  public readonly hub: string;\r\n\r\n  /**\r\n   * The SignalR API version being used by this client\r\n   */\r\n  public readonly apiVersion: string = \"2020-10-01\";\r\n\r\n  /**\r\n   * The endpoint this client is connected to\r\n   */\r\n  public serviceUrl!: URL;\r\n\r\n  private _endpoint: WebPubSubServiceEndpoint;\r\n\r\n  constructor(connectionStringOrEndpoint: string | WebPubSubServiceEndpoint, hub: string, options?: WebPubSubServiceRestClientOptions) {\r\n    if (typeof connectionStringOrEndpoint === 'string'){\r\n      this._endpoint = new WebPubSubServiceEndpoint(connectionStringOrEndpoint);\r\n    } else {\r\n      this._endpoint = connectionStringOrEndpoint;\r\n    }\r\n\r\n    this.hub = hub;\r\n\r\n    this.serviceUrl = this._endpoint.endpoint.serviceUrl;\r\n    this.credential = new WebPubSubKeyCredentials(this._endpoint.endpoint.key);\r\n    this.client = new GeneratedClient(this.credential, {\r\n      //httpPipelineLogger: options?.dumpRequest ? new ConsoleHttpPipelineLogger(HttpPipelineLogLevel.INFO) : undefined,\r\n      baseUri: this._endpoint.endpoint.serviceUrl.href,\r\n      requestPolicyFactories: options?.dumpRequest ? this.getFactoryWithLogPolicy : undefined,\r\n    });\r\n    this.sender = new WebPubSubSendApi(this.client);\r\n  }\r\n  \r\n  private getFactoryWithLogPolicy(defaultRequestPolicyFactories: RequestPolicyFactory[]): void {\r\n    logPolicy\r\n    defaultRequestPolicyFactories.push(logPolicy());\r\n  }\r\n\r\n  /**\r\n   * Check if the service is healthy\r\n   *\r\n   * @param options Additional options\r\n   */\r\n  public async serviceIsHealthy(options: OperationOptions = {}): Promise<boolean> {\r\n    try {\r\n      await this.client.healthApi.getHealthStatus({\r\n        apiVersion: options.apiVersion\r\n      });\r\n      return true;\r\n    } catch {\r\n      return false;\r\n    } finally {\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Broadcast a text message to all connections on this hub.\r\n   *\r\n   * @param message The message to send\r\n   * @param options Additional options\r\n   */\r\n  public async sendToAll(message: string, options?: HubBroadcastOptions): Promise<boolean>;\r\n  /**\r\n   * Broadcast a binary message to all connections on this hub.\r\n   *\r\n   * @param message The message to send\r\n   * @param options Additional options\r\n   */\r\n  public async sendToAll(\r\n    message: Blob | ArrayBuffer | ArrayBufferView,\r\n    options?: HubBroadcastOptions\r\n  ): Promise<boolean>;\r\n\r\n  public async sendToAll(\r\n    message: string | HttpRequestBody,\r\n    options: HubBroadcastOptions = {}\r\n  ): Promise<boolean> {\r\n    try {\r\n      var res = await this.sender.sendToAll(this.hub, message, {\r\n        apiVersion: options.apiVersion,\r\n        hub: this.hub,\r\n        excluded: options.excludedConnections\r\n      });\r\n      return this.verifyResponse(res, 202);\r\n    } finally {\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Send a text message to a specific user\r\n   *\r\n   * @param username User name to send to\r\n   * @param message The message to send\r\n   * @param options Additional options\r\n   */\r\n  public sendToUser(\r\n    username: string,\r\n    message: string,\r\n    options?: OperationOptions\r\n  ): Promise<boolean>;\r\n\r\n  /**\r\n   * Send a binary message to a specific user\r\n   *\r\n   * @param username The user name to send to\r\n   * @param message The binary message to send\r\n   * @param options Additional options\r\n   */\r\n  public sendToUser(\r\n    username: string,\r\n    message: HttpRequestBody,\r\n    options?: OperationOptions\r\n  ): Promise<boolean>;\r\n  public async sendToUser(\r\n    username: string,\r\n    message: string | HttpRequestBody,\r\n    options: OperationOptions = {}\r\n  ): Promise<boolean> {\r\n    try {\r\n      var res = await this.sender.sendToUser(this.hub, username, message, {\r\n        apiVersion: options.apiVersion,\r\n        hub: this.hub\r\n      });\r\n      return this.verifyResponse(res, 202);\r\n    } finally {\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Send a text message to a specific connection\r\n   *\r\n   * @param connectionId Connection id to send to\r\n   * @param message The text message\r\n   * @param options Additional options\r\n   */\r\n  public sendToConnection(\r\n    connectionId: string,\r\n    message: string,\r\n    options?: OperationOptions\r\n  ): Promise<boolean>;\r\n  /**\r\n   * Send a binary message to a specific connection\r\n   *\r\n   * @param connectionId Connection id to send to\r\n   * @param message The binary message\r\n   * @param options Additional options\r\n   */\r\n  public sendToConnection(\r\n    connectionId: string,\r\n    message: HttpRequestBody,\r\n    options?: OperationOptions\r\n  ): Promise<boolean>;\r\n  public async sendToConnection(\r\n    connectionId: string,\r\n    message: string | HttpRequestBody,\r\n    options: OperationOptions = {}\r\n  ): Promise<boolean> {\r\n    try {\r\n      var res = await this.sender.sendToConnection(this.hub, connectionId, message, {\r\n        apiVersion: options.apiVersion,\r\n        hub: this.hub\r\n      });\r\n      return this.verifyResponse(res, 202);\r\n    } finally {\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Check if a specific connection is connected to this hub\r\n   *\r\n   * @param connectionId Connection id to check\r\n   * @param options Additional options\r\n   */\r\n  public async hasConnection(\r\n    connectionId: string,\r\n    options: OperationOptions = {}\r\n  ): Promise<boolean> {\r\n    try {\r\n      const res = await this.client.webPubSubApi.checkConnectionExistence(this.hub,\r\n        connectionId,\r\n        {\r\n          apiVersion: options.apiVersion,\r\n        }\r\n      );\r\n      return this.verifyResponse(res, 200, 404);\r\n    } finally {\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Close a specific connection to this hub\r\n   *\r\n   * @param connectionId Connection id to close\r\n   * @param options Additional options\r\n   */\r\n  public async closeConnection(\r\n    connectionId: string,\r\n    options: CloseConnectionOptions = {}\r\n  ): Promise<boolean> {\r\n    try {\r\n      var res = await this.client.webPubSubApi.closeClientConnection(this.hub,\r\n        connectionId,\r\n        {\r\n          apiVersion: options.apiVersion,\r\n          hub: this.hub,\r\n          reason: options.reason\r\n        }\r\n      );\r\n      return this.verifyResponse(res, 200);\r\n    } finally {\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Remove a specific user from all groups they are joined to\r\n   * @param userId The user id to remove from all groups\r\n   * @param options Additional options\r\n   */\r\n  public async removeUserFromAllGroups(\r\n    userId: string,\r\n    options: CloseConnectionOptions = {}\r\n  ): Promise<boolean> {\r\n    try {\r\n      var res = await this.client.webPubSubApi.removeUserFromAllGroups(this.hub,\r\n        userId,\r\n        {\r\n          apiVersion: options.apiVersion,\r\n          hub: this.hub,\r\n        }\r\n      );\r\n\r\n      return this.verifyResponse(res, 202);\r\n\r\n    } finally {\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Check if a particular group exists (i.e. has active connections).\r\n   *\r\n   * @param groupName The group name to check for\r\n   * @param options Additional options\r\n   */\r\n  public async hasGroup(groupName: string, options: OperationOptions = {}): Promise<boolean> {\r\n    try {\r\n      const res = await this.client.webPubSubApi.checkGroupExistence(this.hub,\r\n        groupName,\r\n        {\r\n          apiVersion: options.apiVersion,\r\n          hub: this.hub,\r\n        }\r\n      );\r\n      return this.verifyResponse(res, 200, 404);\r\n\r\n    } finally {\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Check if a particular user is connected to this hub.\r\n   *\r\n   * @param username The user name to check for\r\n   * @param options Additional options\r\n   */\r\n  public async hasUser(username: string, options: OperationOptions = {}): Promise<boolean> {\r\n    try {\r\n      const res = await this.client.webPubSubApi.checkUserExistence(this.hub,\r\n        username,\r\n        {\r\n          apiVersion: options.apiVersion,\r\n          hub: this.hub,\r\n        }\r\n      );\r\n      return this.verifyResponse(res, 200, 404);\r\n    } finally {\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Add a specific connection to this group\r\n   *\r\n   * @param connectionId The connection id to add to this group\r\n   * @param options Additional options\r\n   */\r\n  public async addConnectionToGroup(groupName: string,\r\n    connectionId: string,\r\n    options: OperationOptions = {}\r\n  ): Promise<boolean> {\r\n    try {\r\n      const res = await this.client.webPubSubApi.addConnectionToGroup(this.hub,\r\n        groupName, connectionId,\r\n        {\r\n          apiVersion: options.apiVersion,\r\n          hub: this.hub\r\n        }\r\n      );\r\n      return this.verifyResponse(res, 202);\r\n    } finally {\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Remove a specific connection from this group\r\n   *\r\n   * @param connectionId The connection id to remove from this group\r\n   * @param options Additional options\r\n   */\r\n  public async removeConnectionFromGroup(groupName: string,\r\n    connectionId: string,\r\n    options: OperationOptions = {}\r\n  ): Promise<boolean> {\r\n    try {\r\n      const res = await this.client.webPubSubApi.removeConnectionFromGroup(this.hub,\r\n        groupName, connectionId,\r\n        {\r\n          apiVersion: options.apiVersion,\r\n          hub: this.hub\r\n        }\r\n      );\r\n      return this.verifyResponse(res, 202);\r\n\r\n    } finally {\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Add a user to this group\r\n   *\r\n   * @param username The user name to add\r\n   * @param options Additional options\r\n   */\r\n  public async addUserToGroup(groupName: string, username: string, options: OperationOptions = {}): Promise<boolean> {\r\n    try {\r\n      var res = await this.client.webPubSubApi.addUserToGroup(this.hub,\r\n        groupName,\r\n        username,\r\n        {\r\n          apiVersion: options.apiVersion,\r\n          hub: this.hub\r\n        }\r\n      );\r\n\r\n      return this.verifyResponse(res, 202);\r\n    } finally {\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Check if a user is in this group\r\n   *\r\n   * @param groupName The group name to check for\r\n   * @param username The user name to check for\r\n   * @param options Additional options\r\n   */\r\n  public async hasUserInGroup(groupName: string, username: string, options: OperationOptions = {}): Promise<boolean> {\r\n\r\n    try {\r\n      const res = await this.client.webPubSubApi.checkUserExistenceInGroup(this.hub,\r\n        groupName,\r\n        username,\r\n\r\n        {\r\n          apiVersion: options.apiVersion,\r\n          hub: this.hub\r\n        }\r\n      );\r\n      return this.verifyResponse(res, 200, 404);\r\n\r\n    } finally {\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Remove a user from this group\r\n   *\r\n   * @param groupName The group name to check for\r\n   * @param username The user name to remove\r\n   * @param options Additional options\r\n   */\r\n  public async removeUserFromGroup(groupName: string, username: string, options: OperationOptions = {}): Promise<boolean> {\r\n\r\n    try {\r\n      var res = await this.client.webPubSubApi.removeUserFromGroup(this.hub,\r\n        groupName,\r\n        username,\r\n        {\r\n          apiVersion: options.apiVersion,\r\n          hub: this.hub\r\n        }\r\n      );\r\n\r\n      // FOR now it is still 202, we are changing the service to support 200 soon\r\n      return this.verifyResponse(res, 200, 404);\r\n    } finally {\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Send a text message to every connection in this group\r\n   *\r\n   * @param groupName The group name to check for\r\n   * @param message The message to send\r\n   * @param options Additional options\r\n   */\r\n  public async publish(groupName: string, message: string, options?: HubBroadcastOptions): Promise<boolean>;\r\n\r\n  /**\r\n   * Send a binary message to every connection in this group\r\n   *\r\n   * @param groupName The group name to check for\r\n   * @param message The binary message to send\r\n   * @param options Additional options\r\n   */\r\n  public async publish(groupName: string,\r\n    message: HttpRequestBody,\r\n    options?: HubBroadcastOptions\r\n  ): Promise<boolean>;\r\n  public async publish(groupName: string,\r\n    message: string | HttpRequestBody,\r\n    options: HubBroadcastOptions = {}\r\n  ): Promise<boolean> {\r\n\r\n    try {\r\n      var res = await this.sender.sendToGroup(\r\n        groupName,\r\n        message,\r\n        {\r\n          apiVersion: options.apiVersion,\r\n          hub: this.hub,\r\n          excluded: options.excludedConnections\r\n        }\r\n      );\r\n      return this.verifyResponse(res, 200);\r\n    } finally {\r\n    }\r\n  }\r\n\r\n  private verifyResponse(res: RestResponse, successStatus?: number, failureStatus?: number): boolean {\r\n    if (successStatus !== undefined && res._response.status === successStatus) {\r\n      return true;\r\n    }\r\n\r\n    if (failureStatus !== undefined && res._response.status === failureStatus) {\r\n      return false;\r\n    }\r\n\r\n    else {\r\n      // this is sad - wish this was handled by autorest.\r\n      throw new RestError(\r\n        res._response.bodyAsText!,\r\n        undefined,\r\n        res._response.status,\r\n        res._response.request,\r\n        res._response\r\n      );\r\n    }\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation.\r\n// Licensed under the MIT license.\r\n\r\nimport { WebPubSubServiceEndpoint } from \"./webPubSubServiceEndpoint\";\r\n\r\nimport { ProtocolParser, WebPubSubEventHandler } from \"./webPubSubEventProtocols\"\r\nimport { IncomingMessage, ServerResponse } from \"http\";\r\nimport express from \"express\";\r\nimport { Message } from \"cloudevents\";\r\nimport { WebPubSubServiceRestClient, WebPubSubServiceRestClientOptions } from \"./webPubSubServiceRestClient\";\r\n\r\nexport interface WebPubSubEventHandlerOptions extends WebPubSubEventHandler {\r\n  path?: string;\r\n  dumpRequest?: boolean;\r\n}\r\n\r\nexport interface EventRequest extends Message {\r\n}\r\n\r\nexport class WebPubSubServer {\r\n  public endpoint: WebPubSubServiceEndpoint;\r\n  constructor(conn: string, private hub: string) {\r\n    this.endpoint = new WebPubSubServiceEndpoint(conn);\r\n  }\r\n\r\n  public createCloudEventsHandler(options?: WebPubSubEventHandlerOptions): WebPubSubCloudEventsHandler {\r\n    return new WebPubSubCloudEventsHandler(this.endpoint, this.hub, options);\r\n  }\r\n\r\n  public createServiceClient(options?: WebPubSubServiceRestClientOptions): WebPubSubServiceRestClient {\r\n    return new WebPubSubServiceRestClient(this.endpoint, this.hub, options);\r\n  }\r\n}\r\n\r\nexport class WebPubSubCloudEventsHandler {\r\n\r\n  public readonly path: string;\r\n\r\n  private _cloudEventsHandler: ProtocolParser;\r\n\r\n  private _serviceHost: string;\r\n  private _endpoint: WebPubSubServiceEndpoint;\r\n\r\n  constructor(connectionStringOrEndpoint: string | WebPubSubServiceEndpoint, private hub: string, options?: WebPubSubEventHandlerOptions) {\r\n    if (typeof connectionStringOrEndpoint === 'string') {\r\n      this._endpoint = new WebPubSubServiceEndpoint(connectionStringOrEndpoint);\r\n    } else {\r\n      this._endpoint = connectionStringOrEndpoint;\r\n    }\r\n\r\n    this.path = (options?.path ?? `/api/webpubsub/hubs/${hub}`).toLowerCase();\r\n    this.hub = hub;\r\n\r\n\r\n    this._serviceHost = this._endpoint.endpoint.serviceUrl.hostname;\r\n\r\n    this._cloudEventsHandler = new ProtocolParser(this.hub, options, options?.dumpRequest);\r\n  }\r\n\r\n  public async handleRequest(request: IncomingMessage, response: ServerResponse): Promise<boolean> {\r\n    var normalizedUrl = request.url?.toLowerCase();\r\n    if (!normalizedUrl) {\r\n      throw new Error(\"invalid url\");\r\n    }\r\n    if (!(normalizedUrl === this.path || normalizedUrl.startsWith(this.path))) {\r\n      return false;\r\n    }\r\n\r\n    if (this.tryHandleAbuseProtectionRequests(request, response, normalizedUrl)) {\r\n      return true;\r\n    }\r\n\r\n    return await this.tryHandleCloudEvents(request, response, normalizedUrl);\r\n  }\r\n\r\n  public getMiddleware(): express.Router {\r\n    const router = express.Router();\r\n    router.use(this.path, async (request, response) => {\r\n      var normalizedUrl = (this.path + request.url).toLowerCase();\r\n\r\n      if (this.tryHandleAbuseProtectionRequests(request, response, normalizedUrl)) {\r\n        return true;\r\n      }\r\n\r\n      await this.tryHandleCloudEvents(request, response, normalizedUrl);\r\n    });\r\n    return router;\r\n  }\r\n\r\n  private tryHandleAbuseProtectionRequests(request: IncomingMessage, response: ServerResponse, url: string): boolean {\r\n    if (url !== this.path || request.method !== 'OPTIONS') {\r\n      return false;\r\n    }\r\n    if (request.headers['webhook-request-origin'] === this._serviceHost) {\r\n      response.setHeader(\"WebHook-Allowed-Origin\", this._serviceHost);\r\n    } else {\r\n      console.log(`Invalid abuse protection request ${request}`);\r\n      response.statusCode = 400\r\n    }\r\n    response.end();\r\n    return true;\r\n  }\r\n\r\n  private async tryHandleCloudEvents(request: IncomingMessage, response: ServerResponse, url: string): Promise<boolean> {\r\n    if (url !== this.path) {\r\n      console.warn(`Url ${url} does not match ${this.path}`);\r\n      return false;\r\n    }\r\n    if (request.method !== 'POST') {\r\n      response.statusCode = 400;\r\n      response.end();\r\n      return true;\r\n    }\r\n    await this._cloudEventsHandler.processNodeHttpRequest(request, response);\r\n    return true;\r\n  }\r\n}\r\n"],"names":["url","URL","HTTP","CloudErrorMapper","msRest.QueryCollectionFormat","msRest.Serializer","Parameters.apiVersion","Parameters.acceptLanguage","Mappers.CloudError","serializer","Mappers","Parameters.hub","Parameters.excluded","Parameters.connectionId","Parameters.reason","Parameters.group0","Parameters.user","Parameters.id","Parameters.permission","Parameters.group1","msRestAzure.AzureServiceClient","msRestAzure.getDefaultUserAgentValue","operations.HealthApi","operations.WebPubSubApi","sendToUserOperationSpec","sendToConnectionOperationSpec","HttpHeaders","HttpPipelineLogLevel","GeneratedClient","logPolicy","RestError"],"mappings":"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"}