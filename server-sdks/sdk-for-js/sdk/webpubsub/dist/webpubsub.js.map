{"version":3,"file":"webpubsub.js","sources":["../node_modules/tslib/tslib.es6.js","../node_modules/typescript-base64-arraybuffer/index.js","../src/webPubSubCloudEventsProtocols.ts","../src/webPubSubCloudEventsDispatcher.ts","../src/WebPubSubCloudEventsHandler.ts","../src/generated/models/parameters.ts","../src/generated/operations/healthApi.ts","../src/generated/operations/webPubSub.ts","../src/generated/webPubSubServiceClientContext.ts","../src/generated/webPubSubServiceClient.ts","../src/webPubSubKeyCredentials.ts","../src/webPubSubServiceEndpoint.ts","../src/webPubSubServiceRestClient.ts"],"sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __createBinding(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","// For the base64 encoding pieces.\nvar alphabet = [\n    'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H',\n    'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P',\n    'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X',\n    'Y', 'Z', 'a', 'b', 'c', 'd', 'e', 'f',\n    'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n    'o', 'p', 'q', 'r', 's', 't', 'u', 'v',\n    'w', 'x', 'y', 'z', '0', '1', '2', '3',\n    '4', '5', '6', '7', '8', '9', '+', '/'\n];\nvar values = {};\nfor (var /** @type {?} */ i = 0; i < 64; ++i) {\n    values[alphabet[i]] = i;\n}\n/**\n * @param {?} bytes\n * @return {?}\n */\nfunction encode(bytes) {\n    var /** @type {?} */ array = new Uint8Array(bytes);\n    var /** @type {?} */ base64 = [];\n    var /** @type {?} */ index = 0;\n    var /** @type {?} */ quantum;\n    var /** @type {?} */ value;\n    /* tslint:disable:no-bitwise */\n    // Grab as many sets of 3 bytes as we can, that form 24 bits.\n    while (index + 2 < array.byteLength) {\n        quantum = (array[index] << 16) | (array[index + 1] << 8) | array[index + 2];\n        // 24 bits will become 4 base64 chars.\n        value = (quantum >> 18) & 0x3f;\n        base64.push(alphabet[value]);\n        value = (quantum >> 12) & 0x3f;\n        base64.push(alphabet[value]);\n        value = (quantum >> 6) & 0x3f;\n        base64.push(alphabet[value]);\n        value = quantum & 0x3f;\n        base64.push(alphabet[value]);\n        index += 3;\n    }\n    // At this point, there are 0, 1 or 2 bytes left.\n    if (index + 1 === array.byteLength) {\n        // 8 bits; shift by 4 to pad on the right with 0s to make 12 bits total.\n        quantum = array[index] << 4;\n        value = (quantum >> 6) & 0x3f;\n        base64.push(alphabet[value]);\n        value = quantum & 0x3f;\n        base64.push(alphabet[value]);\n        base64.push('==');\n    }\n    else if (index + 2 === array.byteLength) {\n        // 16 bits; shift by 2 to pad on the right with 0s to make 18 bits total.\n        quantum = (array[index] << 10) | (array[index + 1] << 2);\n        value = (quantum >> 12) & 0x3f;\n        base64.push(alphabet[value]);\n        value = (quantum >> 6) & 0x3f;\n        base64.push(alphabet[value]);\n        value = quantum & 0x3f;\n        base64.push(alphabet[value]);\n        base64.push('=');\n    }\n    /* tslint:enable:no-bitwise */\n    return base64.join('');\n}\n/**\n * @param {?} string\n * @return {?}\n */\nfunction decode(string) {\n    var /** @type {?} */ size = string.length;\n    if (size === 0) {\n        return new Uint8Array(new ArrayBuffer(0));\n    }\n    if (size % 4 !== 0) {\n        throw new Error('Bad length: ' + size);\n    }\n    if (!string.match(/^[a-zA-Z0-9+/]+={0,2}$/)) {\n        throw new Error('Invalid base64 encoded value');\n    }\n    // Every 4 base64 chars = 24 bits = 3 bytes. But, we also need to figure out\n    // padding, if any.\n    var /** @type {?} */ bytes = 3 * (size / 4);\n    var /** @type {?} */ numPad = 0;\n    if (string.charAt(size - 1) === '=') {\n        numPad++;\n        bytes--;\n    }\n    if (string.charAt(size - 2) === '=') {\n        numPad++;\n        bytes--;\n    }\n    var /** @type {?} */ buffer = new Uint8Array(new ArrayBuffer(bytes));\n    var /** @type {?} */ index = 0;\n    var /** @type {?} */ bufferIndex = 0;\n    var /** @type {?} */ quantum;\n    if (numPad > 0) {\n        size -= 4; // handle the last one specially\n    }\n    /* tslint:disable:no-bitwise */\n    while (index < size) {\n        quantum = 0;\n        for (var /** @type {?} */ i = 0; i < 4; ++i) {\n            quantum = (quantum << 6) | values[string.charAt(index + i)];\n        }\n        // quantum is now a 24-bit value.\n        buffer[bufferIndex++] = (quantum >> 16) & 0xff;\n        buffer[bufferIndex++] = (quantum >> 8) & 0xff;\n        buffer[bufferIndex++] = quantum & 0xff;\n        index += 4;\n    }\n    if (numPad > 0) {\n        // if numPad == 1, there is one =, and we have 18 bits with 2 0s at end.\n        // if numPad == 2, there is two ==, and we have 12 bits with 4 0s at end.\n        // First, grab my quantum.\n        quantum = 0;\n        for (var /** @type {?} */ i = 0; i < 4 - numPad; ++i) {\n            quantum = (quantum << 6) | values[string.charAt(index + i)];\n        }\n        if (numPad === 1) {\n            // quantum is 18 bits, but really represents two bytes.\n            quantum = quantum >> 2;\n            buffer[bufferIndex++] = (quantum >> 8) & 0xff;\n            buffer[bufferIndex++] = quantum & 0xff;\n        }\n        else {\n            // quantum is 12 bits, but really represents only one byte.\n            quantum = quantum >> 4;\n            buffer[bufferIndex++] = quantum & 0xff;\n        }\n    }\n    /* tslint:enable:no-bitwise */\n    return buffer;\n}\n\nexport { encode, decode };\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * Error response.\n */\nexport interface ErrorResponse {\n  /**\n   * Error code.\n   */\n  code: ErrorCode;\n  /**\n   * Error detail.\n   */\n  detail?: string;\n}\n\n/**\n * Error code for the response\n */\nexport enum ErrorCode {\n  /**\n   * Unauthorized response to service using 401.\n   */\n  unauthorized = 401,\n  /**\n   * Server error response to service using 500.\n   */\n  serverError = 500,\n  /**\n   * User error response to service using 400.\n   */\n  userError = 400\n}\n\n/**\n * Response of the connect event.\n */\nexport interface ConnectResponse {\n  /**\n   * If error is set, we consider this as a failed response.\n   */\n  error?: ErrorResponse;\n  /**\n   * Set the groups the connection would like to join.\n   */\n  groups?: string[];\n  /**\n   * Set the roles the connection belongs to.\n   */\n  roles?: string[];\n  /**\n   * Set the userId for the connection.\n   */\n  userId?: string;\n  /**\n   * Set the subprotocol for the connection to complete WebSocket handshake.\n   */\n  subprotocol?: string;\n}\n\n/**\n * Response of the user event.\n */\nexport interface UserEventResponse {\n  /**\n   * Error response. If error is set, we consider this as a failed response.\n   */\n  error?: ErrorResponse;\n  /**\n   * Payload data to send back to the client.\n   */\n  payload?: PayloadData;\n}\n\n/**\n * The connection context representing the client WebSocket connection.\n */\nexport interface ConnectionContext {\n  /**\n   * The hub the connection belongs to.\n   */\n  hub: string;\n  /**\n   * The Id of the connection.\n   */\n  connectionId: string;\n  /**\n   * The event name of this CloudEvents request.\n   */\n  eventName: string;\n  /**\n   * The host name this CloudEvents request comes from.\n   */\n  host: string;\n  /**\n   * The user id of the connection.\n   */\n  userId?: string;\n  /**\n   * The subprotocol of this connection.\n   */\n  subprotocol?: string;\n}\n\n/**\n * Request for the connect event.\n */\nexport interface ConnectRequest {\n  /**\n   * The context of current CloudEvents request.\n   */\n  context: ConnectionContext;\n  /**\n   * The claims that the client WebSocket connection has when it connects.\n   */\n  claims?: { [key: string]: string[] };\n  /**\n   * The queries that the client WebSocket connection has when it connects.\n   */\n  queries?: { [key: string]: string[] };\n  /**\n   * The subprotocols that the client WebSocket connection uses to do handshake.\n   */\n  subprotocols?: string[];\n  /**\n   * The client certificate info that the client WebSocket connection uses to connect.\n   */\n  clientCertificates?: Certificate[];\n}\n\n/**\n * The client certificate.\n */\nexport interface Certificate {\n  /**\n   * The thumbprint of the certificate.\n   */\n  thumbprint: string;\n}\n\n/**\n * Request for the connected event.\n */\nexport interface ConnectedRequest {\n  /**\n   * The context of current CloudEvents request.\n   */\n  context: ConnectionContext;\n}\n\n/**\n * Request for the user event.\n */\nexport interface UserEventRequest {\n  /**\n   * The context of current CloudEvents request.\n   */\n  context: ConnectionContext;\n  /**\n   * The payload body of the user event request.\n   */\n  payload: PayloadData;\n}\n\n/**\n * The payload data.\n */\nexport interface PayloadData {\n  /**\n   * The content data.\n   */\n  data: string | ArrayBuffer;\n  /**\n   * The type of the data.\n   */\n  dataType: PayloadDataType;\n}\n\n/**\n * The data type of the payload data.\n */\nexport enum PayloadDataType {\n  /**\n   * The binary format.\n   */\n  binary,\n  /**\n   * The plain text format.\n   */\n  text,\n  /**\n   * The JSON format.\n   */\n  json\n}\n\n/**\n * Request for the disconnected event.\n */\nexport interface DisconnectedRequest {\n  /**\n   * The context of current CloudEvents request.\n   */\n  context: ConnectionContext;\n  /**\n   * The reason that the connection disconnects.\n   */\n  reason?: string;\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { CloudEvent, Message, HTTP } from \"cloudevents\";\nimport { IncomingMessage, ServerResponse } from \"http\";\nimport { decode } from \"typescript-base64-arraybuffer\";\nimport {\n  ConnectRequest,\n  ConnectResponse,\n  UserEventRequest,\n  UserEventResponse,\n  DisconnectedRequest,\n  ConnectedRequest,\n  ConnectionContext,\n  ErrorCode,\n  PayloadDataType\n} from \"./webPubSubCloudEventsProtocols\";\n\n/**\n * Options to define the event handlers for each event\n */\nexport interface WebPubSubEventHandler {\n  onConnect?: (r: ConnectRequest) => Promise<ConnectResponse>;\n  onUserEvent?: (r: UserEventRequest) => Promise<UserEventResponse>;\n  onConnected?: (r: ConnectedRequest) => Promise<void>;\n  onDisconnected?: (r: DisconnectedRequest) => Promise<void>;\n}\n\nexport class CloudEventsDispatcher {\n  constructor(\n    private hub: string,\n    private eventHandler?: WebPubSubEventHandler,\n    private dumpRequest?: boolean\n  ) {}\n\n  public async processRequest(request: IncomingMessage, response: ServerResponse): Promise<void> {\n    if (!this.eventHandler) {\n      response.end();\n      return;\n    }\n    try {\n      var eventRequest = await this.convertHttpToEvent(request);\n      var eventResponse = await this.getResponse(eventRequest);\n      if (!eventResponse) {\n        // we consider no response as 200 valid response\n        response.end();\n        return;\n      }\n      if (eventResponse.error) {\n        switch (eventResponse.error.code) {\n          case ErrorCode.userError:\n            response.statusCode = 400;\n            break;\n          case ErrorCode.unauthorized:\n            response.statusCode = 401;\n            break;\n          default:\n            response.statusCode = 500;\n            break;\n        }\n        response.end(eventResponse.error.detail ?? \"\");\n        return;\n      }\n\n      if (eventResponse?.payload) {\n        if (eventResponse.payload.dataType === PayloadDataType.binary) {\n          response.setHeader(\"Content-Type\", \"application/octet-stream\");\n        } else if (eventResponse.payload.dataType === PayloadDataType.json) {\n          response.setHeader(\"Content-Type\", \"application/json\");\n        } else {\n          response.setHeader(\"Content-Type\", \"text/plain; charset=utf-8\");\n        }\n        response.end(eventResponse.payload?.data ?? \"\");\n      }\n    } catch (err) {\n      console.error(`Error processing request ${request}: ${err}`);\n      response.statusCode = 500;\n      response.end(err.message);\n    }\n  }\n\n  private async getResponse(request: Message): Promise<UserEventResponse | undefined> {\n    const receivedEvent = HTTP.toEvent(request);\n\n    if (this.dumpRequest === true) {\n      console.log(receivedEvent);\n    }\n\n    var type = receivedEvent.type.toLowerCase();\n    var context = this.GetContext(receivedEvent, request.headers.host!);\n    if (context.hub !== this.hub) {\n      // it is possible when multiple hubs share the same handler\n      console.info(\n        `Incoming request is for hub '${this.hub}' while the incoming request is for hub '${context.hub}'`\n      );\n      return;\n    }\n\n    // TODO: valid request is a valid cloud event with WebPubSub extension\n    if (type === \"azure.webpubsub.sys.connect\") {\n      if (!this.eventHandler?.onConnect) {\n        // 401 if onConnect is not configured\n        return {\n          error: {\n            code: ErrorCode.unauthorized\n          }\n        };\n      }\n      var connectRequest = receivedEvent.data as ConnectRequest;\n      if (!connectRequest) {\n        throw new Error(\"Data is expected\");\n      }\n\n      connectRequest.context = context;\n      var connectResponse = await this.eventHandler.onConnect(connectRequest);\n      if (connectRequest) {\n        return {\n          payload: {\n            data: JSON.stringify(connectResponse),\n            dataType: PayloadDataType.json\n          }\n        };\n      } else {\n        // what is the differnce between not configure and not return? there is no such definition in C#..\n        // 401 if onConnect is not configured\n        return {\n          error: {\n            code: ErrorCode.unauthorized\n          }\n        };\n      }\n    } else if (type === \"azure.webpubsub.sys.connected\") {\n      if (!this.eventHandler?.onConnected) {\n        return;\n      }\n\n      var connectedRequest = receivedEvent.data as ConnectedRequest;\n      if (!connectedRequest) {\n        throw new Error(\"Data is expected\");\n      }\n\n      connectedRequest.context = context;\n      this.eventHandler.onConnected(connectedRequest);\n    } else if (type === \"azure.webpubsub.sys.disconnected\") {\n      if (!this.eventHandler?.onDisconnected) {\n        return;\n      }\n\n      var disconnectedRequest = receivedEvent.data as DisconnectedRequest;\n      if (!disconnectedRequest) {\n        throw new Error(\"Data is expected\");\n      }\n\n      disconnectedRequest.context = context;\n      this.eventHandler.onDisconnected(disconnectedRequest);\n    } else if (type.startsWith(\"azure.webpubsub.user\")) {\n      if (!this.eventHandler?.onUserEvent) {\n        return;\n      }\n      var data: ArrayBuffer | string;\n      var dataType = PayloadDataType.binary;\n      if (receivedEvent.data) {\n        data = receivedEvent.data as string;\n        dataType =\n          receivedEvent.datacontenttype === \"application/json\"\n            ? PayloadDataType.json\n            : PayloadDataType.text;\n      } else if (receivedEvent.data_base64) {\n        data = decode(receivedEvent.data_base64);\n      } else {\n        throw new Error(\"empty data payload\");\n      }\n      var userRequest: UserEventRequest = {\n        context: context,\n        payload: {\n          data: data,\n          dataType: dataType\n        }\n      };\n\n      if (!userRequest) {\n        throw new Error(\"Data is expected\");\n      }\n\n      userRequest.context = context;\n      return await this.eventHandler.onUserEvent(userRequest);\n    } else {\n      throw new Error(\"Not supported event: \" + type);\n    }\n    return;\n  }\n\n  private GetContext(ce: CloudEvent, host: string): ConnectionContext {\n    var context = {\n      signature: ce[\"signature\"] as string,\n      userId: ce[\"userid\"] as string,\n      hub: ce[\"hub\"] as string,\n      connectionId: ce[\"connectionid\"] as string,\n      eventName: ce[\"eventname\"] as string,\n      host: host\n    };\n\n    // TODO: validation\n    return context;\n  }\n\n  private async convertHttpToEvent(request: IncomingMessage): Promise<Message> {\n    const normalized: Message = {\n      headers: {},\n      body: \"\"\n    };\n    if (request.headers) {\n      for (const key in request.headers) {\n        if (Object.prototype.hasOwnProperty.call(request.headers, key)) {\n          const element = request.headers[key];\n          if (element === undefined) {\n            continue;\n          }\n          if (typeof element === \"string\") {\n            normalized.headers[key] = element;\n          } else {\n            normalized.headers[key] = element.join(\",\");\n          }\n        }\n      }\n    }\n\n    normalized.body = await this.readRequestBody(request);\n    return normalized;\n  }\n\n  private readRequestBody(req: IncomingMessage): Promise<string> {\n    return new Promise(function(resolve, reject) {\n      var body = \"\";\n      req.on(\"data\", function(chunk) {\n        body += chunk;\n      });\n      req.on(\"end\", function() {\n        resolve(body);\n      });\n      // reject on request error\n      req.on(\"error\", function(err) {\n        // This is not a \"Second reject\", just a different sort of failure\n        reject(err);\n      });\n    });\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { URL } from \"url\";\nimport { CloudEventsDispatcher, WebPubSubEventHandler } from \"./webPubSubCloudEventsDispatcher\";\nimport { IncomingMessage, ServerResponse } from \"http\";\nimport express from \"express\";\n\n/**\n * The options for the CloudEvents handler\n */\nexport interface WebPubSubEventHandlerOptions extends WebPubSubEventHandler {\n  /**\n   * Custom serving path for the path of the CloudEvents handler\n   */\n  path?: string;\n\n  /**\n   * Configures if you'd like to dump the incoming HTTP request\n   */\n  dumpRequest?: boolean;\n}\n\n/**\n * The handler to handle incoming CloudEvents messages\n */\nexport class WebPubSubCloudEventsHandler {\n  /**\n   * The path this CloudEvents handler listens to\n   */\n  public readonly path: string;\n\n  private _cloudEventsHandler: CloudEventsDispatcher;\n\n  private _allowedOrigins: string[];\n\n  /**\n   * Creates an instance of a WebPubSubCloudEventsHandler for handling incoming CloudEvents messages.\n   *\n   * Example usage:\n   * ```ts\n   * import express from \"express\";\n   * import { WebPubSubCloudEventsHandler } from \"@azure/web-pubsub-express\";\n   * const endpoint = \"https://xxxx.webpubsubdev.azure.com\"\n   * const handler = new WebPubSubCloudEventsHandler('chat', [ endpoint ] {\n   *   onConnect: async connectRequest => {\n   *     console.log(JSON.stringify(connectRequest));\n   *     return {};\n   *   },\n   *   onConnected: async connectedRequest => {\n   *     console.log(JSON.stringify(connectedRequest));\n   *   },\n   *   onUserEvent: async userRequest => {\n   *     console.log(JSON.stringify(userRequest));\n   *     return {\n   *      payload: {\n   *        data: \"Hey \" + userRequest.payload.data,\n   *        dataType: userRequest.payload.dataType\n   *      }\n   *    };\n   *  },\n   * });\n   * ```\n   *\n   * @param hub The name of the hub to listen to\n   * @param allowedEndpoints The allowed endpoints for the incoming CloudEvents request\n   * @param options Options to configure the event handler\n   */\n  constructor(\n    private hub: string,\n    allowedEndpoints: string[],\n    options?: WebPubSubEventHandlerOptions\n  ) {\n    const path = options?.path ?? `/api/webpubsub/hubs/${hub}`;\n    this.path = path.endsWith(\"/\") ? path : path + \"/\";\n    this._allowedOrigins = allowedEndpoints.map((endpoint) => endpoint === \"*\" ? \"*\" : (new URL(endpoint).host));\n    this._cloudEventsHandler = new CloudEventsDispatcher(this.hub, options, options?.dumpRequest);\n  }\n\n  /**\n   * Get the middleware to be used in express\n   */\n  public getMiddleware(): express.Router {\n    const router = express.Router();\n    router.options(this.path, (request, response)=> this.handleAbuseProtectionRequests(request, response));\n    router.post(this.path, (request, response)=> this._cloudEventsHandler.processRequest(request, response));\n    return router;\n  }\n\n  private handleAbuseProtectionRequests(\n    request: IncomingMessage,\n    response: ServerResponse\n  ): boolean {\n    console.log(request.headers);\n    if (request.headers[\"webhook-request-origin\"]) {\n      response.setHeader(\"WebHook-Allowed-Origin\", this._allowedOrigins);\n    } else {\n      console.log(`Invalid abuse protection request ${request}`);\n      response.statusCode = 400;\n    }\n    response.end();\n    return true;\n  }\n}\n","import {\n  OperationURLParameter,\n  OperationQueryParameter,\n  OperationParameter,\n  QueryCollectionFormat\n} from \"@azure/core-http\";\n\nexport const $host: OperationURLParameter = {\n  parameterPath: \"$host\",\n  mapper: {\n    serializedName: \"$host\",\n    required: true,\n    type: {\n      name: \"String\"\n    }\n  },\n  skipEncoding: true\n};\n\nexport const apiVersion: OperationQueryParameter = {\n  parameterPath: \"apiVersion\",\n  mapper: {\n    defaultValue: \"2020-10-01\",\n    isConstant: true,\n    serializedName: \"api-version\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const contentType: OperationParameter = {\n  parameterPath: \"contentType\",\n  mapper: {\n    defaultValue: \"application/octet-stream\",\n    isConstant: true,\n    serializedName: \"Content-Type\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const payloadMessage: OperationParameter = {\n  parameterPath: \"payloadMessage\",\n  mapper: {\n    serializedName: \"payloadMessage\",\n    required: true,\n    type: {\n      name: \"Stream\"\n    }\n  }\n};\n\nexport const contentType1: OperationParameter = {\n  parameterPath: \"contentType\",\n  mapper: {\n    defaultValue: \"text/plain\",\n    isConstant: true,\n    serializedName: \"Content-Type\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const payloadMessage1: OperationParameter = {\n  parameterPath: \"payloadMessage\",\n  mapper: {\n    serializedName: \"payloadMessage\",\n    required: true,\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const contentType2: OperationParameter = {\n  parameterPath: \"contentType\",\n  mapper: {\n    defaultValue: \"application/json\",\n    isConstant: true,\n    serializedName: \"Content-Type\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const payloadMessage2: OperationParameter = {\n  parameterPath: \"payloadMessage\",\n  mapper: {\n    serializedName: \"payloadMessage\",\n    required: true,\n    type: {\n      name: \"Stream\"\n    }\n  }\n};\n\nexport const hub: OperationURLParameter = {\n  parameterPath: \"hub\",\n  mapper: {\n    serializedName: \"hub\",\n    required: true,\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const excluded: OperationQueryParameter = {\n  parameterPath: [\"options\", \"excluded\"],\n  mapper: {\n    serializedName: \"excluded\",\n    type: {\n      name: \"Sequence\",\n      element: {\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  },\n  collectionFormat: QueryCollectionFormat.Multi\n};\n\nexport const connectionId: OperationURLParameter = {\n  parameterPath: \"connectionId\",\n  mapper: {\n    serializedName: \"connectionId\",\n    required: true,\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const reason: OperationQueryParameter = {\n  parameterPath: [\"options\", \"reason\"],\n  mapper: {\n    serializedName: \"reason\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const group: OperationURLParameter = {\n  parameterPath: \"group\",\n  mapper: {\n    serializedName: \"group\",\n    required: true,\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const userId: OperationURLParameter = {\n  parameterPath: \"userId\",\n  mapper: {\n    serializedName: \"userId\",\n    required: true,\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const permission: OperationURLParameter = {\n  parameterPath: \"permission\",\n  mapper: {\n    serializedName: \"permission\",\n    required: true,\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const targetName: OperationQueryParameter = {\n  parameterPath: [\"options\", \"targetName\"],\n  mapper: {\n    serializedName: \"targetName\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const permission1: OperationURLParameter = {\n  parameterPath: \"permission\",\n  mapper: {\n    serializedName: \"permission\",\n    required: true,\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const permission2: OperationURLParameter = {\n  parameterPath: \"permission\",\n  mapper: {\n    serializedName: \"permission\",\n    required: true,\n    type: {\n      name: \"String\"\n    }\n  }\n};\n","import * as coreHttp from \"@azure/core-http\";\nimport * as Parameters from \"../models/parameters\";\nimport { WebPubSubServiceClient } from \"../webPubSubServiceClient\";\n\n/**\n * Class representing a HealthApi.\n */\nexport class HealthApi {\n  private readonly client: WebPubSubServiceClient;\n\n  /**\n   * Initialize a new instance of the class HealthApi class.\n   * @param client Reference to the service client\n   */\n  constructor(client: WebPubSubServiceClient) {\n    this.client = client;\n  }\n\n  /**\n   * Get service health status.\n   * @param options The options parameters.\n   */\n  getHealthStatus(\n    options?: coreHttp.OperationOptions\n  ): Promise<coreHttp.RestResponse> {\n    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(\n      options || {}\n    );\n    return this.client.sendOperationRequest(\n      { options: operationOptions },\n      getHealthStatusOperationSpec\n    ) as Promise<coreHttp.RestResponse>;\n  }\n}\n// Operation Specifications\n\nconst serializer = new coreHttp.Serializer({}, /* isXml */ false);\n\nconst getHealthStatusOperationSpec: coreHttp.OperationSpec = {\n  path: \"/api/health\",\n  httpMethod: \"HEAD\",\n  responses: { 200: {}, default: {} },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.$host],\n  serializer\n};\n","import * as coreHttp from \"@azure/core-http\";\nimport * as Parameters from \"../models/parameters\";\nimport { WebPubSubServiceClient } from \"../webPubSubServiceClient\";\nimport {\n  WebPubSubSendToAll$binaryOptionalParams,\n  WebPubSubSendToAll$textOptionalParams,\n  WebPubSubSendToAll$jsonOptionalParams,\n  WebPubSubCloseClientConnectionOptionalParams,\n  WebPubSubSendToGroup$binaryOptionalParams,\n  WebPubSubSendToGroup$textOptionalParams,\n  WebPubSubSendToGroup$jsonOptionalParams,\n  Enum0,\n  WebPubSubGrantPermissionOptionalParams,\n  Enum1,\n  WebPubSubRevokePermissionOptionalParams,\n  Enum2,\n  WebPubSubCheckPermissionOptionalParams\n} from \"../models\";\n\n/**\n * Class representing a WebPubSub.\n */\nexport class WebPubSub {\n  private readonly client: WebPubSubServiceClient;\n\n  /**\n   * Initialize a new instance of the class WebPubSub class.\n   * @param client Reference to the service client\n   */\n  constructor(client: WebPubSubServiceClient) {\n    this.client = client;\n  }\n\n  /**\n   * Broadcast content inside request body to all the connected client connections.\n   * @param hub Target hub name, which should start with alphabetic characters and only contain\n   *            alpha-numeric characters or underscore.\n   * @param contentType Upload file type\n   * @param payloadMessage The payload body.\n   * @param options The options parameters.\n   */\n  sendToAll(\n    hub: string,\n    contentType: \"application/octet-stream\",\n    payloadMessage: coreHttp.HttpRequestBody,\n    options?: WebPubSubSendToAll$binaryOptionalParams\n  ): Promise<coreHttp.RestResponse>;\n  /**\n   * Broadcast content inside request body to all the connected client connections.\n   * @param hub Target hub name, which should start with alphabetic characters and only contain\n   *            alpha-numeric characters or underscore.\n   * @param contentType Upload file type\n   * @param payloadMessage The payload body.\n   * @param options The options parameters.\n   */\n  sendToAll(\n    hub: string,\n    contentType: \"text/plain\",\n    payloadMessage: string,\n    options?: WebPubSubSendToAll$textOptionalParams\n  ): Promise<coreHttp.RestResponse>;\n  /**\n   * Broadcast content inside request body to all the connected client connections.\n   * @param hub Target hub name, which should start with alphabetic characters and only contain\n   *            alpha-numeric characters or underscore.\n   * @param contentType Body Parameter content-type\n   * @param payloadMessage The payload body.\n   * @param options The options parameters.\n   */\n  sendToAll(\n    hub: string,\n    contentType: \"application/json\",\n    payloadMessage: coreHttp.HttpRequestBody,\n    options?: WebPubSubSendToAll$jsonOptionalParams\n  ): Promise<coreHttp.RestResponse>;\n  /**\n   * Broadcast content inside request body to all the connected client connections.\n   * @param args Includes all the parameters for this operation.\n   */\n  sendToAll(\n    ...args:\n      | [\n          string,\n          \"application/octet-stream\",\n          coreHttp.HttpRequestBody,\n          WebPubSubSendToAll$binaryOptionalParams?\n        ]\n      | [string, \"text/plain\", string, WebPubSubSendToAll$textOptionalParams?]\n      | [\n          string,\n          \"application/json\",\n          coreHttp.HttpRequestBody,\n          WebPubSubSendToAll$jsonOptionalParams?\n        ]\n  ): Promise<coreHttp.RestResponse> {\n    let operationSpec: coreHttp.OperationSpec;\n    let operationArguments: coreHttp.OperationArguments;\n    if (args[1] === \"application/octet-stream\") {\n      operationSpec = sendToAll$binaryOperationSpec;\n      operationArguments = {\n        hub: args[0],\n        contentType: args[1],\n        payloadMessage: args[2],\n        options: args[3]\n      };\n    } else if (args[1] === \"text/plain\") {\n      operationSpec = sendToAll$textOperationSpec;\n      operationArguments = {\n        hub: args[0],\n        contentType: args[1],\n        payloadMessage: args[2],\n        options: args[3]\n      };\n    } else if (args[1] === \"application/json\") {\n      operationSpec = sendToAll$jsonOperationSpec;\n      operationArguments = {\n        hub: args[0],\n        contentType: args[1],\n        payloadMessage: args[2],\n        options: args[3]\n      };\n    } else {\n      throw new TypeError(\n        `\"contentType\" must be a valid value but instead was \"${args[1]}\".`\n      );\n    }\n    return this.client.sendOperationRequest(\n      operationArguments,\n      operationSpec\n    ) as Promise<coreHttp.RestResponse>;\n  }\n\n  /**\n   * Check if the connection with the given connectionId exists.\n   * @param hub Target hub name, which should start with alphabetic characters and only contain\n   *            alpha-numeric characters or underscore.\n   * @param connectionId The connection Id.\n   * @param options The options parameters.\n   */\n  checkConnectionExistence(\n    hub: string,\n    connectionId: string,\n    options?: coreHttp.OperationOptions\n  ): Promise<coreHttp.RestResponse> {\n    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(\n      options || {}\n    );\n    return this.client.sendOperationRequest(\n      { hub, connectionId, options: operationOptions },\n      checkConnectionExistenceOperationSpec\n    ) as Promise<coreHttp.RestResponse>;\n  }\n\n  /**\n   * Close the client connection.\n   * @param hub Target hub name, which should start with alphabetic characters and only contain\n   *            alpha-numeric characters or underscore.\n   * @param connectionId Target connection Id.\n   * @param options The options parameters.\n   */\n  closeClientConnection(\n    hub: string,\n    connectionId: string,\n    options?: WebPubSubCloseClientConnectionOptionalParams\n  ): Promise<coreHttp.RestResponse> {\n    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(\n      options || {}\n    );\n    return this.client.sendOperationRequest(\n      { hub, connectionId, options: operationOptions },\n      closeClientConnectionOperationSpec\n    ) as Promise<coreHttp.RestResponse>;\n  }\n\n  /**\n   * Send content inside request body to the specific connection.\n   * @param hub Target hub name, which should start with alphabetic characters and only contain\n   *            alpha-numeric characters or underscore.\n   * @param connectionId The connection Id.\n   * @param contentType Upload file type\n   * @param payloadMessage The payload body.\n   * @param options The options parameters.\n   */\n  sendToConnection(\n    hub: string,\n    connectionId: string,\n    contentType: \"application/octet-stream\",\n    payloadMessage: coreHttp.HttpRequestBody,\n    options?: coreHttp.OperationOptions\n  ): Promise<coreHttp.RestResponse>;\n  /**\n   * Send content inside request body to the specific connection.\n   * @param hub Target hub name, which should start with alphabetic characters and only contain\n   *            alpha-numeric characters or underscore.\n   * @param connectionId The connection Id.\n   * @param contentType Upload file type\n   * @param payloadMessage The payload body.\n   * @param options The options parameters.\n   */\n  sendToConnection(\n    hub: string,\n    connectionId: string,\n    contentType: \"text/plain\",\n    payloadMessage: string,\n    options?: coreHttp.OperationOptions\n  ): Promise<coreHttp.RestResponse>;\n  /**\n   * Send content inside request body to the specific connection.\n   * @param hub Target hub name, which should start with alphabetic characters and only contain\n   *            alpha-numeric characters or underscore.\n   * @param connectionId The connection Id.\n   * @param contentType Body Parameter content-type\n   * @param payloadMessage The payload body.\n   * @param options The options parameters.\n   */\n  sendToConnection(\n    hub: string,\n    connectionId: string,\n    contentType: \"application/json\",\n    payloadMessage: coreHttp.HttpRequestBody,\n    options?: coreHttp.OperationOptions\n  ): Promise<coreHttp.RestResponse>;\n  /**\n   * Send content inside request body to the specific connection.\n   * @param args Includes all the parameters for this operation.\n   */\n  sendToConnection(\n    ...args:\n      | [\n          string,\n          string,\n          \"application/octet-stream\",\n          coreHttp.HttpRequestBody,\n          coreHttp.OperationOptions?\n        ]\n      | [string, string, \"text/plain\", string, coreHttp.OperationOptions?]\n      | [\n          string,\n          string,\n          \"application/json\",\n          coreHttp.HttpRequestBody,\n          coreHttp.OperationOptions?\n        ]\n  ): Promise<coreHttp.RestResponse> {\n    let operationSpec: coreHttp.OperationSpec;\n    let operationArguments: coreHttp.OperationArguments;\n    if (args[2] === \"application/octet-stream\") {\n      operationSpec = sendToConnection$binaryOperationSpec;\n      operationArguments = {\n        hub: args[0],\n        connectionId: args[1],\n        contentType: args[2],\n        payloadMessage: args[3],\n        options: args[4]\n      };\n    } else if (args[2] === \"text/plain\") {\n      operationSpec = sendToConnection$textOperationSpec;\n      operationArguments = {\n        hub: args[0],\n        connectionId: args[1],\n        contentType: args[2],\n        payloadMessage: args[3],\n        options: args[4]\n      };\n    } else if (args[2] === \"application/json\") {\n      operationSpec = sendToConnection$jsonOperationSpec;\n      operationArguments = {\n        hub: args[0],\n        connectionId: args[1],\n        contentType: args[2],\n        payloadMessage: args[3],\n        options: args[4]\n      };\n    } else {\n      throw new TypeError(\n        `\"contentType\" must be a valid value but instead was \"${args[2]}\".`\n      );\n    }\n    return this.client.sendOperationRequest(\n      operationArguments,\n      operationSpec\n    ) as Promise<coreHttp.RestResponse>;\n  }\n\n  /**\n   * Check if there are any client connections inside the given group\n   * @param hub Target hub name, which should start with alphabetic characters and only contain\n   *            alpha-numeric characters or underscore.\n   * @param group Target group name, which length should be greater than 0 and less than 1025.\n   * @param options The options parameters.\n   */\n  checkGroupExistence(\n    hub: string,\n    group: string,\n    options?: coreHttp.OperationOptions\n  ): Promise<coreHttp.RestResponse> {\n    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(\n      options || {}\n    );\n    return this.client.sendOperationRequest(\n      { hub, group, options: operationOptions },\n      checkGroupExistenceOperationSpec\n    ) as Promise<coreHttp.RestResponse>;\n  }\n\n  /**\n   * Send content inside request body to a group of connections.\n   * @param hub Target hub name, which should start with alphabetic characters and only contain\n   *            alpha-numeric characters or underscore.\n   * @param group Target group name, which length should be greater than 0 and less than 1025.\n   * @param contentType Upload file type\n   * @param payloadMessage The payload body.\n   * @param options The options parameters.\n   */\n  sendToGroup(\n    hub: string,\n    group: string,\n    contentType: \"application/octet-stream\",\n    payloadMessage: coreHttp.HttpRequestBody,\n    options?: WebPubSubSendToGroup$binaryOptionalParams\n  ): Promise<coreHttp.RestResponse>;\n  /**\n   * Send content inside request body to a group of connections.\n   * @param hub Target hub name, which should start with alphabetic characters and only contain\n   *            alpha-numeric characters or underscore.\n   * @param group Target group name, which length should be greater than 0 and less than 1025.\n   * @param contentType Upload file type\n   * @param payloadMessage The payload body.\n   * @param options The options parameters.\n   */\n  sendToGroup(\n    hub: string,\n    group: string,\n    contentType: \"text/plain\",\n    payloadMessage: string,\n    options?: WebPubSubSendToGroup$textOptionalParams\n  ): Promise<coreHttp.RestResponse>;\n  /**\n   * Send content inside request body to a group of connections.\n   * @param hub Target hub name, which should start with alphabetic characters and only contain\n   *            alpha-numeric characters or underscore.\n   * @param group Target group name, which length should be greater than 0 and less than 1025.\n   * @param contentType Body Parameter content-type\n   * @param payloadMessage The payload body.\n   * @param options The options parameters.\n   */\n  sendToGroup(\n    hub: string,\n    group: string,\n    contentType: \"application/json\",\n    payloadMessage: coreHttp.HttpRequestBody,\n    options?: WebPubSubSendToGroup$jsonOptionalParams\n  ): Promise<coreHttp.RestResponse>;\n  /**\n   * Send content inside request body to a group of connections.\n   * @param args Includes all the parameters for this operation.\n   */\n  sendToGroup(\n    ...args:\n      | [\n          string,\n          string,\n          \"application/octet-stream\",\n          coreHttp.HttpRequestBody,\n          WebPubSubSendToGroup$binaryOptionalParams?\n        ]\n      | [\n          string,\n          string,\n          \"text/plain\",\n          string,\n          WebPubSubSendToGroup$textOptionalParams?\n        ]\n      | [\n          string,\n          string,\n          \"application/json\",\n          coreHttp.HttpRequestBody,\n          WebPubSubSendToGroup$jsonOptionalParams?\n        ]\n  ): Promise<coreHttp.RestResponse> {\n    let operationSpec: coreHttp.OperationSpec;\n    let operationArguments: coreHttp.OperationArguments;\n    if (args[2] === \"application/octet-stream\") {\n      operationSpec = sendToGroup$binaryOperationSpec;\n      operationArguments = {\n        hub: args[0],\n        group: args[1],\n        contentType: args[2],\n        payloadMessage: args[3],\n        options: args[4]\n      };\n    } else if (args[2] === \"text/plain\") {\n      operationSpec = sendToGroup$textOperationSpec;\n      operationArguments = {\n        hub: args[0],\n        group: args[1],\n        contentType: args[2],\n        payloadMessage: args[3],\n        options: args[4]\n      };\n    } else if (args[2] === \"application/json\") {\n      operationSpec = sendToGroup$jsonOperationSpec;\n      operationArguments = {\n        hub: args[0],\n        group: args[1],\n        contentType: args[2],\n        payloadMessage: args[3],\n        options: args[4]\n      };\n    } else {\n      throw new TypeError(\n        `\"contentType\" must be a valid value but instead was \"${args[2]}\".`\n      );\n    }\n    return this.client.sendOperationRequest(\n      operationArguments,\n      operationSpec\n    ) as Promise<coreHttp.RestResponse>;\n  }\n\n  /**\n   * Add a connection to the target group.\n   * @param hub Target hub name, which should start with alphabetic characters and only contain\n   *            alpha-numeric characters or underscore.\n   * @param group Target group name, which length should be greater than 0 and less than 1025.\n   * @param connectionId Target connection Id\n   * @param options The options parameters.\n   */\n  addConnectionToGroup(\n    hub: string,\n    group: string,\n    connectionId: string,\n    options?: coreHttp.OperationOptions\n  ): Promise<coreHttp.RestResponse> {\n    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(\n      options || {}\n    );\n    return this.client.sendOperationRequest(\n      { hub, group, connectionId, options: operationOptions },\n      addConnectionToGroupOperationSpec\n    ) as Promise<coreHttp.RestResponse>;\n  }\n\n  /**\n   * Remove a connection from the target group.\n   * @param hub Target hub name, which should start with alphabetic characters and only contain\n   *            alpha-numeric characters or underscore.\n   * @param group Target group name, which length should be greater than 0 and less than 1025.\n   * @param connectionId Target connection Id.\n   * @param options The options parameters.\n   */\n  removeConnectionFromGroup(\n    hub: string,\n    group: string,\n    connectionId: string,\n    options?: coreHttp.OperationOptions\n  ): Promise<coreHttp.RestResponse> {\n    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(\n      options || {}\n    );\n    return this.client.sendOperationRequest(\n      { hub, group, connectionId, options: operationOptions },\n      removeConnectionFromGroupOperationSpec\n    ) as Promise<coreHttp.RestResponse>;\n  }\n\n  /**\n   * Check if there are any client connections connected for the given user.\n   * @param hub Target hub name, which should start with alphabetic characters and only contain\n   *            alpha-numeric characters or underscore.\n   * @param userId Target user Id.\n   * @param options The options parameters.\n   */\n  checkUserExistence(\n    hub: string,\n    userId: string,\n    options?: coreHttp.OperationOptions\n  ): Promise<coreHttp.RestResponse> {\n    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(\n      options || {}\n    );\n    return this.client.sendOperationRequest(\n      { hub, userId, options: operationOptions },\n      checkUserExistenceOperationSpec\n    ) as Promise<coreHttp.RestResponse>;\n  }\n\n  /**\n   * Send content inside request body to the specific user.\n   * @param hub Target hub name, which should start with alphabetic characters and only contain\n   *            alpha-numeric characters or underscore.\n   * @param userId The user Id.\n   * @param contentType Upload file type\n   * @param payloadMessage The payload body.\n   * @param options The options parameters.\n   */\n  sendToUser(\n    hub: string,\n    userId: string,\n    contentType: \"application/octet-stream\",\n    payloadMessage: coreHttp.HttpRequestBody,\n    options?: coreHttp.OperationOptions\n  ): Promise<coreHttp.RestResponse>;\n  /**\n   * Send content inside request body to the specific user.\n   * @param hub Target hub name, which should start with alphabetic characters and only contain\n   *            alpha-numeric characters or underscore.\n   * @param userId The user Id.\n   * @param contentType Upload file type\n   * @param payloadMessage The payload body.\n   * @param options The options parameters.\n   */\n  sendToUser(\n    hub: string,\n    userId: string,\n    contentType: \"text/plain\",\n    payloadMessage: string,\n    options?: coreHttp.OperationOptions\n  ): Promise<coreHttp.RestResponse>;\n  /**\n   * Send content inside request body to the specific user.\n   * @param hub Target hub name, which should start with alphabetic characters and only contain\n   *            alpha-numeric characters or underscore.\n   * @param userId The user Id.\n   * @param contentType Body Parameter content-type\n   * @param payloadMessage The payload body.\n   * @param options The options parameters.\n   */\n  sendToUser(\n    hub: string,\n    userId: string,\n    contentType: \"application/json\",\n    payloadMessage: coreHttp.HttpRequestBody,\n    options?: coreHttp.OperationOptions\n  ): Promise<coreHttp.RestResponse>;\n  /**\n   * Send content inside request body to the specific user.\n   * @param args Includes all the parameters for this operation.\n   */\n  sendToUser(\n    ...args:\n      | [\n          string,\n          string,\n          \"application/octet-stream\",\n          coreHttp.HttpRequestBody,\n          coreHttp.OperationOptions?\n        ]\n      | [string, string, \"text/plain\", string, coreHttp.OperationOptions?]\n      | [\n          string,\n          string,\n          \"application/json\",\n          coreHttp.HttpRequestBody,\n          coreHttp.OperationOptions?\n        ]\n  ): Promise<coreHttp.RestResponse> {\n    let operationSpec: coreHttp.OperationSpec;\n    let operationArguments: coreHttp.OperationArguments;\n    if (args[2] === \"application/octet-stream\") {\n      operationSpec = sendToUser$binaryOperationSpec;\n      operationArguments = {\n        hub: args[0],\n        userId: args[1],\n        contentType: args[2],\n        payloadMessage: args[3],\n        options: args[4]\n      };\n    } else if (args[2] === \"text/plain\") {\n      operationSpec = sendToUser$textOperationSpec;\n      operationArguments = {\n        hub: args[0],\n        userId: args[1],\n        contentType: args[2],\n        payloadMessage: args[3],\n        options: args[4]\n      };\n    } else if (args[2] === \"application/json\") {\n      operationSpec = sendToUser$jsonOperationSpec;\n      operationArguments = {\n        hub: args[0],\n        userId: args[1],\n        contentType: args[2],\n        payloadMessage: args[3],\n        options: args[4]\n      };\n    } else {\n      throw new TypeError(\n        `\"contentType\" must be a valid value but instead was \"${args[2]}\".`\n      );\n    }\n    return this.client.sendOperationRequest(\n      operationArguments,\n      operationSpec\n    ) as Promise<coreHttp.RestResponse>;\n  }\n\n  /**\n   * Check whether a user exists in the target group.\n   * @param hub Target hub name, which should start with alphabetic characters and only contain\n   *            alpha-numeric characters or underscore.\n   * @param group Target group name, which length should be greater than 0 and less than 1025.\n   * @param userId Target user Id.\n   * @param options The options parameters.\n   */\n  checkUserExistenceInGroup(\n    hub: string,\n    group: string,\n    userId: string,\n    options?: coreHttp.OperationOptions\n  ): Promise<coreHttp.RestResponse> {\n    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(\n      options || {}\n    );\n    return this.client.sendOperationRequest(\n      { hub, group, userId, options: operationOptions },\n      checkUserExistenceInGroupOperationSpec\n    ) as Promise<coreHttp.RestResponse>;\n  }\n\n  /**\n   * Add a user to the target group.\n   * @param hub Target hub name, which should start with alphabetic characters and only contain\n   *            alpha-numeric characters or underscore.\n   * @param group Target group name, which length should be greater than 0 and less than 1025.\n   * @param userId Target user Id.\n   * @param options The options parameters.\n   */\n  addUserToGroup(\n    hub: string,\n    group: string,\n    userId: string,\n    options?: coreHttp.OperationOptions\n  ): Promise<coreHttp.RestResponse> {\n    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(\n      options || {}\n    );\n    return this.client.sendOperationRequest(\n      { hub, group, userId, options: operationOptions },\n      addUserToGroupOperationSpec\n    ) as Promise<coreHttp.RestResponse>;\n  }\n\n  /**\n   * Remove a user from the target group.\n   * @param hub Target hub name, which should start with alphabetic characters and only contain\n   *            alpha-numeric characters or underscore.\n   * @param group Target group name, which length should be greater than 0 and less than 1025.\n   * @param userId Target user Id.\n   * @param options The options parameters.\n   */\n  removeUserFromGroup(\n    hub: string,\n    group: string,\n    userId: string,\n    options?: coreHttp.OperationOptions\n  ): Promise<coreHttp.RestResponse> {\n    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(\n      options || {}\n    );\n    return this.client.sendOperationRequest(\n      { hub, group, userId, options: operationOptions },\n      removeUserFromGroupOperationSpec\n    ) as Promise<coreHttp.RestResponse>;\n  }\n\n  /**\n   * Remove a user from all groups.\n   * @param hub Target hub name, which should start with alphabetic characters and only contain\n   *            alpha-numeric characters or underscore.\n   * @param userId Target user Id.\n   * @param options The options parameters.\n   */\n  removeUserFromAllGroups(\n    hub: string,\n    userId: string,\n    options?: coreHttp.OperationOptions\n  ): Promise<coreHttp.RestResponse> {\n    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(\n      options || {}\n    );\n    return this.client.sendOperationRequest(\n      { hub, userId, options: operationOptions },\n      removeUserFromAllGroupsOperationSpec\n    ) as Promise<coreHttp.RestResponse>;\n  }\n\n  /**\n   * Grant permission to the connection.\n   * @param hub Target hub name, which should start with alphabetic characters and only contain\n   *            alpha-numeric characters or underscore.\n   * @param permission The permission: current supported actions are joinLeaveGroup and sendToGroup.\n   * @param connectionId Target connection Id.\n   * @param options The options parameters.\n   */\n  grantPermission(\n    hub: string,\n    permission: Enum0,\n    connectionId: string,\n    options?: WebPubSubGrantPermissionOptionalParams\n  ): Promise<coreHttp.RestResponse> {\n    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(\n      options || {}\n    );\n    return this.client.sendOperationRequest(\n      { hub, permission, connectionId, options: operationOptions },\n      grantPermissionOperationSpec\n    ) as Promise<coreHttp.RestResponse>;\n  }\n\n  /**\n   * Revoke permission for the connection.\n   * @param hub Target hub name, which should start with alphabetic characters and only contain\n   *            alpha-numeric characters or underscore.\n   * @param permission The permission: current supported actions are joinLeaveGroup and sendToGroup.\n   * @param connectionId Target connection Id.\n   * @param options The options parameters.\n   */\n  revokePermission(\n    hub: string,\n    permission: Enum1,\n    connectionId: string,\n    options?: WebPubSubRevokePermissionOptionalParams\n  ): Promise<coreHttp.RestResponse> {\n    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(\n      options || {}\n    );\n    return this.client.sendOperationRequest(\n      { hub, permission, connectionId, options: operationOptions },\n      revokePermissionOperationSpec\n    ) as Promise<coreHttp.RestResponse>;\n  }\n\n  /**\n   * Check if a connection have permission to the specific action.\n   * @param hub Target hub name, which should start with alphabetic characters and only contain\n   *            alpha-numeric characters or underscore.\n   * @param permission The permission: current supported actions are joinLeaveGroup and sendToGroup.\n   * @param connectionId Target connection Id.\n   * @param options The options parameters.\n   */\n  checkPermission(\n    hub: string,\n    permission: Enum2,\n    connectionId: string,\n    options?: WebPubSubCheckPermissionOptionalParams\n  ): Promise<coreHttp.RestResponse> {\n    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(\n      options || {}\n    );\n    return this.client.sendOperationRequest(\n      { hub, permission, connectionId, options: operationOptions },\n      checkPermissionOperationSpec\n    ) as Promise<coreHttp.RestResponse>;\n  }\n}\n// Operation Specifications\n\nconst serializer = new coreHttp.Serializer({}, /* isXml */ false);\n\nconst sendToAll$binaryOperationSpec: coreHttp.OperationSpec = {\n  path: \"/api/hubs/{hub}/:send\",\n  httpMethod: \"POST\",\n  responses: { 202: {}, default: {} },\n  requestBody: Parameters.payloadMessage,\n  queryParameters: [Parameters.apiVersion, Parameters.excluded],\n  urlParameters: [Parameters.$host, Parameters.hub],\n  headerParameters: [Parameters.contentType],\n  mediaType: \"binary\",\n  serializer\n};\nconst sendToAll$textOperationSpec: coreHttp.OperationSpec = {\n  path: \"/api/hubs/{hub}/:send\",\n  httpMethod: \"POST\",\n  responses: { 202: {}, default: {} },\n  requestBody: Parameters.payloadMessage1,\n  queryParameters: [Parameters.apiVersion, Parameters.excluded],\n  urlParameters: [Parameters.$host, Parameters.hub],\n  headerParameters: [Parameters.contentType1],\n  mediaType: \"text\",\n  serializer\n};\nconst sendToAll$jsonOperationSpec: coreHttp.OperationSpec = {\n  path: \"/api/hubs/{hub}/:send\",\n  httpMethod: \"POST\",\n  responses: { 202: {}, default: {} },\n  requestBody: Parameters.payloadMessage2,\n  queryParameters: [Parameters.apiVersion, Parameters.excluded],\n  urlParameters: [Parameters.$host, Parameters.hub],\n  headerParameters: [Parameters.contentType2],\n  mediaType: \"json\",\n  serializer\n};\nconst checkConnectionExistenceOperationSpec: coreHttp.OperationSpec = {\n  path: \"/api/hubs/{hub}/connections/{connectionId}\",\n  httpMethod: \"HEAD\",\n  responses: { 200: {}, 404: {}, default: {} },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.$host, Parameters.hub, Parameters.connectionId],\n  serializer\n};\nconst closeClientConnectionOperationSpec: coreHttp.OperationSpec = {\n  path: \"/api/hubs/{hub}/connections/{connectionId}\",\n  httpMethod: \"DELETE\",\n  responses: { 200: {}, default: {} },\n  queryParameters: [Parameters.apiVersion, Parameters.reason],\n  urlParameters: [Parameters.$host, Parameters.hub, Parameters.connectionId],\n  serializer\n};\nconst sendToConnection$binaryOperationSpec: coreHttp.OperationSpec = {\n  path: \"/api/hubs/{hub}/connections/{connectionId}/:send\",\n  httpMethod: \"POST\",\n  responses: { 202: {}, default: {} },\n  requestBody: Parameters.payloadMessage,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.$host, Parameters.hub, Parameters.connectionId],\n  headerParameters: [Parameters.contentType],\n  mediaType: \"binary\",\n  serializer\n};\nconst sendToConnection$textOperationSpec: coreHttp.OperationSpec = {\n  path: \"/api/hubs/{hub}/connections/{connectionId}/:send\",\n  httpMethod: \"POST\",\n  responses: { 202: {}, default: {} },\n  requestBody: Parameters.payloadMessage1,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.$host, Parameters.hub, Parameters.connectionId],\n  headerParameters: [Parameters.contentType1],\n  mediaType: \"text\",\n  serializer\n};\nconst sendToConnection$jsonOperationSpec: coreHttp.OperationSpec = {\n  path: \"/api/hubs/{hub}/connections/{connectionId}/:send\",\n  httpMethod: \"POST\",\n  responses: { 202: {}, default: {} },\n  requestBody: Parameters.payloadMessage2,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.$host, Parameters.hub, Parameters.connectionId],\n  headerParameters: [Parameters.contentType2],\n  mediaType: \"json\",\n  serializer\n};\nconst checkGroupExistenceOperationSpec: coreHttp.OperationSpec = {\n  path: \"/api/hubs/{hub}/groups/{group}\",\n  httpMethod: \"HEAD\",\n  responses: { 200: {}, 404: {}, default: {} },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.$host, Parameters.hub, Parameters.group],\n  serializer\n};\nconst sendToGroup$binaryOperationSpec: coreHttp.OperationSpec = {\n  path: \"/api/hubs/{hub}/groups/{group}/:send\",\n  httpMethod: \"POST\",\n  responses: { 202: {}, default: {} },\n  requestBody: Parameters.payloadMessage,\n  queryParameters: [Parameters.apiVersion, Parameters.excluded],\n  urlParameters: [Parameters.$host, Parameters.hub, Parameters.group],\n  headerParameters: [Parameters.contentType],\n  mediaType: \"binary\",\n  serializer\n};\nconst sendToGroup$textOperationSpec: coreHttp.OperationSpec = {\n  path: \"/api/hubs/{hub}/groups/{group}/:send\",\n  httpMethod: \"POST\",\n  responses: { 202: {}, default: {} },\n  requestBody: Parameters.payloadMessage1,\n  queryParameters: [Parameters.apiVersion, Parameters.excluded],\n  urlParameters: [Parameters.$host, Parameters.hub, Parameters.group],\n  headerParameters: [Parameters.contentType1],\n  mediaType: \"text\",\n  serializer\n};\nconst sendToGroup$jsonOperationSpec: coreHttp.OperationSpec = {\n  path: \"/api/hubs/{hub}/groups/{group}/:send\",\n  httpMethod: \"POST\",\n  responses: { 202: {}, default: {} },\n  requestBody: Parameters.payloadMessage2,\n  queryParameters: [Parameters.apiVersion, Parameters.excluded],\n  urlParameters: [Parameters.$host, Parameters.hub, Parameters.group],\n  headerParameters: [Parameters.contentType2],\n  mediaType: \"json\",\n  serializer\n};\nconst addConnectionToGroupOperationSpec: coreHttp.OperationSpec = {\n  path: \"/api/hubs/{hub}/groups/{group}/connections/{connectionId}\",\n  httpMethod: \"PUT\",\n  responses: { 200: {}, 404: {}, default: {} },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.hub,\n    Parameters.connectionId,\n    Parameters.group\n  ],\n  serializer\n};\nconst removeConnectionFromGroupOperationSpec: coreHttp.OperationSpec = {\n  path: \"/api/hubs/{hub}/groups/{group}/connections/{connectionId}\",\n  httpMethod: \"DELETE\",\n  responses: { 200: {}, 404: {}, default: {} },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.hub,\n    Parameters.connectionId,\n    Parameters.group\n  ],\n  serializer\n};\nconst checkUserExistenceOperationSpec: coreHttp.OperationSpec = {\n  path: \"/api/hubs/{hub}/users/{userId}\",\n  httpMethod: \"HEAD\",\n  responses: { 200: {}, 404: {}, default: {} },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.$host, Parameters.hub, Parameters.userId],\n  serializer\n};\nconst sendToUser$binaryOperationSpec: coreHttp.OperationSpec = {\n  path: \"/api/hubs/{hub}/users/{userId}/:send\",\n  httpMethod: \"POST\",\n  responses: { 202: {}, default: {} },\n  requestBody: Parameters.payloadMessage,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.$host, Parameters.hub, Parameters.userId],\n  headerParameters: [Parameters.contentType],\n  mediaType: \"binary\",\n  serializer\n};\nconst sendToUser$textOperationSpec: coreHttp.OperationSpec = {\n  path: \"/api/hubs/{hub}/users/{userId}/:send\",\n  httpMethod: \"POST\",\n  responses: { 202: {}, default: {} },\n  requestBody: Parameters.payloadMessage1,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.$host, Parameters.hub, Parameters.userId],\n  headerParameters: [Parameters.contentType1],\n  mediaType: \"text\",\n  serializer\n};\nconst sendToUser$jsonOperationSpec: coreHttp.OperationSpec = {\n  path: \"/api/hubs/{hub}/users/{userId}/:send\",\n  httpMethod: \"POST\",\n  responses: { 202: {}, default: {} },\n  requestBody: Parameters.payloadMessage2,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.$host, Parameters.hub, Parameters.userId],\n  headerParameters: [Parameters.contentType2],\n  mediaType: \"json\",\n  serializer\n};\nconst checkUserExistenceInGroupOperationSpec: coreHttp.OperationSpec = {\n  path: \"/api/hubs/{hub}/users/{userId}/groups/{group}\",\n  httpMethod: \"HEAD\",\n  responses: { 200: {}, 404: {}, default: {} },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.hub,\n    Parameters.group,\n    Parameters.userId\n  ],\n  serializer\n};\nconst addUserToGroupOperationSpec: coreHttp.OperationSpec = {\n  path: \"/api/hubs/{hub}/users/{userId}/groups/{group}\",\n  httpMethod: \"PUT\",\n  responses: { 200: {}, default: {} },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.hub,\n    Parameters.group,\n    Parameters.userId\n  ],\n  serializer\n};\nconst removeUserFromGroupOperationSpec: coreHttp.OperationSpec = {\n  path: \"/api/hubs/{hub}/users/{userId}/groups/{group}\",\n  httpMethod: \"DELETE\",\n  responses: { 200: {}, default: {} },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.hub,\n    Parameters.group,\n    Parameters.userId\n  ],\n  serializer\n};\nconst removeUserFromAllGroupsOperationSpec: coreHttp.OperationSpec = {\n  path: \"/api/hubs/{hub}/users/{userId}/groups\",\n  httpMethod: \"DELETE\",\n  responses: { 200: {}, default: {} },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.$host, Parameters.hub, Parameters.userId],\n  serializer\n};\nconst grantPermissionOperationSpec: coreHttp.OperationSpec = {\n  path: \"/api/hubs/{hub}/permissions/{permission}/connections/{connectionId}\",\n  httpMethod: \"PUT\",\n  responses: { 200: {}, default: {} },\n  queryParameters: [Parameters.apiVersion, Parameters.targetName],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.hub,\n    Parameters.connectionId,\n    Parameters.permission\n  ],\n  serializer\n};\nconst revokePermissionOperationSpec: coreHttp.OperationSpec = {\n  path: \"/api/hubs/{hub}/permissions/{permission}/connections/{connectionId}\",\n  httpMethod: \"DELETE\",\n  responses: { 200: {}, default: {} },\n  queryParameters: [Parameters.apiVersion, Parameters.targetName],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.hub,\n    Parameters.connectionId,\n    Parameters.permission1\n  ],\n  serializer\n};\nconst checkPermissionOperationSpec: coreHttp.OperationSpec = {\n  path: \"/api/hubs/{hub}/permissions/{permission}/connections/{connectionId}\",\n  httpMethod: \"HEAD\",\n  responses: { 200: {}, 404: {}, default: {} },\n  queryParameters: [Parameters.apiVersion, Parameters.targetName],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.hub,\n    Parameters.connectionId,\n    Parameters.permission2\n  ],\n  serializer\n};\n","import * as coreHttp from \"@azure/core-http\";\nimport { WebPubSubServiceClientOptionalParams } from \"./models\";\n\nconst packageName = \"@azure/webpubsub\";\nconst packageVersion = \"1.0.0\";\n\nexport class WebPubSubServiceClientContext extends coreHttp.ServiceClient {\n  $host: string;\n  apiVersion?: string;\n\n  /**\n   * Initializes a new instance of the WebPubSubServiceClientContext class.\n   * @param credentials Subscription credentials which uniquely identify client subscription.\n   * @param $host server parameter\n   * @param options The parameter options\n   */\n  constructor(\n    credentials: coreHttp.TokenCredential | coreHttp.ServiceClientCredentials,\n    $host: string,\n    options?: WebPubSubServiceClientOptionalParams\n  ) {\n    if (credentials === undefined) {\n      throw new Error(\"'credentials' cannot be null\");\n    }\n    if ($host === undefined) {\n      throw new Error(\"'$host' cannot be null\");\n    }\n\n    // Initializing default values for options\n    if (!options) {\n      options = {};\n    }\n\n    if (!options.userAgent) {\n      const defaultUserAgent = coreHttp.getDefaultUserAgentValue();\n      options.userAgent = `${packageName}/${packageVersion} ${defaultUserAgent}`;\n    }\n\n    super(credentials, options);\n\n    this.requestContentType = \"application/json; charset=utf-8\";\n\n    this.baseUri = options.endpoint || \"{$host}\";\n\n    // Parameter assignments\n    this.$host = $host;\n\n    // Assigning values to Constant parameters\n    this.apiVersion = options.apiVersion || \"2020-10-01\";\n  }\n}\n","/*\r\n * Code generated by Microsoft (R) AutoRest Code Generator.\r\n * Changes may cause incorrect behavior and will be lost if the code is\r\n * regenerated.\r\n */\r\n\r\nimport * as msRest from \"@azure/ms-rest-js\";\r\nimport * as Models from \"./models\";\r\nimport * as Mappers from \"./models/mappers\";\r\nimport * as operations from \"./operations\";\r\nimport { WebPubSubServiceClientContext } from \"./webPubSubServiceClientContext\";\r\n\r\nimport * as coreHttp from \"@azure/core-http\";\r\n\r\nclass WebPubSubServiceClient extends WebPubSubServiceClientContext {\r\n  // Operation groups\r\n  healthApi: operations.HealthApi;\r\n  webPubSubApi: operations.WebPubSub;\r\n\r\n  /**\r\n   * Initializes a new instance of the WebPubSubServiceClient class.\r\n   * @param credentials Credentials needed for the client to connect to Azure.\r\n   * @param [options] The parameter options\r\n   */\r\n  constructor(credentials: coreHttp.ServiceClientCredentials, host: string, options?: Models.WebPubSubServiceClientOptionalParams) {\r\n    super(credentials, host, options);\r\n    this.healthApi = new operations.HealthApi(this);\r\n    this.webPubSubApi = new operations.WebPubSub(this);\r\n  }\r\n}\r\n\r\n// Operation Specifications\r\n\r\nexport {\r\n  WebPubSubServiceClient,\r\n  WebPubSubServiceClientContext,\r\n  Models as WebPubSubServiceModels,\r\n  Mappers as WebPubSubServiceMappers\r\n};\r\nexport * from \"./operations\";\r\n","// Copyright (c) Microsoft Corporation.\r\n// Licensed under the MIT license.\r\n\r\nimport jwt from \"jsonwebtoken\";\r\nimport * as coreHttp from \"@azure/core-http\";\r\n\r\nexport class WebPubSubKeyCredentials implements coreHttp.ServiceClientCredentials {\r\n  /**\r\n   * Creates a new TokenCredentials object.\r\n   *\r\n   * @constructor\r\n   * @param {string} key The key.\r\n   */\r\n  constructor(public key: string) {\r\n    if (!key) {\r\n      throw new Error(\"token cannot be null or undefined.\");\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Signs a request with the Authentication header.\r\n   *\r\n   * @param {WebResourceLike} webResource The WebResourceLike to be signed.\r\n   * @return {Promise<WebResourceLike>} The signed request object.\r\n   */\r\n  signRequest(webResource: coreHttp.WebResourceLike) {\r\n    if (!webResource.headers) webResource.headers = new coreHttp.HttpHeaders();\r\n    var url = new URL(webResource.url + webResource.query ?? '');\r\n    url.port = '';\r\n    const audience = url.toString();\r\n    webResource.headers.set(\r\n      \"Authorization\",\r\n      \"Bearer \" +\r\n        jwt.sign({}, this.key, {\r\n          audience: audience,\r\n          expiresIn: \"1h\",\r\n          algorithm: \"HS256\"\r\n        })\r\n    );\r\n    return Promise.resolve(webResource);\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation.\r\n// Licensed under the MIT license.\r\n\r\nimport jwt from \"jsonwebtoken\";\r\nimport { URL } from \"url\";\r\n\r\nexport interface NegotiateResponse {\r\n  url: string;\r\n  token: string;\r\n}\r\n\r\ninterface ServiceEndpoint {\r\n  serviceUrl: URL;\r\n  websocketHost: string;\r\n  audience: string;\r\n  key: string;\r\n}\r\n\r\ninterface NegotiateOptions {\r\n  userId?: string;\r\n  claims?: { [key: string]: string[] };\r\n}\r\n\r\nexport class WebPubSubServiceEndpoint {\r\n  endpoint: ServiceEndpoint;\r\n\r\n  /**\r\n   * Creates a new WebPubSubServiceEndpoint object.\r\n   *\r\n   * @constructor\r\n   * @param {string} conn The Connection String.\r\n   * @param {string} hub The Hub\r\n   */\r\n  constructor(conn: string) {\r\n    this.endpoint = this.getServiceEndpoint(conn);\r\n  }\r\n\r\n  clientNegotiate(hub: string, options?: NegotiateOptions): NegotiateResponse {\r\n    var clientUrl = `${this.endpoint.websocketHost}client/hubs/${hub}`;\r\n    const audience = `${this.endpoint.audience}client/hubs/${hub}`;\r\n    var key = this.endpoint.key;\r\n    var payload = options?.claims ?? {};\r\n    var signOptions: jwt.SignOptions = {\r\n      audience: audience,\r\n      expiresIn: \"1h\",\r\n      algorithm: \"HS256\",\r\n    };\r\n    if (options?.userId) {\r\n      signOptions.subject = options?.userId;\r\n    }\r\n\r\n    return {\r\n      url: clientUrl,\r\n      token: jwt.sign(payload, key, signOptions),\r\n    };\r\n  }\r\n\r\n  private getServiceEndpoint(conn: string): ServiceEndpoint {\r\n    var endpoint = this.parseConnectionString(conn);\r\n\r\n    if (!endpoint) {\r\n      throw new Error(\"Invalid connection string: \" + conn);\r\n    }\r\n\r\n    return endpoint as ServiceEndpoint;\r\n  }\r\n\r\n  private parseConnectionString(conn: string): ServiceEndpoint | null {\r\n    const em = /Endpoint=(.*?)(;|$)/g.exec(conn);\r\n    if (!em) return null;\r\n    const endpoint = em[1];\r\n    const km = /AccessKey=(.*?)(;|$)/g.exec(conn);\r\n    if (!km) return null;\r\n    const key = km[1];\r\n    if (!endpoint || !key) return null;\r\n    const pm = /Port=(.*?)(;|$)/g.exec(conn);\r\n    const port = pm == null ? '' : pm[1];\r\n    var url = new URL(endpoint);\r\n    var originalProtocol = url.protocol;\r\n    url.protocol = originalProtocol === 'http:' ? 'ws:' : 'wss:';\r\n    const audience = url.toString();\r\n    url.port = port;\r\n    var websocketHost = url.toString();\r\n    url.protocol = originalProtocol;\r\n    return {\r\n      websocketHost: websocketHost, \r\n      serviceUrl: url,\r\n      audience: audience,\r\n      key: key,\r\n    };\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation.\r\n// Licensed under the MIT license.\r\n\r\nimport { WebPubSub, WebPubSubServiceClient as GeneratedClient } from \"./generated/webPubSubServiceClient\";\r\nimport { WebPubSubKeyCredentials } from \"./webPubSubKeyCredentials\";\r\nimport { WebPubSubServiceEndpoint } from \"./webPubSubServiceEndpoint\";\r\nimport jwt from \"jsonwebtoken\";\r\nimport {ServiceClientCredentials, RestError, RestResponse, HttpRequestBody, HttpPipelineLogLevel, HttpPipelineLogger, RequestPolicyFactory, logPolicy } from \"@azure/core-http\";\r\n\r\n/**\r\n * Options for auth a client\r\n */\r\nexport interface GetAuthenticationTokenOptions {\r\n  /**\r\n   * The userId for the client\r\n   */\r\n  userId?: string;\r\n  /**\r\n   * The custom claims for the client, e.g. role\r\n   */\r\n  claims?: { [key: string]: string[] };\r\n}\r\n\r\n/**\r\n * Response for the authed client, including the url and the jwt token\r\n */\r\nexport interface GetAuthenticationTokenResponse {\r\n  /**\r\n   * The URL client connects to\r\n   */\r\n  baseUrl: string;\r\n\r\n  /**\r\n   * The JWT token the client uses to connect\r\n   */\r\n  token: string;\r\n\r\n  /**\r\n   * The URL client connects to with access_token query string\r\n   */\r\n  url: string;\r\n}\r\n\r\nexport interface OperationOptions {\r\n  apiVersion?: string;\r\n}\r\n\r\n/**\r\n * Options for closing a connection to a hub.\r\n */\r\nexport interface CloseConnectionOptions extends OperationOptions {\r\n  /**\r\n   * Reason the connection is being closed.\r\n   */\r\n  reason?: string;\r\n}\r\n\r\nexport interface ClientAuthOptions {\r\n  userId?: string;\r\n  claims?: { [key: string]: string[] };\r\n}\r\n\r\nexport interface ClientAuthResponse {\r\n  url: string;\r\n  token: string;\r\n}\r\n\r\n/**\r\n * Options for sending messages to hubs, groups, users, or connections.\r\n */\r\nexport interface HubBroadcastOptions extends OperationOptions {\r\n  /**\r\n   * Connection ids to exclude from receiving this message.\r\n   */\r\n  excludedConnections?: string[];\r\n}\r\n\r\nexport interface WebPubSubServiceRestClientOptions {\r\n  dumpRequest?: boolean;\r\n}\r\n\r\nexport class ConsoleHttpPipelineLogger implements HttpPipelineLogger {\r\n  /**\r\n   * Create a new ConsoleHttpPipelineLogger.\r\n   * @param minimumLogLevel The log level threshold for what logs will be logged.\r\n   */\r\n  constructor(public minimumLogLevel: HttpPipelineLogLevel) {\r\n  }\r\n\r\n  /**\r\n   * Log the provided message.\r\n   * @param logLevel The HttpLogDetailLevel associated with this message.\r\n   * @param message The message to log.\r\n   */\r\n  log(logLevel: HttpPipelineLogLevel, message: string): void {\r\n    const logMessage = `${HttpPipelineLogLevel[logLevel]}: ${message}`;\r\n    switch (logLevel) {\r\n      case HttpPipelineLogLevel.ERROR:\r\n        console.error(logMessage);\r\n        break;\r\n\r\n      case HttpPipelineLogLevel.WARNING:\r\n        console.warn(logMessage);\r\n        break;\r\n\r\n      case HttpPipelineLogLevel.INFO:\r\n        console.log(logMessage);\r\n        break;\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Client for connecting to a SignalR hub\r\n */\r\nexport class WebPubSubServiceRestClient {\r\n  private readonly client: GeneratedClient;\r\n  private readonly sender: WebPubSub;\r\n  private credential!: WebPubSubKeyCredentials;\r\n\r\n  /**\r\n   * The name of the hub this client is connected to\r\n   */\r\n  public readonly hub: string;\r\n\r\n  /**\r\n   * The SignalR API version being used by this client\r\n   */\r\n  public readonly apiVersion: string = \"2020-10-01\";\r\n\r\n  /**\r\n   * The endpoint this client is connected to\r\n   */\r\n  public serviceUrl!: URL;\r\n\r\n  private _endpoint: WebPubSubServiceEndpoint;\r\n\r\n  private _servicePath: string;\r\n  constructor(connectionStringOrEndpoint: string | WebPubSubServiceEndpoint, hub: string, options?: WebPubSubServiceRestClientOptions) {\r\n    if (typeof connectionStringOrEndpoint === 'string'){\r\n      this._endpoint = new WebPubSubServiceEndpoint(connectionStringOrEndpoint);\r\n    } else {\r\n      this._endpoint = connectionStringOrEndpoint;\r\n    }\r\n    this.hub = hub;\r\n    this.serviceUrl = this._endpoint.endpoint.serviceUrl;\r\n    this.credential = new WebPubSubKeyCredentials(this._endpoint.endpoint.key);\r\n    this.client = new GeneratedClient(this.credential, this._endpoint.endpoint.serviceUrl.href, {\r\n      //httpPipelineLogger: options?.dumpRequest ? new ConsoleHttpPipelineLogger(HttpPipelineLogLevel.INFO) : undefined,\r\n      requestPolicyFactories: options?.dumpRequest ? this.getFactoryWithLogPolicy : undefined,\r\n    });\r\n    this.sender = new WebPubSub(this.client);\r\n    this._servicePath = this.serviceUrl.toString();\r\n  }\r\n  \r\n  /**\r\n   * Auth the client connection with userId and custom claims if any\r\n   * @param options The options that the client has\r\n   */\r\n  public async getAuthenticationToken(\r\n    options?: GetAuthenticationTokenOptions\r\n  ): Promise<GetAuthenticationTokenResponse> {\r\n    const endpoint = this._servicePath.endsWith(\"/\") ? this._servicePath : this._servicePath + \"/\";\r\n    const key = this.credential.key;\r\n    const hub = this.hub;\r\n    var clientEndpoint = endpoint.replace(/(http)(s?:\\/\\/)/gi, \"ws$2\");\r\n    var clientUrl = `${clientEndpoint}client/hubs/${hub}`;\r\n    const audience = `${endpoint}client/hubs/${hub}`;\r\n    var payload = options?.claims ?? {};\r\n    var signOptions: jwt.SignOptions = {\r\n      audience: audience,\r\n      expiresIn: \"1h\",\r\n      algorithm: \"HS256\"\r\n    };\r\n    if (options?.userId) {\r\n      signOptions.subject = options?.userId;\r\n    }\r\n    const token = jwt.sign(payload, key, signOptions);\r\n    const url = `${clientUrl}?access_token=${token}`;\r\n    return {\r\n      baseUrl: clientUrl,\r\n      token: jwt.sign(payload, key, signOptions),\r\n      url: url\r\n    };\r\n  }\r\n\r\n\r\n  private getFactoryWithLogPolicy(defaultRequestPolicyFactories: RequestPolicyFactory[]): void {\r\n    logPolicy\r\n    defaultRequestPolicyFactories.push(logPolicy());\r\n  }\r\n\r\n  /**\r\n   * Check if the service is healthy\r\n   *\r\n   * @param options Additional options\r\n   */\r\n  public async serviceIsHealthy(options: OperationOptions = {}): Promise<boolean> {\r\n    try {\r\n      await this.client.healthApi.getHealthStatus({\r\n      });\r\n      return true;\r\n    } catch {\r\n      return false;\r\n    } finally {\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Broadcast a text message to all connections on this hub.\r\n   *\r\n   * @param message The message to send\r\n   * @param options Additional options\r\n   */\r\n  public async sendToAll(message: string, options?: HubBroadcastOptions): Promise<boolean>;\r\n  /**\r\n   * Broadcast a binary message to all connections on this hub.\r\n   *\r\n   * @param message The message to send\r\n   * @param options Additional options\r\n   */\r\n  public async sendToAll(\r\n    message: Blob | ArrayBuffer | ArrayBufferView,\r\n    options?: HubBroadcastOptions\r\n  ): Promise<boolean>;\r\n\r\n  public async sendToAll(\r\n    message: string | HttpRequestBody,\r\n    options: HubBroadcastOptions = {}\r\n  ): Promise<boolean> {\r\n    try {\r\n      var res = await this.sender.sendToAll(this.hub,\"application/octet-stream\", message, {\r\n        excluded: options.excludedConnections\r\n      });\r\n      return this.verifyResponse(res, 202);\r\n    } finally {\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Send a text message to a specific user\r\n   *\r\n   * @param username User name to send to\r\n   * @param message The message to send\r\n   * @param options Additional options\r\n   */\r\n  public sendToUser(\r\n    username: string,\r\n    message: string,\r\n    options?: OperationOptions\r\n  ): Promise<boolean>;\r\n\r\n  /**\r\n   * Send a binary message to a specific user\r\n   *\r\n   * @param username The user name to send to\r\n   * @param message The binary message to send\r\n   * @param options Additional options\r\n   */\r\n  public sendToUser(\r\n    username: string,\r\n    message: HttpRequestBody,\r\n    options?: OperationOptions\r\n  ): Promise<boolean>;\r\n  public async sendToUser(\r\n    username: string,\r\n    message: string | HttpRequestBody,\r\n    options: OperationOptions = {}\r\n  ): Promise<boolean> {\r\n    try {\r\n      var res = await this.sender.sendToUser(this.hub, username,\"application/octet-stream\", message, {\r\n      });\r\n      return this.verifyResponse(res, 202);\r\n    } finally {\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Send a text message to a specific connection\r\n   *\r\n   * @param connectionId Connection id to send to\r\n   * @param message The text message\r\n   * @param options Additional options\r\n   */\r\n  public sendToConnection(\r\n    connectionId: string,\r\n    message: string,\r\n    options?: OperationOptions\r\n  ): Promise<boolean>;\r\n  /**\r\n   * Send a binary message to a specific connection\r\n   *\r\n   * @param connectionId Connection id to send to\r\n   * @param message The binary message\r\n   * @param options Additional options\r\n   */\r\n  public sendToConnection(\r\n    connectionId: string,\r\n    message: HttpRequestBody,\r\n    options?: OperationOptions\r\n  ): Promise<boolean>;\r\n  public async sendToConnection(\r\n    connectionId: string,\r\n    message: string | HttpRequestBody,\r\n    options: OperationOptions = {}\r\n  ): Promise<boolean> {\r\n    try {\r\n      var res = await this.sender.sendToConnection(this.hub, connectionId,\"application/octet-stream\", message, {\r\n      });\r\n      return this.verifyResponse(res, 202);\r\n    } finally {\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Check if a specific connection is connected to this hub\r\n   *\r\n   * @param connectionId Connection id to check\r\n   * @param options Additional options\r\n   */\r\n  public async hasConnection(\r\n    connectionId: string,\r\n    options: OperationOptions = {}\r\n  ): Promise<boolean> {\r\n    try {\r\n      const res = await this.client.webPubSubApi.checkConnectionExistence(this.hub,\r\n        connectionId,\r\n        {\r\n        }\r\n      );\r\n      return this.verifyResponse(res, 200, 404);\r\n    } finally {\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Close a specific connection to this hub\r\n   *\r\n   * @param connectionId Connection id to close\r\n   * @param options Additional options\r\n   */\r\n  public async closeConnection(\r\n    connectionId: string,\r\n    options: CloseConnectionOptions = {}\r\n  ): Promise<boolean> {\r\n    try {\r\n      var res = await this.client.webPubSubApi.closeClientConnection(this.hub,\r\n        connectionId,\r\n        {\r\n          reason: options.reason\r\n        }\r\n      );\r\n      return this.verifyResponse(res, 200);\r\n    } finally {\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Remove a specific user from all groups they are joined to\r\n   * @param userId The user id to remove from all groups\r\n   * @param options Additional options\r\n   */\r\n  public async removeUserFromAllGroups(\r\n    userId: string,\r\n    options: CloseConnectionOptions = {}\r\n  ): Promise<boolean> {\r\n    try {\r\n      var res = await this.client.webPubSubApi.removeUserFromAllGroups(this.hub,\r\n        userId,\r\n        {\r\n        }\r\n      );\r\n\r\n      return this.verifyResponse(res, 202);\r\n\r\n    } finally {\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Check if a particular group exists (i.e. has active connections).\r\n   *\r\n   * @param groupName The group name to check for\r\n   * @param options Additional options\r\n   */\r\n  public async hasGroup(groupName: string, options: OperationOptions = {}): Promise<boolean> {\r\n    try {\r\n      const res = await this.client.webPubSubApi.checkGroupExistence(this.hub,\r\n        groupName,\r\n        {\r\n        }\r\n      );\r\n      return this.verifyResponse(res, 200, 404);\r\n\r\n    } finally {\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Check if a particular user is connected to this hub.\r\n   *\r\n   * @param username The user name to check for\r\n   * @param options Additional options\r\n   */\r\n  public async hasUser(username: string, options: OperationOptions = {}): Promise<boolean> {\r\n    try {\r\n      const res = await this.client.webPubSubApi.checkUserExistence(this.hub,\r\n        username,\r\n        {\r\n        }\r\n      );\r\n      return this.verifyResponse(res, 200, 404);\r\n    } finally {\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Add a specific connection to this group\r\n   *\r\n   * @param connectionId The connection id to add to this group\r\n   * @param options Additional options\r\n   */\r\n  public async addConnectionToGroup(groupName: string,\r\n    connectionId: string,\r\n    options: OperationOptions = {}\r\n  ): Promise<boolean> {\r\n    try {\r\n      const res = await this.client.webPubSubApi.addConnectionToGroup(this.hub,\r\n        groupName, connectionId,\r\n        {\r\n        }\r\n      );\r\n      return this.verifyResponse(res, 202);\r\n    } finally {\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Remove a specific connection from this group\r\n   *\r\n   * @param connectionId The connection id to remove from this group\r\n   * @param options Additional options\r\n   */\r\n  public async removeConnectionFromGroup(groupName: string,\r\n    connectionId: string,\r\n    options: OperationOptions = {}\r\n  ): Promise<boolean> {\r\n    try {\r\n      const res = await this.client.webPubSubApi.removeConnectionFromGroup(this.hub,\r\n        groupName, connectionId,\r\n        {\r\n        }\r\n      );\r\n      return this.verifyResponse(res, 202);\r\n\r\n    } finally {\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Add a user to this group\r\n   *\r\n   * @param username The user name to add\r\n   * @param options Additional options\r\n   */\r\n  public async addUserToGroup(groupName: string, username: string, options: OperationOptions = {}): Promise<boolean> {\r\n    try {\r\n      var res = await this.client.webPubSubApi.addUserToGroup(this.hub,\r\n        groupName,\r\n        username,\r\n        {\r\n        }\r\n      );\r\n\r\n      return this.verifyResponse(res, 202);\r\n    } finally {\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Check if a user is in this group\r\n   *\r\n   * @param groupName The group name to check for\r\n   * @param username The user name to check for\r\n   * @param options Additional options\r\n   */\r\n  public async hasUserInGroup(groupName: string, username: string, options: OperationOptions = {}): Promise<boolean> {\r\n\r\n    try {\r\n      const res = await this.client.webPubSubApi.checkUserExistenceInGroup(this.hub,\r\n        groupName,\r\n        username,\r\n\r\n        {\r\n        }\r\n      );\r\n      return this.verifyResponse(res, 200, 404);\r\n\r\n    } finally {\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Remove a user from this group\r\n   *\r\n   * @param groupName The group name to check for\r\n   * @param username The user name to remove\r\n   * @param options Additional options\r\n   */\r\n  public async removeUserFromGroup(groupName: string, username: string, options: OperationOptions = {}): Promise<boolean> {\r\n\r\n    try {\r\n      var res = await this.client.webPubSubApi.removeUserFromGroup(this.hub,\r\n        groupName,\r\n        username,\r\n        {\r\n        }\r\n      );\r\n\r\n      // FOR now it is still 202, we are changing the service to support 200 soon\r\n      return this.verifyResponse(res, 200, 404);\r\n    } finally {\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Send a text message to every connection in this group\r\n   *\r\n   * @param groupName The group name to check for\r\n   * @param message The message to send\r\n   * @param options Additional options\r\n   */\r\n  public async publish(groupName: string, message: string, options?: HubBroadcastOptions): Promise<boolean>;\r\n\r\n  /**\r\n   * Send a binary message to every connection in this group\r\n   *\r\n   * @param groupName The group name to check for\r\n   * @param message The binary message to send\r\n   * @param options Additional options\r\n   */\r\n  public async publish(groupName: string,\r\n    message: HttpRequestBody,\r\n    options?: HubBroadcastOptions\r\n  ): Promise<boolean>;\r\n  public async publish(groupName: string,\r\n    message: string | HttpRequestBody,\r\n    options: HubBroadcastOptions = {}\r\n  ): Promise<boolean> {\r\n\r\n    try {\r\n      var res = await this.sender.sendToGroup(\r\n        this.hub,\r\n        groupName,\r\n        \"application/octet-stream\",\r\n        message,\r\n        {\r\n          excluded: options.excludedConnections\r\n        }\r\n      );\r\n      return this.verifyResponse(res, 200);\r\n    } finally {\r\n    }\r\n  }\r\n\r\n  private verifyResponse(res: RestResponse, successStatus?: number, failureStatus?: number): boolean {\r\n    if (successStatus !== undefined && res._response.status === successStatus) {\r\n      return true;\r\n    }\r\n\r\n    if (failureStatus !== undefined && res._response.status === failureStatus) {\r\n      return false;\r\n    }\r\n\r\n    else {\r\n      // this is sad - wish this was handled by autorest.\r\n      throw new RestError(\r\n        res._response.bodyAsText!,\r\n        undefined,\r\n        res._response.status,\r\n        res._response.request,\r\n        res._response\r\n      );\r\n    }\r\n  }\r\n}\r\n"],"names":["ErrorCode","PayloadDataType","HTTP","URL","QueryCollectionFormat","coreHttp.operationOptionsToRequestOptionsBase","coreHttp.Serializer","Parameters.apiVersion","Parameters.$host","serializer","Parameters.payloadMessage","Parameters.excluded","Parameters.hub","Parameters.contentType","Parameters.payloadMessage1","Parameters.contentType1","Parameters.payloadMessage2","Parameters.contentType2","Parameters.connectionId","Parameters.reason","Parameters.group","Parameters.userId","Parameters.targetName","Parameters.permission","Parameters.permission1","Parameters.permission2","coreHttp.ServiceClient","coreHttp.getDefaultUserAgentValue","operations.HealthApi","operations.WebPubSub","coreHttp.HttpHeaders","url","HttpPipelineLogLevel","GeneratedClient","logPolicy","RestError"],"mappings":";;;;;;;;;;;;;IAAA;IACA;AACA;IACA;IACA;AACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;AAqDA;IACO,SAAS,SAAS,CAAC,OAAO,EAAE,UAAU,EAAE,CAAC,EAAE,SAAS,EAAE;IAC7D,IAAI,SAAS,KAAK,CAAC,KAAK,EAAE,EAAE,OAAO,KAAK,YAAY,CAAC,GAAG,KAAK,GAAG,IAAI,CAAC,CAAC,UAAU,OAAO,EAAE,EAAE,OAAO,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE;IAChH,IAAI,OAAO,KAAK,CAAC,KAAK,CAAC,GAAG,OAAO,CAAC,EAAE,UAAU,OAAO,EAAE,MAAM,EAAE;IAC/D,QAAQ,SAAS,SAAS,CAAC,KAAK,EAAE,EAAE,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,OAAO,CAAC,EAAE,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE;IACnG,QAAQ,SAAS,QAAQ,CAAC,KAAK,EAAE,EAAE,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,OAAO,CAAC,EAAE,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE;IACtG,QAAQ,SAAS,IAAI,CAAC,MAAM,EAAE,EAAE,MAAM,CAAC,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,SAAS,EAAE,QAAQ,CAAC,CAAC,EAAE;IACtH,QAAQ,IAAI,CAAC,CAAC,SAAS,GAAG,SAAS,CAAC,KAAK,CAAC,OAAO,EAAE,UAAU,IAAI,EAAE,CAAC,EAAE,IAAI,EAAE,CAAC,CAAC;IAC9E,KAAK,CAAC,CAAC;IACP;;IC3EA;IACA,IAAI,QAAQ,GAAG;IACf,IAAI,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG;IAC1C,IAAI,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG;IAC1C,IAAI,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG;IAC1C,IAAI,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG;IAC1C,IAAI,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG;IAC1C,IAAI,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG;IAC1C,IAAI,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG;IAC1C,IAAI,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG;IAC1C,CAAC,CAAC;IACF,IAAI,MAAM,GAAG,EAAE,CAAC;IAChB,KAAK,qBAAqB,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,EAAE,EAAE,CAAC,EAAE;IAC9C,IAAI,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;IAC5B,CAAC;AACD,IAiDA;IACA;IACA;IACA;IACA,SAAS,MAAM,CAAC,MAAM,EAAE;IACxB,IAAI,qBAAqB,IAAI,GAAG,MAAM,CAAC,MAAM,CAAC;IAC9C,IAAI,IAAI,IAAI,KAAK,CAAC,EAAE;IACpB,QAAQ,OAAO,IAAI,UAAU,CAAC,IAAI,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC;IAClD,KAAK;IACL,IAAI,IAAI,IAAI,GAAG,CAAC,KAAK,CAAC,EAAE;IACxB,QAAQ,MAAM,IAAI,KAAK,CAAC,cAAc,GAAG,IAAI,CAAC,CAAC;IAC/C,KAAK;IACL,IAAI,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,wBAAwB,CAAC,EAAE;IACjD,QAAQ,MAAM,IAAI,KAAK,CAAC,8BAA8B,CAAC,CAAC;IACxD,KAAK;IACL;IACA;IACA,IAAI,qBAAqB,KAAK,GAAG,CAAC,IAAI,IAAI,GAAG,CAAC,CAAC,CAAC;IAChD,IAAI,qBAAqB,MAAM,GAAG,CAAC,CAAC;IACpC,IAAI,IAAI,MAAM,CAAC,MAAM,CAAC,IAAI,GAAG,CAAC,CAAC,KAAK,GAAG,EAAE;IACzC,QAAQ,MAAM,EAAE,CAAC;IACjB,QAAQ,KAAK,EAAE,CAAC;IAChB,KAAK;IACL,IAAI,IAAI,MAAM,CAAC,MAAM,CAAC,IAAI,GAAG,CAAC,CAAC,KAAK,GAAG,EAAE;IACzC,QAAQ,MAAM,EAAE,CAAC;IACjB,QAAQ,KAAK,EAAE,CAAC;IAChB,KAAK;IACL,IAAI,qBAAqB,MAAM,GAAG,IAAI,UAAU,CAAC,IAAI,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC;IACzE,IAAI,qBAAqB,KAAK,GAAG,CAAC,CAAC;IACnC,IAAI,qBAAqB,WAAW,GAAG,CAAC,CAAC;IACzC,IAAI,qBAAqB,OAAO,CAAC;IACjC,IAAI,IAAI,MAAM,GAAG,CAAC,EAAE;IACpB,QAAQ,IAAI,IAAI,CAAC,CAAC;IAClB,KAAK;IACL;IACA,IAAI,OAAO,KAAK,GAAG,IAAI,EAAE;IACzB,QAAQ,OAAO,GAAG,CAAC,CAAC;IACpB,QAAQ,KAAK,qBAAqB,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC,EAAE;IACrD,YAAY,OAAO,GAAG,CAAC,OAAO,IAAI,CAAC,IAAI,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC,CAAC;IACxE,SAAS;IACT;IACA,QAAQ,MAAM,CAAC,WAAW,EAAE,CAAC,GAAG,CAAC,OAAO,IAAI,EAAE,IAAI,IAAI,CAAC;IACvD,QAAQ,MAAM,CAAC,WAAW,EAAE,CAAC,GAAG,CAAC,OAAO,IAAI,CAAC,IAAI,IAAI,CAAC;IACtD,QAAQ,MAAM,CAAC,WAAW,EAAE,CAAC,GAAG,OAAO,GAAG,IAAI,CAAC;IAC/C,QAAQ,KAAK,IAAI,CAAC,CAAC;IACnB,KAAK;IACL,IAAI,IAAI,MAAM,GAAG,CAAC,EAAE;IACpB;IACA;IACA;IACA,QAAQ,OAAO,GAAG,CAAC,CAAC;IACpB,QAAQ,KAAK,qBAAqB,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,MAAM,EAAE,EAAE,CAAC,EAAE;IAC9D,YAAY,OAAO,GAAG,CAAC,OAAO,IAAI,CAAC,IAAI,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC,CAAC;IACxE,SAAS;IACT,QAAQ,IAAI,MAAM,KAAK,CAAC,EAAE;IAC1B;IACA,YAAY,OAAO,GAAG,OAAO,IAAI,CAAC,CAAC;IACnC,YAAY,MAAM,CAAC,WAAW,EAAE,CAAC,GAAG,CAAC,OAAO,IAAI,CAAC,IAAI,IAAI,CAAC;IAC1D,YAAY,MAAM,CAAC,WAAW,EAAE,CAAC,GAAG,OAAO,GAAG,IAAI,CAAC;IACnD,SAAS;IACT,aAAa;IACb;IACA,YAAY,OAAO,GAAG,OAAO,IAAI,CAAC,CAAC;IACnC,YAAY,MAAM,CAAC,WAAW,EAAE,CAAC,GAAG,OAAO,GAAG,IAAI,CAAC;IACnD,SAAS;IACT,KAAK;IACL;IACA,IAAI,OAAO,MAAM,CAAC;IAClB,CAAC;;ICpID;AACA,IAmBA,WAAY,SAAS;;;;QAInB,2DAAkB,CAAA;;;;QAIlB,yDAAiB,CAAA;;;;QAIjB,qDAAe,CAAA;IACjB,CAAC,EAbWA,iBAAS,KAATA,iBAAS,QAapB;AAkJD,IAGA,WAAY,eAAe;;;;QAIzB,yDAAM,CAAA;;;;QAIN,qDAAI,CAAA;;;;QAIJ,qDAAI,CAAA;IACN,CAAC,EAbWC,uBAAe,KAAfA,uBAAe,QAa1B;;ICnMD;AACA,UA2Ba,qBAAqB;QAChC,YACU,GAAW,EACX,YAAoC,EACpC,WAAqB;YAFrB,QAAG,GAAH,GAAG,CAAQ;YACX,iBAAY,GAAZ,YAAY,CAAwB;YACpC,gBAAW,GAAX,WAAW,CAAU;SAC3B;QAES,cAAc,CAAC,OAAwB,EAAE,QAAwB;;;gBAC5E,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE;oBACtB,QAAQ,CAAC,GAAG,EAAE,CAAC;oBACf,OAAO;iBACR;gBACD,IAAI;oBACF,IAAI,YAAY,GAAG,MAAM,IAAI,CAAC,kBAAkB,CAAC,OAAO,CAAC,CAAC;oBAC1D,IAAI,aAAa,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,YAAY,CAAC,CAAC;oBACzD,IAAI,CAAC,aAAa,EAAE;;wBAElB,QAAQ,CAAC,GAAG,EAAE,CAAC;wBACf,OAAO;qBACR;oBACD,IAAI,aAAa,CAAC,KAAK,EAAE;wBACvB,QAAQ,aAAa,CAAC,KAAK,CAAC,IAAI;4BAC9B,KAAKD,iBAAS,CAAC,SAAS;gCACtB,QAAQ,CAAC,UAAU,GAAG,GAAG,CAAC;gCAC1B,MAAM;4BACR,KAAKA,iBAAS,CAAC,YAAY;gCACzB,QAAQ,CAAC,UAAU,GAAG,GAAG,CAAC;gCAC1B,MAAM;4BACR;gCACE,QAAQ,CAAC,UAAU,GAAG,GAAG,CAAC;gCAC1B,MAAM;yBACT;wBACD,QAAQ,CAAC,GAAG,OAAC,aAAa,CAAC,KAAK,CAAC,MAAM,mCAAI,EAAE,CAAC,CAAC;wBAC/C,OAAO;qBACR;oBAED,IAAI,aAAa,aAAb,aAAa,uBAAb,aAAa,CAAE,OAAO,EAAE;wBAC1B,IAAI,aAAa,CAAC,OAAO,CAAC,QAAQ,KAAKC,uBAAe,CAAC,MAAM,EAAE;4BAC7D,QAAQ,CAAC,SAAS,CAAC,cAAc,EAAE,0BAA0B,CAAC,CAAC;yBAChE;6BAAM,IAAI,aAAa,CAAC,OAAO,CAAC,QAAQ,KAAKA,uBAAe,CAAC,IAAI,EAAE;4BAClE,QAAQ,CAAC,SAAS,CAAC,cAAc,EAAE,kBAAkB,CAAC,CAAC;yBACxD;6BAAM;4BACL,QAAQ,CAAC,SAAS,CAAC,cAAc,EAAE,2BAA2B,CAAC,CAAC;yBACjE;wBACD,QAAQ,CAAC,GAAG,aAAC,aAAa,CAAC,OAAO,0CAAE,IAAI,mCAAI,EAAE,CAAC,CAAC;qBACjD;iBACF;gBAAC,OAAO,GAAG,EAAE;oBACZ,OAAO,CAAC,KAAK,CAAC,4BAA4B,OAAO,KAAK,GAAG,EAAE,CAAC,CAAC;oBAC7D,QAAQ,CAAC,UAAU,GAAG,GAAG,CAAC;oBAC1B,QAAQ,CAAC,GAAG,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;iBAC3B;;SACF;QAEa,WAAW,CAAC,OAAgB;;;gBACxC,MAAM,aAAa,GAAGC,gBAAI,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;gBAE5C,IAAI,IAAI,CAAC,WAAW,KAAK,IAAI,EAAE;oBAC7B,OAAO,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC;iBAC5B;gBAED,IAAI,IAAI,GAAG,aAAa,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC;gBAC5C,IAAI,OAAO,GAAG,IAAI,CAAC,UAAU,CAAC,aAAa,EAAE,OAAO,CAAC,OAAO,CAAC,IAAK,CAAC,CAAC;gBACpE,IAAI,OAAO,CAAC,GAAG,KAAK,IAAI,CAAC,GAAG,EAAE;;oBAE5B,OAAO,CAAC,IAAI,CACV,gCAAgC,IAAI,CAAC,GAAG,4CAA4C,OAAO,CAAC,GAAG,GAAG,CACnG,CAAC;oBACF,OAAO;iBACR;;gBAGD,IAAI,IAAI,KAAK,6BAA6B,EAAE;oBAC1C,IAAI,QAAC,IAAI,CAAC,YAAY,0CAAE,SAAS,CAAA,EAAE;;wBAEjC,OAAO;4BACL,KAAK,EAAE;gCACL,IAAI,EAAEF,iBAAS,CAAC,YAAY;6BAC7B;yBACF,CAAC;qBACH;oBACD,IAAI,cAAc,GAAG,aAAa,CAAC,IAAsB,CAAC;oBAC1D,IAAI,CAAC,cAAc,EAAE;wBACnB,MAAM,IAAI,KAAK,CAAC,kBAAkB,CAAC,CAAC;qBACrC;oBAED,cAAc,CAAC,OAAO,GAAG,OAAO,CAAC;oBACjC,IAAI,eAAe,GAAG,MAAM,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,cAAc,CAAC,CAAC;oBACxE,IAAI,cAAc,EAAE;wBAClB,OAAO;4BACL,OAAO,EAAE;gCACP,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,eAAe,CAAC;gCACrC,QAAQ,EAAEC,uBAAe,CAAC,IAAI;6BAC/B;yBACF,CAAC;qBACH;yBAAM;;;wBAGL,OAAO;4BACL,KAAK,EAAE;gCACL,IAAI,EAAED,iBAAS,CAAC,YAAY;6BAC7B;yBACF,CAAC;qBACH;iBACF;qBAAM,IAAI,IAAI,KAAK,+BAA+B,EAAE;oBACnD,IAAI,QAAC,IAAI,CAAC,YAAY,0CAAE,WAAW,CAAA,EAAE;wBACnC,OAAO;qBACR;oBAED,IAAI,gBAAgB,GAAG,aAAa,CAAC,IAAwB,CAAC;oBAC9D,IAAI,CAAC,gBAAgB,EAAE;wBACrB,MAAM,IAAI,KAAK,CAAC,kBAAkB,CAAC,CAAC;qBACrC;oBAED,gBAAgB,CAAC,OAAO,GAAG,OAAO,CAAC;oBACnC,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC,gBAAgB,CAAC,CAAC;iBACjD;qBAAM,IAAI,IAAI,KAAK,kCAAkC,EAAE;oBACtD,IAAI,QAAC,IAAI,CAAC,YAAY,0CAAE,cAAc,CAAA,EAAE;wBACtC,OAAO;qBACR;oBAED,IAAI,mBAAmB,GAAG,aAAa,CAAC,IAA2B,CAAC;oBACpE,IAAI,CAAC,mBAAmB,EAAE;wBACxB,MAAM,IAAI,KAAK,CAAC,kBAAkB,CAAC,CAAC;qBACrC;oBAED,mBAAmB,CAAC,OAAO,GAAG,OAAO,CAAC;oBACtC,IAAI,CAAC,YAAY,CAAC,cAAc,CAAC,mBAAmB,CAAC,CAAC;iBACvD;qBAAM,IAAI,IAAI,CAAC,UAAU,CAAC,sBAAsB,CAAC,EAAE;oBAClD,IAAI,QAAC,IAAI,CAAC,YAAY,0CAAE,WAAW,CAAA,EAAE;wBACnC,OAAO;qBACR;oBACD,IAAI,IAA0B,CAAC;oBAC/B,IAAI,QAAQ,GAAGC,uBAAe,CAAC,MAAM,CAAC;oBACtC,IAAI,aAAa,CAAC,IAAI,EAAE;wBACtB,IAAI,GAAG,aAAa,CAAC,IAAc,CAAC;wBACpC,QAAQ;4BACN,aAAa,CAAC,eAAe,KAAK,kBAAkB;kCAChDA,uBAAe,CAAC,IAAI;kCACpBA,uBAAe,CAAC,IAAI,CAAC;qBAC5B;yBAAM,IAAI,aAAa,CAAC,WAAW,EAAE;wBACpC,IAAI,GAAG,MAAM,CAAC,aAAa,CAAC,WAAW,CAAC,CAAC;qBAC1C;yBAAM;wBACL,MAAM,IAAI,KAAK,CAAC,oBAAoB,CAAC,CAAC;qBACvC;oBACD,IAAI,WAAW,GAAqB;wBAClC,OAAO,EAAE,OAAO;wBAChB,OAAO,EAAE;4BACP,IAAI,EAAE,IAAI;4BACV,QAAQ,EAAE,QAAQ;yBACnB;qBACF,CAAC;oBAEF,IAAI,CAAC,WAAW,EAAE;wBAChB,MAAM,IAAI,KAAK,CAAC,kBAAkB,CAAC,CAAC;qBACrC;oBAED,WAAW,CAAC,OAAO,GAAG,OAAO,CAAC;oBAC9B,OAAO,MAAM,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC;iBACzD;qBAAM;oBACL,MAAM,IAAI,KAAK,CAAC,uBAAuB,GAAG,IAAI,CAAC,CAAC;iBACjD;gBACD,OAAO;;SACR;QAEO,UAAU,CAAC,EAAc,EAAE,IAAY;YAC7C,IAAI,OAAO,GAAG;gBACZ,SAAS,EAAE,EAAE,CAAC,WAAW,CAAW;gBACpC,MAAM,EAAE,EAAE,CAAC,QAAQ,CAAW;gBAC9B,GAAG,EAAE,EAAE,CAAC,KAAK,CAAW;gBACxB,YAAY,EAAE,EAAE,CAAC,cAAc,CAAW;gBAC1C,SAAS,EAAE,EAAE,CAAC,WAAW,CAAW;gBACpC,IAAI,EAAE,IAAI;aACX,CAAC;;YAGF,OAAO,OAAO,CAAC;SAChB;QAEa,kBAAkB,CAAC,OAAwB;;gBACvD,MAAM,UAAU,GAAY;oBAC1B,OAAO,EAAE,EAAE;oBACX,IAAI,EAAE,EAAE;iBACT,CAAC;gBACF,IAAI,OAAO,CAAC,OAAO,EAAE;oBACnB,KAAK,MAAM,GAAG,IAAI,OAAO,CAAC,OAAO,EAAE;wBACjC,IAAI,MAAM,CAAC,SAAS,CAAC,cAAc,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,GAAG,CAAC,EAAE;4BAC9D,MAAM,OAAO,GAAG,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;4BACrC,IAAI,OAAO,KAAK,SAAS,EAAE;gCACzB,SAAS;6BACV;4BACD,IAAI,OAAO,OAAO,KAAK,QAAQ,EAAE;gCAC/B,UAAU,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,OAAO,CAAC;6BACnC;iCAAM;gCACL,UAAU,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;6BAC7C;yBACF;qBACF;iBACF;gBAED,UAAU,CAAC,IAAI,GAAG,MAAM,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,CAAC;gBACtD,OAAO,UAAU,CAAC;aACnB;SAAA;QAEO,eAAe,CAAC,GAAoB;YAC1C,OAAO,IAAI,OAAO,CAAC,UAAS,OAAO,EAAE,MAAM;gBACzC,IAAI,IAAI,GAAG,EAAE,CAAC;gBACd,GAAG,CAAC,EAAE,CAAC,MAAM,EAAE,UAAS,KAAK;oBAC3B,IAAI,IAAI,KAAK,CAAC;iBACf,CAAC,CAAC;gBACH,GAAG,CAAC,EAAE,CAAC,KAAK,EAAE;oBACZ,OAAO,CAAC,IAAI,CAAC,CAAC;iBACf,CAAC,CAAC;;gBAEH,GAAG,CAAC,EAAE,CAAC,OAAO,EAAE,UAAS,GAAG;;oBAE1B,MAAM,CAAC,GAAG,CAAC,CAAC;iBACb,CAAC,CAAC;aACJ,CAAC,CAAC;SACJ;KACF;;ICvPD;AACA,IAsBA;;;AAGA,UAAa,2BAA2B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;QA0CtC,YACU,GAAW,EACnB,gBAA0B,EAC1B,OAAsC;;YAF9B,QAAG,GAAH,GAAG,CAAQ;YAInB,MAAM,IAAI,SAAG,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,IAAI,mCAAI,uBAAuB,GAAG,EAAE,CAAC;YAC3D,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,GAAG,IAAI,GAAG,IAAI,GAAG,GAAG,CAAC;YACnD,IAAI,CAAC,eAAe,GAAG,gBAAgB,CAAC,GAAG,CAAC,CAAC,QAAQ,KAAK,QAAQ,KAAK,GAAG,GAAG,GAAG,IAAI,IAAIE,OAAG,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;YAC7G,IAAI,CAAC,mBAAmB,GAAG,IAAI,qBAAqB,CAAC,IAAI,CAAC,GAAG,EAAE,OAAO,EAAE,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,WAAW,CAAC,CAAC;SAC/F;;;;QAKM,aAAa;YAClB,MAAM,MAAM,GAAG,OAAO,CAAC,MAAM,EAAE,CAAC;YAChC,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,OAAO,EAAE,QAAQ,KAAI,IAAI,CAAC,6BAA6B,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC,CAAC;YACvG,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,OAAO,EAAE,QAAQ,KAAI,IAAI,CAAC,mBAAmB,CAAC,cAAc,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC,CAAC;YACzG,OAAO,MAAM,CAAC;SACf;QAEO,6BAA6B,CACnC,OAAwB,EACxB,QAAwB;YAExB,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;YAC7B,IAAI,OAAO,CAAC,OAAO,CAAC,wBAAwB,CAAC,EAAE;gBAC7C,QAAQ,CAAC,SAAS,CAAC,wBAAwB,EAAE,IAAI,CAAC,eAAe,CAAC,CAAC;aACpE;iBAAM;gBACL,OAAO,CAAC,GAAG,CAAC,oCAAoC,OAAO,EAAE,CAAC,CAAC;gBAC3D,QAAQ,CAAC,UAAU,GAAG,GAAG,CAAC;aAC3B;YACD,QAAQ,CAAC,GAAG,EAAE,CAAC;YACf,OAAO,IAAI,CAAC;SACb;KACF;;IChGM,MAAM,KAAK,GAA0B;QAC1C,aAAa,EAAE,OAAO;QACtB,MAAM,EAAE;YACN,cAAc,EAAE,OAAO;YACvB,QAAQ,EAAE,IAAI;YACd,IAAI,EAAE;gBACJ,IAAI,EAAE,QAAQ;aACf;SACF;QACD,YAAY,EAAE,IAAI;KACnB,CAAC;AAEF,IAAO,MAAM,UAAU,GAA4B;QACjD,aAAa,EAAE,YAAY;QAC3B,MAAM,EAAE;YACN,YAAY,EAAE,YAAY;YAC1B,UAAU,EAAE,IAAI;YAChB,cAAc,EAAE,aAAa;YAC7B,IAAI,EAAE;gBACJ,IAAI,EAAE,QAAQ;aACf;SACF;KACF,CAAC;AAEF,IAAO,MAAM,WAAW,GAAuB;QAC7C,aAAa,EAAE,aAAa;QAC5B,MAAM,EAAE;YACN,YAAY,EAAE,0BAA0B;YACxC,UAAU,EAAE,IAAI;YAChB,cAAc,EAAE,cAAc;YAC9B,IAAI,EAAE;gBACJ,IAAI,EAAE,QAAQ;aACf;SACF;KACF,CAAC;AAEF,IAAO,MAAM,cAAc,GAAuB;QAChD,aAAa,EAAE,gBAAgB;QAC/B,MAAM,EAAE;YACN,cAAc,EAAE,gBAAgB;YAChC,QAAQ,EAAE,IAAI;YACd,IAAI,EAAE;gBACJ,IAAI,EAAE,QAAQ;aACf;SACF;KACF,CAAC;AAEF,IAAO,MAAM,YAAY,GAAuB;QAC9C,aAAa,EAAE,aAAa;QAC5B,MAAM,EAAE;YACN,YAAY,EAAE,YAAY;YAC1B,UAAU,EAAE,IAAI;YAChB,cAAc,EAAE,cAAc;YAC9B,IAAI,EAAE;gBACJ,IAAI,EAAE,QAAQ;aACf;SACF;KACF,CAAC;AAEF,IAAO,MAAM,eAAe,GAAuB;QACjD,aAAa,EAAE,gBAAgB;QAC/B,MAAM,EAAE;YACN,cAAc,EAAE,gBAAgB;YAChC,QAAQ,EAAE,IAAI;YACd,IAAI,EAAE;gBACJ,IAAI,EAAE,QAAQ;aACf;SACF;KACF,CAAC;AAEF,IAAO,MAAM,YAAY,GAAuB;QAC9C,aAAa,EAAE,aAAa;QAC5B,MAAM,EAAE;YACN,YAAY,EAAE,kBAAkB;YAChC,UAAU,EAAE,IAAI;YAChB,cAAc,EAAE,cAAc;YAC9B,IAAI,EAAE;gBACJ,IAAI,EAAE,QAAQ;aACf;SACF;KACF,CAAC;AAEF,IAAO,MAAM,eAAe,GAAuB;QACjD,aAAa,EAAE,gBAAgB;QAC/B,MAAM,EAAE;YACN,cAAc,EAAE,gBAAgB;YAChC,QAAQ,EAAE,IAAI;YACd,IAAI,EAAE;gBACJ,IAAI,EAAE,QAAQ;aACf;SACF;KACF,CAAC;AAEF,IAAO,MAAM,GAAG,GAA0B;QACxC,aAAa,EAAE,KAAK;QACpB,MAAM,EAAE;YACN,cAAc,EAAE,KAAK;YACrB,QAAQ,EAAE,IAAI;YACd,IAAI,EAAE;gBACJ,IAAI,EAAE,QAAQ;aACf;SACF;KACF,CAAC;AAEF,IAAO,MAAM,QAAQ,GAA4B;QAC/C,aAAa,EAAE,CAAC,SAAS,EAAE,UAAU,CAAC;QACtC,MAAM,EAAE;YACN,cAAc,EAAE,UAAU;YAC1B,IAAI,EAAE;gBACJ,IAAI,EAAE,UAAU;gBAChB,OAAO,EAAE;oBACP,IAAI,EAAE;wBACJ,IAAI,EAAE,QAAQ;qBACf;iBACF;aACF;SACF;QACD,gBAAgB,EAAEC,8BAAqB,CAAC,KAAK;KAC9C,CAAC;AAEF,IAAO,MAAM,YAAY,GAA0B;QACjD,aAAa,EAAE,cAAc;QAC7B,MAAM,EAAE;YACN,cAAc,EAAE,cAAc;YAC9B,QAAQ,EAAE,IAAI;YACd,IAAI,EAAE;gBACJ,IAAI,EAAE,QAAQ;aACf;SACF;KACF,CAAC;AAEF,IAAO,MAAM,MAAM,GAA4B;QAC7C,aAAa,EAAE,CAAC,SAAS,EAAE,QAAQ,CAAC;QACpC,MAAM,EAAE;YACN,cAAc,EAAE,QAAQ;YACxB,IAAI,EAAE;gBACJ,IAAI,EAAE,QAAQ;aACf;SACF;KACF,CAAC;AAEF,IAAO,MAAM,KAAK,GAA0B;QAC1C,aAAa,EAAE,OAAO;QACtB,MAAM,EAAE;YACN,cAAc,EAAE,OAAO;YACvB,QAAQ,EAAE,IAAI;YACd,IAAI,EAAE;gBACJ,IAAI,EAAE,QAAQ;aACf;SACF;KACF,CAAC;AAEF,IAAO,MAAM,MAAM,GAA0B;QAC3C,aAAa,EAAE,QAAQ;QACvB,MAAM,EAAE;YACN,cAAc,EAAE,QAAQ;YACxB,QAAQ,EAAE,IAAI;YACd,IAAI,EAAE;gBACJ,IAAI,EAAE,QAAQ;aACf;SACF;KACF,CAAC;AAEF,IAAO,MAAM,UAAU,GAA0B;QAC/C,aAAa,EAAE,YAAY;QAC3B,MAAM,EAAE;YACN,cAAc,EAAE,YAAY;YAC5B,QAAQ,EAAE,IAAI;YACd,IAAI,EAAE;gBACJ,IAAI,EAAE,QAAQ;aACf;SACF;KACF,CAAC;AAEF,IAAO,MAAM,UAAU,GAA4B;QACjD,aAAa,EAAE,CAAC,SAAS,EAAE,YAAY,CAAC;QACxC,MAAM,EAAE;YACN,cAAc,EAAE,YAAY;YAC5B,IAAI,EAAE;gBACJ,IAAI,EAAE,QAAQ;aACf;SACF;KACF,CAAC;AAEF,IAAO,MAAM,WAAW,GAA0B;QAChD,aAAa,EAAE,YAAY;QAC3B,MAAM,EAAE;YACN,cAAc,EAAE,YAAY;YAC5B,QAAQ,EAAE,IAAI;YACd,IAAI,EAAE;gBACJ,IAAI,EAAE,QAAQ;aACf;SACF;KACF,CAAC;AAEF,IAAO,MAAM,WAAW,GAA0B;QAChD,aAAa,EAAE,YAAY;QAC3B,MAAM,EAAE;YACN,cAAc,EAAE,YAAY;YAC5B,QAAQ,EAAE,IAAI;YACd,IAAI,EAAE;gBACJ,IAAI,EAAE,QAAQ;aACf;SACF;KACF,CAAC;;IC/MF;;;AAGA,UAAa,SAAS;;;;;QAOpB,YAAY,MAA8B;YACxC,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;SACtB;;;;;QAMD,eAAe,CACb,OAAmC;YAEnC,MAAM,gBAAgB,GAAgCC,6CAA6C,CACjG,OAAO,IAAI,EAAE,CACd,CAAC;YACF,OAAO,IAAI,CAAC,MAAM,CAAC,oBAAoB,CACrC,EAAE,OAAO,EAAE,gBAAgB,EAAE,EAC7B,4BAA4B,CACK,CAAC;SACrC;KACF;IACD;IAEA,MAAM,UAAU,GAAG,IAAIC,mBAAmB,CAAC,EAAE,cAAc,KAAK,CAAC,CAAC;IAElE,MAAM,4BAA4B,GAA2B;QAC3D,IAAI,EAAE,aAAa;QACnB,UAAU,EAAE,MAAM;QAClB,SAAS,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,OAAO,EAAE,EAAE,EAAE;QACnC,eAAe,EAAE,CAACC,UAAqB,CAAC;QACxC,aAAa,EAAE,CAACC,KAAgB,CAAC;QACjC,UAAU;KACX,CAAC;;IC1BF;;;AAGA,UAAa,SAAS;;;;;QAOpB,YAAY,MAA8B;YACxC,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;SACtB;;;;;QAgDD,SAAS,CACP,GAAG,IAaE;YAEL,IAAI,aAAqC,CAAC;YAC1C,IAAI,kBAA+C,CAAC;YACpD,IAAI,IAAI,CAAC,CAAC,CAAC,KAAK,0BAA0B,EAAE;gBAC1C,aAAa,GAAG,6BAA6B,CAAC;gBAC9C,kBAAkB,GAAG;oBACnB,GAAG,EAAE,IAAI,CAAC,CAAC,CAAC;oBACZ,WAAW,EAAE,IAAI,CAAC,CAAC,CAAC;oBACpB,cAAc,EAAE,IAAI,CAAC,CAAC,CAAC;oBACvB,OAAO,EAAE,IAAI,CAAC,CAAC,CAAC;iBACjB,CAAC;aACH;iBAAM,IAAI,IAAI,CAAC,CAAC,CAAC,KAAK,YAAY,EAAE;gBACnC,aAAa,GAAG,2BAA2B,CAAC;gBAC5C,kBAAkB,GAAG;oBACnB,GAAG,EAAE,IAAI,CAAC,CAAC,CAAC;oBACZ,WAAW,EAAE,IAAI,CAAC,CAAC,CAAC;oBACpB,cAAc,EAAE,IAAI,CAAC,CAAC,CAAC;oBACvB,OAAO,EAAE,IAAI,CAAC,CAAC,CAAC;iBACjB,CAAC;aACH;iBAAM,IAAI,IAAI,CAAC,CAAC,CAAC,KAAK,kBAAkB,EAAE;gBACzC,aAAa,GAAG,2BAA2B,CAAC;gBAC5C,kBAAkB,GAAG;oBACnB,GAAG,EAAE,IAAI,CAAC,CAAC,CAAC;oBACZ,WAAW,EAAE,IAAI,CAAC,CAAC,CAAC;oBACpB,cAAc,EAAE,IAAI,CAAC,CAAC,CAAC;oBACvB,OAAO,EAAE,IAAI,CAAC,CAAC,CAAC;iBACjB,CAAC;aACH;iBAAM;gBACL,MAAM,IAAI,SAAS,CACjB,wDAAwD,IAAI,CAAC,CAAC,CAAC,IAAI,CACpE,CAAC;aACH;YACD,OAAO,IAAI,CAAC,MAAM,CAAC,oBAAoB,CACrC,kBAAkB,EAClB,aAAa,CACoB,CAAC;SACrC;;;;;;;;QASD,wBAAwB,CACtB,GAAW,EACX,YAAoB,EACpB,OAAmC;YAEnC,MAAM,gBAAgB,GAAgCH,6CAA6C,CACjG,OAAO,IAAI,EAAE,CACd,CAAC;YACF,OAAO,IAAI,CAAC,MAAM,CAAC,oBAAoB,CACrC,EAAE,GAAG,EAAE,YAAY,EAAE,OAAO,EAAE,gBAAgB,EAAE,EAChD,qCAAqC,CACJ,CAAC;SACrC;;;;;;;;QASD,qBAAqB,CACnB,GAAW,EACX,YAAoB,EACpB,OAAsD;YAEtD,MAAM,gBAAgB,GAAgCA,6CAA6C,CACjG,OAAO,IAAI,EAAE,CACd,CAAC;YACF,OAAO,IAAI,CAAC,MAAM,CAAC,oBAAoB,CACrC,EAAE,GAAG,EAAE,YAAY,EAAE,OAAO,EAAE,gBAAgB,EAAE,EAChD,kCAAkC,CACD,CAAC;SACrC;;;;;QAsDD,gBAAgB,CACd,GAAG,IAeE;YAEL,IAAI,aAAqC,CAAC;YAC1C,IAAI,kBAA+C,CAAC;YACpD,IAAI,IAAI,CAAC,CAAC,CAAC,KAAK,0BAA0B,EAAE;gBAC1C,aAAa,GAAG,oCAAoC,CAAC;gBACrD,kBAAkB,GAAG;oBACnB,GAAG,EAAE,IAAI,CAAC,CAAC,CAAC;oBACZ,YAAY,EAAE,IAAI,CAAC,CAAC,CAAC;oBACrB,WAAW,EAAE,IAAI,CAAC,CAAC,CAAC;oBACpB,cAAc,EAAE,IAAI,CAAC,CAAC,CAAC;oBACvB,OAAO,EAAE,IAAI,CAAC,CAAC,CAAC;iBACjB,CAAC;aACH;iBAAM,IAAI,IAAI,CAAC,CAAC,CAAC,KAAK,YAAY,EAAE;gBACnC,aAAa,GAAG,kCAAkC,CAAC;gBACnD,kBAAkB,GAAG;oBACnB,GAAG,EAAE,IAAI,CAAC,CAAC,CAAC;oBACZ,YAAY,EAAE,IAAI,CAAC,CAAC,CAAC;oBACrB,WAAW,EAAE,IAAI,CAAC,CAAC,CAAC;oBACpB,cAAc,EAAE,IAAI,CAAC,CAAC,CAAC;oBACvB,OAAO,EAAE,IAAI,CAAC,CAAC,CAAC;iBACjB,CAAC;aACH;iBAAM,IAAI,IAAI,CAAC,CAAC,CAAC,KAAK,kBAAkB,EAAE;gBACzC,aAAa,GAAG,kCAAkC,CAAC;gBACnD,kBAAkB,GAAG;oBACnB,GAAG,EAAE,IAAI,CAAC,CAAC,CAAC;oBACZ,YAAY,EAAE,IAAI,CAAC,CAAC,CAAC;oBACrB,WAAW,EAAE,IAAI,CAAC,CAAC,CAAC;oBACpB,cAAc,EAAE,IAAI,CAAC,CAAC,CAAC;oBACvB,OAAO,EAAE,IAAI,CAAC,CAAC,CAAC;iBACjB,CAAC;aACH;iBAAM;gBACL,MAAM,IAAI,SAAS,CACjB,wDAAwD,IAAI,CAAC,CAAC,CAAC,IAAI,CACpE,CAAC;aACH;YACD,OAAO,IAAI,CAAC,MAAM,CAAC,oBAAoB,CACrC,kBAAkB,EAClB,aAAa,CACoB,CAAC;SACrC;;;;;;;;QASD,mBAAmB,CACjB,GAAW,EACX,KAAa,EACb,OAAmC;YAEnC,MAAM,gBAAgB,GAAgCA,6CAA6C,CACjG,OAAO,IAAI,EAAE,CACd,CAAC;YACF,OAAO,IAAI,CAAC,MAAM,CAAC,oBAAoB,CACrC,EAAE,GAAG,EAAE,KAAK,EAAE,OAAO,EAAE,gBAAgB,EAAE,EACzC,gCAAgC,CACC,CAAC;SACrC;;;;;QAsDD,WAAW,CACT,GAAG,IAqBE;YAEL,IAAI,aAAqC,CAAC;YAC1C,IAAI,kBAA+C,CAAC;YACpD,IAAI,IAAI,CAAC,CAAC,CAAC,KAAK,0BAA0B,EAAE;gBAC1C,aAAa,GAAG,+BAA+B,CAAC;gBAChD,kBAAkB,GAAG;oBACnB,GAAG,EAAE,IAAI,CAAC,CAAC,CAAC;oBACZ,KAAK,EAAE,IAAI,CAAC,CAAC,CAAC;oBACd,WAAW,EAAE,IAAI,CAAC,CAAC,CAAC;oBACpB,cAAc,EAAE,IAAI,CAAC,CAAC,CAAC;oBACvB,OAAO,EAAE,IAAI,CAAC,CAAC,CAAC;iBACjB,CAAC;aACH;iBAAM,IAAI,IAAI,CAAC,CAAC,CAAC,KAAK,YAAY,EAAE;gBACnC,aAAa,GAAG,6BAA6B,CAAC;gBAC9C,kBAAkB,GAAG;oBACnB,GAAG,EAAE,IAAI,CAAC,CAAC,CAAC;oBACZ,KAAK,EAAE,IAAI,CAAC,CAAC,CAAC;oBACd,WAAW,EAAE,IAAI,CAAC,CAAC,CAAC;oBACpB,cAAc,EAAE,IAAI,CAAC,CAAC,CAAC;oBACvB,OAAO,EAAE,IAAI,CAAC,CAAC,CAAC;iBACjB,CAAC;aACH;iBAAM,IAAI,IAAI,CAAC,CAAC,CAAC,KAAK,kBAAkB,EAAE;gBACzC,aAAa,GAAG,6BAA6B,CAAC;gBAC9C,kBAAkB,GAAG;oBACnB,GAAG,EAAE,IAAI,CAAC,CAAC,CAAC;oBACZ,KAAK,EAAE,IAAI,CAAC,CAAC,CAAC;oBACd,WAAW,EAAE,IAAI,CAAC,CAAC,CAAC;oBACpB,cAAc,EAAE,IAAI,CAAC,CAAC,CAAC;oBACvB,OAAO,EAAE,IAAI,CAAC,CAAC,CAAC;iBACjB,CAAC;aACH;iBAAM;gBACL,MAAM,IAAI,SAAS,CACjB,wDAAwD,IAAI,CAAC,CAAC,CAAC,IAAI,CACpE,CAAC;aACH;YACD,OAAO,IAAI,CAAC,MAAM,CAAC,oBAAoB,CACrC,kBAAkB,EAClB,aAAa,CACoB,CAAC;SACrC;;;;;;;;;QAUD,oBAAoB,CAClB,GAAW,EACX,KAAa,EACb,YAAoB,EACpB,OAAmC;YAEnC,MAAM,gBAAgB,GAAgCA,6CAA6C,CACjG,OAAO,IAAI,EAAE,CACd,CAAC;YACF,OAAO,IAAI,CAAC,MAAM,CAAC,oBAAoB,CACrC,EAAE,GAAG,EAAE,KAAK,EAAE,YAAY,EAAE,OAAO,EAAE,gBAAgB,EAAE,EACvD,iCAAiC,CACA,CAAC;SACrC;;;;;;;;;QAUD,yBAAyB,CACvB,GAAW,EACX,KAAa,EACb,YAAoB,EACpB,OAAmC;YAEnC,MAAM,gBAAgB,GAAgCA,6CAA6C,CACjG,OAAO,IAAI,EAAE,CACd,CAAC;YACF,OAAO,IAAI,CAAC,MAAM,CAAC,oBAAoB,CACrC,EAAE,GAAG,EAAE,KAAK,EAAE,YAAY,EAAE,OAAO,EAAE,gBAAgB,EAAE,EACvD,sCAAsC,CACL,CAAC;SACrC;;;;;;;;QASD,kBAAkB,CAChB,GAAW,EACX,MAAc,EACd,OAAmC;YAEnC,MAAM,gBAAgB,GAAgCA,6CAA6C,CACjG,OAAO,IAAI,EAAE,CACd,CAAC;YACF,OAAO,IAAI,CAAC,MAAM,CAAC,oBAAoB,CACrC,EAAE,GAAG,EAAE,MAAM,EAAE,OAAO,EAAE,gBAAgB,EAAE,EAC1C,+BAA+B,CACE,CAAC;SACrC;;;;;QAsDD,UAAU,CACR,GAAG,IAeE;YAEL,IAAI,aAAqC,CAAC;YAC1C,IAAI,kBAA+C,CAAC;YACpD,IAAI,IAAI,CAAC,CAAC,CAAC,KAAK,0BAA0B,EAAE;gBAC1C,aAAa,GAAG,8BAA8B,CAAC;gBAC/C,kBAAkB,GAAG;oBACnB,GAAG,EAAE,IAAI,CAAC,CAAC,CAAC;oBACZ,MAAM,EAAE,IAAI,CAAC,CAAC,CAAC;oBACf,WAAW,EAAE,IAAI,CAAC,CAAC,CAAC;oBACpB,cAAc,EAAE,IAAI,CAAC,CAAC,CAAC;oBACvB,OAAO,EAAE,IAAI,CAAC,CAAC,CAAC;iBACjB,CAAC;aACH;iBAAM,IAAI,IAAI,CAAC,CAAC,CAAC,KAAK,YAAY,EAAE;gBACnC,aAAa,GAAG,4BAA4B,CAAC;gBAC7C,kBAAkB,GAAG;oBACnB,GAAG,EAAE,IAAI,CAAC,CAAC,CAAC;oBACZ,MAAM,EAAE,IAAI,CAAC,CAAC,CAAC;oBACf,WAAW,EAAE,IAAI,CAAC,CAAC,CAAC;oBACpB,cAAc,EAAE,IAAI,CAAC,CAAC,CAAC;oBACvB,OAAO,EAAE,IAAI,CAAC,CAAC,CAAC;iBACjB,CAAC;aACH;iBAAM,IAAI,IAAI,CAAC,CAAC,CAAC,KAAK,kBAAkB,EAAE;gBACzC,aAAa,GAAG,4BAA4B,CAAC;gBAC7C,kBAAkB,GAAG;oBACnB,GAAG,EAAE,IAAI,CAAC,CAAC,CAAC;oBACZ,MAAM,EAAE,IAAI,CAAC,CAAC,CAAC;oBACf,WAAW,EAAE,IAAI,CAAC,CAAC,CAAC;oBACpB,cAAc,EAAE,IAAI,CAAC,CAAC,CAAC;oBACvB,OAAO,EAAE,IAAI,CAAC,CAAC,CAAC;iBACjB,CAAC;aACH;iBAAM;gBACL,MAAM,IAAI,SAAS,CACjB,wDAAwD,IAAI,CAAC,CAAC,CAAC,IAAI,CACpE,CAAC;aACH;YACD,OAAO,IAAI,CAAC,MAAM,CAAC,oBAAoB,CACrC,kBAAkB,EAClB,aAAa,CACoB,CAAC;SACrC;;;;;;;;;QAUD,yBAAyB,CACvB,GAAW,EACX,KAAa,EACb,MAAc,EACd,OAAmC;YAEnC,MAAM,gBAAgB,GAAgCA,6CAA6C,CACjG,OAAO,IAAI,EAAE,CACd,CAAC;YACF,OAAO,IAAI,CAAC,MAAM,CAAC,oBAAoB,CACrC,EAAE,GAAG,EAAE,KAAK,EAAE,MAAM,EAAE,OAAO,EAAE,gBAAgB,EAAE,EACjD,sCAAsC,CACL,CAAC;SACrC;;;;;;;;;QAUD,cAAc,CACZ,GAAW,EACX,KAAa,EACb,MAAc,EACd,OAAmC;YAEnC,MAAM,gBAAgB,GAAgCA,6CAA6C,CACjG,OAAO,IAAI,EAAE,CACd,CAAC;YACF,OAAO,IAAI,CAAC,MAAM,CAAC,oBAAoB,CACrC,EAAE,GAAG,EAAE,KAAK,EAAE,MAAM,EAAE,OAAO,EAAE,gBAAgB,EAAE,EACjD,2BAA2B,CACM,CAAC;SACrC;;;;;;;;;QAUD,mBAAmB,CACjB,GAAW,EACX,KAAa,EACb,MAAc,EACd,OAAmC;YAEnC,MAAM,gBAAgB,GAAgCA,6CAA6C,CACjG,OAAO,IAAI,EAAE,CACd,CAAC;YACF,OAAO,IAAI,CAAC,MAAM,CAAC,oBAAoB,CACrC,EAAE,GAAG,EAAE,KAAK,EAAE,MAAM,EAAE,OAAO,EAAE,gBAAgB,EAAE,EACjD,gCAAgC,CACC,CAAC;SACrC;;;;;;;;QASD,uBAAuB,CACrB,GAAW,EACX,MAAc,EACd,OAAmC;YAEnC,MAAM,gBAAgB,GAAgCA,6CAA6C,CACjG,OAAO,IAAI,EAAE,CACd,CAAC;YACF,OAAO,IAAI,CAAC,MAAM,CAAC,oBAAoB,CACrC,EAAE,GAAG,EAAE,MAAM,EAAE,OAAO,EAAE,gBAAgB,EAAE,EAC1C,oCAAoC,CACH,CAAC;SACrC;;;;;;;;;QAUD,eAAe,CACb,GAAW,EACX,UAAiB,EACjB,YAAoB,EACpB,OAAgD;YAEhD,MAAM,gBAAgB,GAAgCA,6CAA6C,CACjG,OAAO,IAAI,EAAE,CACd,CAAC;YACF,OAAO,IAAI,CAAC,MAAM,CAAC,oBAAoB,CACrC,EAAE,GAAG,EAAE,UAAU,EAAE,YAAY,EAAE,OAAO,EAAE,gBAAgB,EAAE,EAC5D,4BAA4B,CACK,CAAC;SACrC;;;;;;;;;QAUD,gBAAgB,CACd,GAAW,EACX,UAAiB,EACjB,YAAoB,EACpB,OAAiD;YAEjD,MAAM,gBAAgB,GAAgCA,6CAA6C,CACjG,OAAO,IAAI,EAAE,CACd,CAAC;YACF,OAAO,IAAI,CAAC,MAAM,CAAC,oBAAoB,CACrC,EAAE,GAAG,EAAE,UAAU,EAAE,YAAY,EAAE,OAAO,EAAE,gBAAgB,EAAE,EAC5D,6BAA6B,CACI,CAAC;SACrC;;;;;;;;;QAUD,eAAe,CACb,GAAW,EACX,UAAiB,EACjB,YAAoB,EACpB,OAAgD;YAEhD,MAAM,gBAAgB,GAAgCA,6CAA6C,CACjG,OAAO,IAAI,EAAE,CACd,CAAC;YACF,OAAO,IAAI,CAAC,MAAM,CAAC,oBAAoB,CACrC,EAAE,GAAG,EAAE,UAAU,EAAE,YAAY,EAAE,OAAO,EAAE,gBAAgB,EAAE,EAC5D,4BAA4B,CACK,CAAC;SACrC;KACF;IACD;IAEA,MAAMI,YAAU,GAAG,IAAIH,mBAAmB,CAAC,EAAE,cAAc,KAAK,CAAC,CAAC;IAElE,MAAM,6BAA6B,GAA2B;QAC5D,IAAI,EAAE,uBAAuB;QAC7B,UAAU,EAAE,MAAM;QAClB,SAAS,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,OAAO,EAAE,EAAE,EAAE;QACnC,WAAW,EAAEI,cAAyB;QACtC,eAAe,EAAE,CAACH,UAAqB,EAAEI,QAAmB,CAAC;QAC7D,aAAa,EAAE,CAACH,KAAgB,EAAEI,GAAc,CAAC;QACjD,gBAAgB,EAAE,CAACC,WAAsB,CAAC;QAC1C,SAAS,EAAE,QAAQ;oBACnBJ,YAAU;KACX,CAAC;IACF,MAAM,2BAA2B,GAA2B;QAC1D,IAAI,EAAE,uBAAuB;QAC7B,UAAU,EAAE,MAAM;QAClB,SAAS,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,OAAO,EAAE,EAAE,EAAE;QACnC,WAAW,EAAEK,eAA0B;QACvC,eAAe,EAAE,CAACP,UAAqB,EAAEI,QAAmB,CAAC;QAC7D,aAAa,EAAE,CAACH,KAAgB,EAAEI,GAAc,CAAC;QACjD,gBAAgB,EAAE,CAACG,YAAuB,CAAC;QAC3C,SAAS,EAAE,MAAM;oBACjBN,YAAU;KACX,CAAC;IACF,MAAM,2BAA2B,GAA2B;QAC1D,IAAI,EAAE,uBAAuB;QAC7B,UAAU,EAAE,MAAM;QAClB,SAAS,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,OAAO,EAAE,EAAE,EAAE;QACnC,WAAW,EAAEO,eAA0B;QACvC,eAAe,EAAE,CAACT,UAAqB,EAAEI,QAAmB,CAAC;QAC7D,aAAa,EAAE,CAACH,KAAgB,EAAEI,GAAc,CAAC;QACjD,gBAAgB,EAAE,CAACK,YAAuB,CAAC;QAC3C,SAAS,EAAE,MAAM;oBACjBR,YAAU;KACX,CAAC;IACF,MAAM,qCAAqC,GAA2B;QACpE,IAAI,EAAE,4CAA4C;QAClD,UAAU,EAAE,MAAM;QAClB,SAAS,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,OAAO,EAAE,EAAE,EAAE;QAC5C,eAAe,EAAE,CAACF,UAAqB,CAAC;QACxC,aAAa,EAAE,CAACC,KAAgB,EAAEI,GAAc,EAAEM,YAAuB,CAAC;oBAC1ET,YAAU;KACX,CAAC;IACF,MAAM,kCAAkC,GAA2B;QACjE,IAAI,EAAE,4CAA4C;QAClD,UAAU,EAAE,QAAQ;QACpB,SAAS,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,OAAO,EAAE,EAAE,EAAE;QACnC,eAAe,EAAE,CAACF,UAAqB,EAAEY,MAAiB,CAAC;QAC3D,aAAa,EAAE,CAACX,KAAgB,EAAEI,GAAc,EAAEM,YAAuB,CAAC;oBAC1ET,YAAU;KACX,CAAC;IACF,MAAM,oCAAoC,GAA2B;QACnE,IAAI,EAAE,kDAAkD;QACxD,UAAU,EAAE,MAAM;QAClB,SAAS,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,OAAO,EAAE,EAAE,EAAE;QACnC,WAAW,EAAEC,cAAyB;QACtC,eAAe,EAAE,CAACH,UAAqB,CAAC;QACxC,aAAa,EAAE,CAACC,KAAgB,EAAEI,GAAc,EAAEM,YAAuB,CAAC;QAC1E,gBAAgB,EAAE,CAACL,WAAsB,CAAC;QAC1C,SAAS,EAAE,QAAQ;oBACnBJ,YAAU;KACX,CAAC;IACF,MAAM,kCAAkC,GAA2B;QACjE,IAAI,EAAE,kDAAkD;QACxD,UAAU,EAAE,MAAM;QAClB,SAAS,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,OAAO,EAAE,EAAE,EAAE;QACnC,WAAW,EAAEK,eAA0B;QACvC,eAAe,EAAE,CAACP,UAAqB,CAAC;QACxC,aAAa,EAAE,CAACC,KAAgB,EAAEI,GAAc,EAAEM,YAAuB,CAAC;QAC1E,gBAAgB,EAAE,CAACH,YAAuB,CAAC;QAC3C,SAAS,EAAE,MAAM;oBACjBN,YAAU;KACX,CAAC;IACF,MAAM,kCAAkC,GAA2B;QACjE,IAAI,EAAE,kDAAkD;QACxD,UAAU,EAAE,MAAM;QAClB,SAAS,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,OAAO,EAAE,EAAE,EAAE;QACnC,WAAW,EAAEO,eAA0B;QACvC,eAAe,EAAE,CAACT,UAAqB,CAAC;QACxC,aAAa,EAAE,CAACC,KAAgB,EAAEI,GAAc,EAAEM,YAAuB,CAAC;QAC1E,gBAAgB,EAAE,CAACD,YAAuB,CAAC;QAC3C,SAAS,EAAE,MAAM;oBACjBR,YAAU;KACX,CAAC;IACF,MAAM,gCAAgC,GAA2B;QAC/D,IAAI,EAAE,gCAAgC;QACtC,UAAU,EAAE,MAAM;QAClB,SAAS,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,OAAO,EAAE,EAAE,EAAE;QAC5C,eAAe,EAAE,CAACF,UAAqB,CAAC;QACxC,aAAa,EAAE,CAACC,KAAgB,EAAEI,GAAc,EAAEQ,KAAgB,CAAC;oBACnEX,YAAU;KACX,CAAC;IACF,MAAM,+BAA+B,GAA2B;QAC9D,IAAI,EAAE,sCAAsC;QAC5C,UAAU,EAAE,MAAM;QAClB,SAAS,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,OAAO,EAAE,EAAE,EAAE;QACnC,WAAW,EAAEC,cAAyB;QACtC,eAAe,EAAE,CAACH,UAAqB,EAAEI,QAAmB,CAAC;QAC7D,aAAa,EAAE,CAACH,KAAgB,EAAEI,GAAc,EAAEQ,KAAgB,CAAC;QACnE,gBAAgB,EAAE,CAACP,WAAsB,CAAC;QAC1C,SAAS,EAAE,QAAQ;oBACnBJ,YAAU;KACX,CAAC;IACF,MAAM,6BAA6B,GAA2B;QAC5D,IAAI,EAAE,sCAAsC;QAC5C,UAAU,EAAE,MAAM;QAClB,SAAS,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,OAAO,EAAE,EAAE,EAAE;QACnC,WAAW,EAAEK,eAA0B;QACvC,eAAe,EAAE,CAACP,UAAqB,EAAEI,QAAmB,CAAC;QAC7D,aAAa,EAAE,CAACH,KAAgB,EAAEI,GAAc,EAAEQ,KAAgB,CAAC;QACnE,gBAAgB,EAAE,CAACL,YAAuB,CAAC;QAC3C,SAAS,EAAE,MAAM;oBACjBN,YAAU;KACX,CAAC;IACF,MAAM,6BAA6B,GAA2B;QAC5D,IAAI,EAAE,sCAAsC;QAC5C,UAAU,EAAE,MAAM;QAClB,SAAS,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,OAAO,EAAE,EAAE,EAAE;QACnC,WAAW,EAAEO,eAA0B;QACvC,eAAe,EAAE,CAACT,UAAqB,EAAEI,QAAmB,CAAC;QAC7D,aAAa,EAAE,CAACH,KAAgB,EAAEI,GAAc,EAAEQ,KAAgB,CAAC;QACnE,gBAAgB,EAAE,CAACH,YAAuB,CAAC;QAC3C,SAAS,EAAE,MAAM;oBACjBR,YAAU;KACX,CAAC;IACF,MAAM,iCAAiC,GAA2B;QAChE,IAAI,EAAE,2DAA2D;QACjE,UAAU,EAAE,KAAK;QACjB,SAAS,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,OAAO,EAAE,EAAE,EAAE;QAC5C,eAAe,EAAE,CAACF,UAAqB,CAAC;QACxC,aAAa,EAAE;YACbC,KAAgB;YAChBI,GAAc;YACdM,YAAuB;YACvBE,KAAgB;SACjB;oBACDX,YAAU;KACX,CAAC;IACF,MAAM,sCAAsC,GAA2B;QACrE,IAAI,EAAE,2DAA2D;QACjE,UAAU,EAAE,QAAQ;QACpB,SAAS,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,OAAO,EAAE,EAAE,EAAE;QAC5C,eAAe,EAAE,CAACF,UAAqB,CAAC;QACxC,aAAa,EAAE;YACbC,KAAgB;YAChBI,GAAc;YACdM,YAAuB;YACvBE,KAAgB;SACjB;oBACDX,YAAU;KACX,CAAC;IACF,MAAM,+BAA+B,GAA2B;QAC9D,IAAI,EAAE,gCAAgC;QACtC,UAAU,EAAE,MAAM;QAClB,SAAS,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,OAAO,EAAE,EAAE,EAAE;QAC5C,eAAe,EAAE,CAACF,UAAqB,CAAC;QACxC,aAAa,EAAE,CAACC,KAAgB,EAAEI,GAAc,EAAES,MAAiB,CAAC;oBACpEZ,YAAU;KACX,CAAC;IACF,MAAM,8BAA8B,GAA2B;QAC7D,IAAI,EAAE,sCAAsC;QAC5C,UAAU,EAAE,MAAM;QAClB,SAAS,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,OAAO,EAAE,EAAE,EAAE;QACnC,WAAW,EAAEC,cAAyB;QACtC,eAAe,EAAE,CAACH,UAAqB,CAAC;QACxC,aAAa,EAAE,CAACC,KAAgB,EAAEI,GAAc,EAAES,MAAiB,CAAC;QACpE,gBAAgB,EAAE,CAACR,WAAsB,CAAC;QAC1C,SAAS,EAAE,QAAQ;oBACnBJ,YAAU;KACX,CAAC;IACF,MAAM,4BAA4B,GAA2B;QAC3D,IAAI,EAAE,sCAAsC;QAC5C,UAAU,EAAE,MAAM;QAClB,SAAS,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,OAAO,EAAE,EAAE,EAAE;QACnC,WAAW,EAAEK,eAA0B;QACvC,eAAe,EAAE,CAACP,UAAqB,CAAC;QACxC,aAAa,EAAE,CAACC,KAAgB,EAAEI,GAAc,EAAES,MAAiB,CAAC;QACpE,gBAAgB,EAAE,CAACN,YAAuB,CAAC;QAC3C,SAAS,EAAE,MAAM;oBACjBN,YAAU;KACX,CAAC;IACF,MAAM,4BAA4B,GAA2B;QAC3D,IAAI,EAAE,sCAAsC;QAC5C,UAAU,EAAE,MAAM;QAClB,SAAS,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,OAAO,EAAE,EAAE,EAAE;QACnC,WAAW,EAAEO,eAA0B;QACvC,eAAe,EAAE,CAACT,UAAqB,CAAC;QACxC,aAAa,EAAE,CAACC,KAAgB,EAAEI,GAAc,EAAES,MAAiB,CAAC;QACpE,gBAAgB,EAAE,CAACJ,YAAuB,CAAC;QAC3C,SAAS,EAAE,MAAM;oBACjBR,YAAU;KACX,CAAC;IACF,MAAM,sCAAsC,GAA2B;QACrE,IAAI,EAAE,+CAA+C;QACrD,UAAU,EAAE,MAAM;QAClB,SAAS,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,OAAO,EAAE,EAAE,EAAE;QAC5C,eAAe,EAAE,CAACF,UAAqB,CAAC;QACxC,aAAa,EAAE;YACbC,KAAgB;YAChBI,GAAc;YACdQ,KAAgB;YAChBC,MAAiB;SAClB;oBACDZ,YAAU;KACX,CAAC;IACF,MAAM,2BAA2B,GAA2B;QAC1D,IAAI,EAAE,+CAA+C;QACrD,UAAU,EAAE,KAAK;QACjB,SAAS,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,OAAO,EAAE,EAAE,EAAE;QACnC,eAAe,EAAE,CAACF,UAAqB,CAAC;QACxC,aAAa,EAAE;YACbC,KAAgB;YAChBI,GAAc;YACdQ,KAAgB;YAChBC,MAAiB;SAClB;oBACDZ,YAAU;KACX,CAAC;IACF,MAAM,gCAAgC,GAA2B;QAC/D,IAAI,EAAE,+CAA+C;QACrD,UAAU,EAAE,QAAQ;QACpB,SAAS,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,OAAO,EAAE,EAAE,EAAE;QACnC,eAAe,EAAE,CAACF,UAAqB,CAAC;QACxC,aAAa,EAAE;YACbC,KAAgB;YAChBI,GAAc;YACdQ,KAAgB;YAChBC,MAAiB;SAClB;oBACDZ,YAAU;KACX,CAAC;IACF,MAAM,oCAAoC,GAA2B;QACnE,IAAI,EAAE,uCAAuC;QAC7C,UAAU,EAAE,QAAQ;QACpB,SAAS,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,OAAO,EAAE,EAAE,EAAE;QACnC,eAAe,EAAE,CAACF,UAAqB,CAAC;QACxC,aAAa,EAAE,CAACC,KAAgB,EAAEI,GAAc,EAAES,MAAiB,CAAC;oBACpEZ,YAAU;KACX,CAAC;IACF,MAAM,4BAA4B,GAA2B;QAC3D,IAAI,EAAE,qEAAqE;QAC3E,UAAU,EAAE,KAAK;QACjB,SAAS,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,OAAO,EAAE,EAAE,EAAE;QACnC,eAAe,EAAE,CAACF,UAAqB,EAAEe,UAAqB,CAAC;QAC/D,aAAa,EAAE;YACbd,KAAgB;YAChBI,GAAc;YACdM,YAAuB;YACvBK,UAAqB;SACtB;oBACDd,YAAU;KACX,CAAC;IACF,MAAM,6BAA6B,GAA2B;QAC5D,IAAI,EAAE,qEAAqE;QAC3E,UAAU,EAAE,QAAQ;QACpB,SAAS,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,OAAO,EAAE,EAAE,EAAE;QACnC,eAAe,EAAE,CAACF,UAAqB,EAAEe,UAAqB,CAAC;QAC/D,aAAa,EAAE;YACbd,KAAgB;YAChBI,GAAc;YACdM,YAAuB;YACvBM,WAAsB;SACvB;oBACDf,YAAU;KACX,CAAC;IACF,MAAM,4BAA4B,GAA2B;QAC3D,IAAI,EAAE,qEAAqE;QAC3E,UAAU,EAAE,MAAM;QAClB,SAAS,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,OAAO,EAAE,EAAE,EAAE;QAC5C,eAAe,EAAE,CAACF,UAAqB,EAAEe,UAAqB,CAAC;QAC/D,aAAa,EAAE;YACbd,KAAgB;YAChBI,GAAc;YACdM,YAAuB;YACvBO,WAAsB;SACvB;oBACDhB,YAAU;KACX,CAAC;;ICzgCF,MAAM,WAAW,GAAG,kBAAkB,CAAC;IACvC,MAAM,cAAc,GAAG,OAAO,CAAC;AAE/B,UAAa,6BAA8B,SAAQiB,sBAAsB;;;;;;;QAUvE,YACE,WAAyE,EACzE,KAAa,EACb,OAA8C;YAE9C,IAAI,WAAW,KAAK,SAAS,EAAE;gBAC7B,MAAM,IAAI,KAAK,CAAC,8BAA8B,CAAC,CAAC;aACjD;YACD,IAAI,KAAK,KAAK,SAAS,EAAE;gBACvB,MAAM,IAAI,KAAK,CAAC,wBAAwB,CAAC,CAAC;aAC3C;;YAGD,IAAI,CAAC,OAAO,EAAE;gBACZ,OAAO,GAAG,EAAE,CAAC;aACd;YAED,IAAI,CAAC,OAAO,CAAC,SAAS,EAAE;gBACtB,MAAM,gBAAgB,GAAGC,iCAAiC,EAAE,CAAC;gBAC7D,OAAO,CAAC,SAAS,GAAG,GAAG,WAAW,IAAI,cAAc,IAAI,gBAAgB,EAAE,CAAC;aAC5E;YAED,KAAK,CAAC,WAAW,EAAE,OAAO,CAAC,CAAC;YAE5B,IAAI,CAAC,kBAAkB,GAAG,iCAAiC,CAAC;YAE5D,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC,QAAQ,IAAI,SAAS,CAAC;;YAG7C,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;;YAGnB,IAAI,CAAC,UAAU,GAAG,OAAO,CAAC,UAAU,IAAI,YAAY,CAAC;SACtD;KACF;;IClDD;;;;;AAOA,IAOA,MAAM,sBAAuB,SAAQ,6BAA6B;;;;;;QAUhE,YAAY,WAA8C,EAAE,IAAY,EAAE,OAAqD;YAC7H,KAAK,CAAC,WAAW,EAAE,IAAI,EAAE,OAAO,CAAC,CAAC;YAClC,IAAI,CAAC,SAAS,GAAG,IAAIC,SAAoB,CAAC,IAAI,CAAC,CAAC;YAChD,IAAI,CAAC,YAAY,GAAG,IAAIC,SAAoB,CAAC,IAAI,CAAC,CAAC;SACpD;KACF;;IC7BD;AACA,UAKa,uBAAuB;;;;;;;QAOlC,YAAmB,GAAW;YAAX,QAAG,GAAH,GAAG,CAAQ;YAC5B,IAAI,CAAC,GAAG,EAAE;gBACR,MAAM,IAAI,KAAK,CAAC,oCAAoC,CAAC,CAAC;aACvD;SACF;;;;;;;QAQD,WAAW,CAAC,WAAqC;;YAC/C,IAAI,CAAC,WAAW,CAAC,OAAO;gBAAE,WAAW,CAAC,OAAO,GAAG,IAAIC,oBAAoB,EAAE,CAAC;YAC3E,IAAI,GAAG,GAAG,IAAI,GAAG,OAAC,WAAW,CAAC,GAAG,GAAG,WAAW,CAAC,KAAK,mCAAI,EAAE,CAAC,CAAC;YAC7D,GAAG,CAAC,IAAI,GAAG,EAAE,CAAC;YACd,MAAM,QAAQ,GAAG,GAAG,CAAC,QAAQ,EAAE,CAAC;YAChC,WAAW,CAAC,OAAO,CAAC,GAAG,CACrB,eAAe,EACf,SAAS;gBACP,GAAG,CAAC,IAAI,CAAC,EAAE,EAAE,IAAI,CAAC,GAAG,EAAE;oBACrB,QAAQ,EAAE,QAAQ;oBAClB,SAAS,EAAE,IAAI;oBACf,SAAS,EAAE,OAAO;iBACnB,CAAC,CACL,CAAC;YACF,OAAO,OAAO,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC;SACrC;KACF;;ICzCD;AACA,UAsBa,wBAAwB;;;;;;;;QAUnC,YAAY,IAAY;YACtB,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,CAAC;SAC/C;QAED,eAAe,CAAC,GAAW,EAAE,OAA0B;;YACrD,IAAI,SAAS,GAAG,GAAG,IAAI,CAAC,QAAQ,CAAC,aAAa,eAAe,GAAG,EAAE,CAAC;YACnE,MAAM,QAAQ,GAAG,GAAG,IAAI,CAAC,QAAQ,CAAC,QAAQ,eAAe,GAAG,EAAE,CAAC;YAC/D,IAAI,GAAG,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC;YAC5B,IAAI,OAAO,SAAG,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,MAAM,mCAAI,EAAE,CAAC;YACpC,IAAI,WAAW,GAAoB;gBACjC,QAAQ,EAAE,QAAQ;gBAClB,SAAS,EAAE,IAAI;gBACf,SAAS,EAAE,OAAO;aACnB,CAAC;YACF,IAAI,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,MAAM,EAAE;gBACnB,WAAW,CAAC,OAAO,GAAG,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,MAAM,CAAC;aACvC;YAED,OAAO;gBACL,GAAG,EAAE,SAAS;gBACd,KAAK,EAAE,GAAG,CAAC,IAAI,CAAC,OAAO,EAAE,GAAG,EAAE,WAAW,CAAC;aAC3C,CAAC;SACH;QAEO,kBAAkB,CAAC,IAAY;YACrC,IAAI,QAAQ,GAAG,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,CAAC;YAEhD,IAAI,CAAC,QAAQ,EAAE;gBACb,MAAM,IAAI,KAAK,CAAC,6BAA6B,GAAG,IAAI,CAAC,CAAC;aACvD;YAED,OAAO,QAA2B,CAAC;SACpC;QAEO,qBAAqB,CAAC,IAAY;YACxC,MAAM,EAAE,GAAG,sBAAsB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAC7C,IAAI,CAAC,EAAE;gBAAE,OAAO,IAAI,CAAC;YACrB,MAAM,QAAQ,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC;YACvB,MAAM,EAAE,GAAG,uBAAuB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAC9C,IAAI,CAAC,EAAE;gBAAE,OAAO,IAAI,CAAC;YACrB,MAAM,GAAG,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC;YAClB,IAAI,CAAC,QAAQ,IAAI,CAAC,GAAG;gBAAE,OAAO,IAAI,CAAC;YACnC,MAAM,EAAE,GAAG,kBAAkB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACzC,MAAM,IAAI,GAAG,EAAE,IAAI,IAAI,GAAG,EAAE,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC;YACrC,IAAIC,KAAG,GAAG,IAAI5B,OAAG,CAAC,QAAQ,CAAC,CAAC;YAC5B,IAAI,gBAAgB,GAAG4B,KAAG,CAAC,QAAQ,CAAC;YACpCA,KAAG,CAAC,QAAQ,GAAG,gBAAgB,KAAK,OAAO,GAAG,KAAK,GAAG,MAAM,CAAC;YAC7D,MAAM,QAAQ,GAAGA,KAAG,CAAC,QAAQ,EAAE,CAAC;YAChCA,KAAG,CAAC,IAAI,GAAG,IAAI,CAAC;YAChB,IAAI,aAAa,GAAGA,KAAG,CAAC,QAAQ,EAAE,CAAC;YACnCA,KAAG,CAAC,QAAQ,GAAG,gBAAgB,CAAC;YAChC,OAAO;gBACL,aAAa,EAAE,aAAa;gBAC5B,UAAU,EAAEA,KAAG;gBACf,QAAQ,EAAE,QAAQ;gBAClB,GAAG,EAAE,GAAG;aACT,CAAC;SACH;KACF;;IC3FD;AACA,UAgFa,yBAAyB;;;;;QAKpC,YAAmB,eAAqC;YAArC,oBAAe,GAAf,eAAe,CAAsB;SACvD;;;;;;QAOD,GAAG,CAAC,QAA8B,EAAE,OAAe;YACjD,MAAM,UAAU,GAAG,GAAGC,6BAAoB,CAAC,QAAQ,CAAC,KAAK,OAAO,EAAE,CAAC;YACnE,QAAQ,QAAQ;gBACd,KAAKA,6BAAoB,CAAC,KAAK;oBAC7B,OAAO,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC;oBAC1B,MAAM;gBAER,KAAKA,6BAAoB,CAAC,OAAO;oBAC/B,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;oBACzB,MAAM;gBAER,KAAKA,6BAAoB,CAAC,IAAI;oBAC5B,OAAO,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;oBACxB,MAAM;aACT;SACF;KACF;IAED;;;AAGA,UAAa,0BAA0B;QAuBrC,YAAY,0BAA6D,EAAE,GAAW,EAAE,OAA2C;;;;YAVnH,eAAU,GAAW,YAAY,CAAC;YAWhD,IAAI,OAAO,0BAA0B,KAAK,QAAQ,EAAC;gBACjD,IAAI,CAAC,SAAS,GAAG,IAAI,wBAAwB,CAAC,0BAA0B,CAAC,CAAC;aAC3E;iBAAM;gBACL,IAAI,CAAC,SAAS,GAAG,0BAA0B,CAAC;aAC7C;YACD,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC;YACf,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,UAAU,CAAC;YACrD,IAAI,CAAC,UAAU,GAAG,IAAI,uBAAuB,CAAC,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;YAC3E,IAAI,CAAC,MAAM,GAAG,IAAIC,sBAAe,CAAC,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,UAAU,CAAC,IAAI,EAAE;;gBAE1F,sBAAsB,EAAE,CAAA,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,WAAW,IAAG,IAAI,CAAC,uBAAuB,GAAG,SAAS;aACxF,CAAC,CAAC;YACH,IAAI,CAAC,MAAM,GAAG,IAAI,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YACzC,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,UAAU,CAAC,QAAQ,EAAE,CAAC;SAChD;;;;;QAMY,sBAAsB,CACjC,OAAuC;;;gBAEvC,MAAM,QAAQ,GAAG,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,YAAY,GAAG,GAAG,CAAC;gBAC/F,MAAM,GAAG,GAAG,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC;gBAChC,MAAM,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC;gBACrB,IAAI,cAAc,GAAG,QAAQ,CAAC,OAAO,CAAC,mBAAmB,EAAE,MAAM,CAAC,CAAC;gBACnE,IAAI,SAAS,GAAG,GAAG,cAAc,eAAe,GAAG,EAAE,CAAC;gBACtD,MAAM,QAAQ,GAAG,GAAG,QAAQ,eAAe,GAAG,EAAE,CAAC;gBACjD,IAAI,OAAO,SAAG,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,MAAM,mCAAI,EAAE,CAAC;gBACpC,IAAI,WAAW,GAAoB;oBACjC,QAAQ,EAAE,QAAQ;oBAClB,SAAS,EAAE,IAAI;oBACf,SAAS,EAAE,OAAO;iBACnB,CAAC;gBACF,IAAI,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,MAAM,EAAE;oBACnB,WAAW,CAAC,OAAO,GAAG,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,MAAM,CAAC;iBACvC;gBACD,MAAM,KAAK,GAAG,GAAG,CAAC,IAAI,CAAC,OAAO,EAAE,GAAG,EAAE,WAAW,CAAC,CAAC;gBAClD,MAAM,GAAG,GAAG,GAAG,SAAS,iBAAiB,KAAK,EAAE,CAAC;gBACjD,OAAO;oBACL,OAAO,EAAE,SAAS;oBAClB,KAAK,EAAE,GAAG,CAAC,IAAI,CAAC,OAAO,EAAE,GAAG,EAAE,WAAW,CAAC;oBAC1C,GAAG,EAAE,GAAG;iBACT,CAAC;;SACH;QAGO,uBAAuB,CAAC,6BAAqD;YAEnF,6BAA6B,CAAC,IAAI,CAACC,kBAAS,EAAE,CAAC,CAAC;SACjD;;;;;;QAOY,gBAAgB,CAAC,UAA4B,EAAE;;gBAC1D,IAAI;oBACF,MAAM,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,eAAe,CAAC,EAC3C,CAAC,CAAC;oBACH,OAAO,IAAI,CAAC;iBACb;gBAAC,WAAM;oBACN,OAAO,KAAK,CAAC;iBACd;wBAAS;iBACT;aACF;SAAA;QAoBY,SAAS,CACpB,OAAiC,EACjC,UAA+B,EAAE;;gBAEjC,IAAI;oBACF,IAAI,GAAG,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,GAAG,EAAC,0BAA0B,EAAE,OAAO,EAAE;wBAClF,QAAQ,EAAE,OAAO,CAAC,mBAAmB;qBACtC,CAAC,CAAC;oBACH,OAAO,IAAI,CAAC,cAAc,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;iBACtC;wBAAS;iBACT;aACF;SAAA;QA2BY,UAAU,CACrB,QAAgB,EAChB,OAAiC,EACjC,UAA4B,EAAE;;gBAE9B,IAAI;oBACF,IAAI,GAAG,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,GAAG,EAAE,QAAQ,EAAC,0BAA0B,EAAE,OAAO,EAAE,EAC9F,CAAC,CAAC;oBACH,OAAO,IAAI,CAAC,cAAc,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;iBACtC;wBAAS;iBACT;aACF;SAAA;QA0BY,gBAAgB,CAC3B,YAAoB,EACpB,OAAiC,EACjC,UAA4B,EAAE;;gBAE9B,IAAI;oBACF,IAAI,GAAG,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,gBAAgB,CAAC,IAAI,CAAC,GAAG,EAAE,YAAY,EAAC,0BAA0B,EAAE,OAAO,EAAE,EACxG,CAAC,CAAC;oBACH,OAAO,IAAI,CAAC,cAAc,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;iBACtC;wBAAS;iBACT;aACF;SAAA;;;;;;;QAQY,aAAa,CACxB,YAAoB,EACpB,UAA4B,EAAE;;gBAE9B,IAAI;oBACF,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,wBAAwB,CAAC,IAAI,CAAC,GAAG,EAC1E,YAAY,EACZ,EACC,CACF,CAAC;oBACF,OAAO,IAAI,CAAC,cAAc,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;iBAC3C;wBAAS;iBACT;aACF;SAAA;;;;;;;QAQY,eAAe,CAC1B,YAAoB,EACpB,UAAkC,EAAE;;gBAEpC,IAAI;oBACF,IAAI,GAAG,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,qBAAqB,CAAC,IAAI,CAAC,GAAG,EACrE,YAAY,EACZ;wBACE,MAAM,EAAE,OAAO,CAAC,MAAM;qBACvB,CACF,CAAC;oBACF,OAAO,IAAI,CAAC,cAAc,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;iBACtC;wBAAS;iBACT;aACF;SAAA;;;;;;QAOY,uBAAuB,CAClC,MAAc,EACd,UAAkC,EAAE;;gBAEpC,IAAI;oBACF,IAAI,GAAG,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,uBAAuB,CAAC,IAAI,CAAC,GAAG,EACvE,MAAM,EACN,EACC,CACF,CAAC;oBAEF,OAAO,IAAI,CAAC,cAAc,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;iBAEtC;wBAAS;iBACT;aACF;SAAA;;;;;;;QAQY,QAAQ,CAAC,SAAiB,EAAE,UAA4B,EAAE;;gBACrE,IAAI;oBACF,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,mBAAmB,CAAC,IAAI,CAAC,GAAG,EACrE,SAAS,EACT,EACC,CACF,CAAC;oBACF,OAAO,IAAI,CAAC,cAAc,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;iBAE3C;wBAAS;iBACT;aACF;SAAA;;;;;;;QAQY,OAAO,CAAC,QAAgB,EAAE,UAA4B,EAAE;;gBACnE,IAAI;oBACF,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,kBAAkB,CAAC,IAAI,CAAC,GAAG,EACpE,QAAQ,EACR,EACC,CACF,CAAC;oBACF,OAAO,IAAI,CAAC,cAAc,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;iBAC3C;wBAAS;iBACT;aACF;SAAA;;;;;;;QAQY,oBAAoB,CAAC,SAAiB,EACjD,YAAoB,EACpB,UAA4B,EAAE;;gBAE9B,IAAI;oBACF,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,oBAAoB,CAAC,IAAI,CAAC,GAAG,EACtE,SAAS,EAAE,YAAY,EACvB,EACC,CACF,CAAC;oBACF,OAAO,IAAI,CAAC,cAAc,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;iBACtC;wBAAS;iBACT;aACF;SAAA;;;;;;;QAQY,yBAAyB,CAAC,SAAiB,EACtD,YAAoB,EACpB,UAA4B,EAAE;;gBAE9B,IAAI;oBACF,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,yBAAyB,CAAC,IAAI,CAAC,GAAG,EAC3E,SAAS,EAAE,YAAY,EACvB,EACC,CACF,CAAC;oBACF,OAAO,IAAI,CAAC,cAAc,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;iBAEtC;wBAAS;iBACT;aACF;SAAA;;;;;;;QAQY,cAAc,CAAC,SAAiB,EAAE,QAAgB,EAAE,UAA4B,EAAE;;gBAC7F,IAAI;oBACF,IAAI,GAAG,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,cAAc,CAAC,IAAI,CAAC,GAAG,EAC9D,SAAS,EACT,QAAQ,EACR,EACC,CACF,CAAC;oBAEF,OAAO,IAAI,CAAC,cAAc,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;iBACtC;wBAAS;iBACT;aACF;SAAA;;;;;;;;QASY,cAAc,CAAC,SAAiB,EAAE,QAAgB,EAAE,UAA4B,EAAE;;gBAE7F,IAAI;oBACF,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,yBAAyB,CAAC,IAAI,CAAC,GAAG,EAC3E,SAAS,EACT,QAAQ,EAER,EACC,CACF,CAAC;oBACF,OAAO,IAAI,CAAC,cAAc,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;iBAE3C;wBAAS;iBACT;aACF;SAAA;;;;;;;;QASY,mBAAmB,CAAC,SAAiB,EAAE,QAAgB,EAAE,UAA4B,EAAE;;gBAElG,IAAI;oBACF,IAAI,GAAG,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,mBAAmB,CAAC,IAAI,CAAC,GAAG,EACnE,SAAS,EACT,QAAQ,EACR,EACC,CACF,CAAC;;oBAGF,OAAO,IAAI,CAAC,cAAc,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;iBAC3C;wBAAS;iBACT;aACF;SAAA;QAsBY,OAAO,CAAC,SAAiB,EACpC,OAAiC,EACjC,UAA+B,EAAE;;gBAGjC,IAAI;oBACF,IAAI,GAAG,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,WAAW,CACrC,IAAI,CAAC,GAAG,EACR,SAAS,EACT,0BAA0B,EAC1B,OAAO,EACP;wBACE,QAAQ,EAAE,OAAO,CAAC,mBAAmB;qBACtC,CACF,CAAC;oBACF,OAAO,IAAI,CAAC,cAAc,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;iBACtC;wBAAS;iBACT;aACF;SAAA;QAEO,cAAc,CAAC,GAAiB,EAAE,aAAsB,EAAE,aAAsB;YACtF,IAAI,aAAa,KAAK,SAAS,IAAI,GAAG,CAAC,SAAS,CAAC,MAAM,KAAK,aAAa,EAAE;gBACzE,OAAO,IAAI,CAAC;aACb;YAED,IAAI,aAAa,KAAK,SAAS,IAAI,GAAG,CAAC,SAAS,CAAC,MAAM,KAAK,aAAa,EAAE;gBACzE,OAAO,KAAK,CAAC;aACd;iBAEI;;gBAEH,MAAM,IAAIC,kBAAS,CACjB,GAAG,CAAC,SAAS,CAAC,UAAW,EACzB,SAAS,EACT,GAAG,CAAC,SAAS,CAAC,MAAM,EACpB,GAAG,CAAC,SAAS,CAAC,OAAO,EACrB,GAAG,CAAC,SAAS,CACd,CAAC;aACH;SACF;KACF;;;;;;;;;;;;;;"}