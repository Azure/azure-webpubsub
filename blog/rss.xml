<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>Demos for Azure Web PubSub Blog</title>
        <link>https://azure.github.io/azure-webpubsub/blog</link>
        <description>Demos for Azure Web PubSub Blog</description>
        <lastBuildDate>Mon, 20 Nov 2023 00:00:00 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[Azure Web PubSub for Socket.IO is now generally available]]></title>
            <link>https://azure.github.io/azure-webpubsub/blog/azure-web-pubsub-for-socketio-generally-available</link>
            <guid>https://azure.github.io/azure-webpubsub/blog/azure-web-pubsub-for-socketio-generally-available</guid>
            <pubDate>Mon, 20 Nov 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[TL;DR]]></description>
            <content:encoded><![CDATA[<main><h2 class="anchor anchorWithStickyNavbar_LWe7" id="tldr"><strong>TL;DR</strong><a href="#tldr" class="hash-link" aria-label="Direct link to tldr" title="Direct link to tldr">​</a></h2><p>Socket.IO library is natively supported on Azure. </p><p>Since we public previewed this feature, we received positive feedback from users. Now we are happy to share that Web PubSub for Socket.IO is generally available, which means that Azure customers can expect stable APIs, SLAs customer support and it’s suitable for use in production.</p><p><a href="https://learn.microsoft.com/azure/azure-web-pubsub/socketio-quickstart" target="_blank" rel="noopener noreferrer">🔗 Follow this quickstarts guide to try out the feature.</a></p><p><a href="https://github.com/Azure-Samples/socket.io-webapp-integration" target="_blank" rel="noopener noreferrer">🔗 Check out the repo of a collaborative whiteboard app that showcases the use of Socket.IO APIs and how Azure handles scalability challenges.</a> </p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="solve-scalability-issue-without-code-rewrite"><strong>Solve scalability issue without code rewrite</strong><a href="#solve-scalability-issue-without-code-rewrite" class="hash-link" aria-label="Direct link to solve-scalability-issue-without-code-rewrite" title="Direct link to solve-scalability-issue-without-code-rewrite">​</a></h2><p>When we interviewed Socket.IO users, the challenge of scaling out Socket.IO servers came up repeatedly. It’s a challenge that can be met uniquely by Azure. With the input from Socket.IO users, it’s a challenge we aimed to solve when we public previewed the support for Socket.IO on Azure two months ago. </p><p>Developers can continue using the Socket.IO APIs they know and love and migrate to Azure seamless without code rewrite. The following shows what’s needed in the server-side and the client-side code to get a Socket.IO app running on Azure and instantly reap the benefits of Azure’s massive scale (million+ concurrent users).</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="introduce-additional-benefits-to-enterprise-level-applications"><strong>Introduce additional benefits to enterprise-level applications</strong><a href="#introduce-additional-benefits-to-enterprise-level-applications" class="hash-link" aria-label="Direct link to introduce-additional-benefits-to-enterprise-level-applications" title="Direct link to introduce-additional-benefits-to-enterprise-level-applications">​</a></h2><p>Web PubSub for Socket.IO aims to address the scalability challenge Socket.IO developers face. Additionally, it offers enterprise-focused features. </p><ul><li>Cross-region replication to make your application more resilient by running in independent Azure regions</li><li>Custom domain to add an extra layer of security </li><li>Auto-scaling to dynamically scale up and down based on usage</li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="an-example-showing-how-easy-it-is-to-migrate-a-socketio-app-to-azure"><strong>An example showing how easy it is to migrate a Socket.IO app to Azure</strong><a href="#an-example-showing-how-easy-it-is-to-migrate-a-socketio-app-to-azure" class="hash-link" aria-label="Direct link to an-example-showing-how-easy-it-is-to-migrate-a-socketio-app-to-azure" title="Direct link to an-example-showing-how-easy-it-is-to-migrate-a-socketio-app-to-azure">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="server-side-code"><strong>Server-side code</strong><a href="#server-side-code" class="hash-link" aria-label="Direct link to server-side-code" title="Direct link to server-side-code">​</a></h3><p>Developers only need to call <code>useAzureSocketIO()</code> to set up the communication between this server and the cloud service. To Socket.IO users, the rest of the code should familiar as they are the APIs of Socket.IO library. These lines are included here for completeness of a working program. </p><div class="language-js codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockTitle_Ktv7">server.js</div><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-js codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> </span><span class="token maybe-class-name">Server</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">require</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"socket.io"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line theme-code-block-highlighted-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> useAzureSocketIO </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">require</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"@azure/web-pubsub-socket.io"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> io </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">new</span><span class="token plain"> </span><span class="token class-name">Server</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">3000</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line theme-code-block-highlighted-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// Use the following line to integrate with Web PubSub for Socket.IO</span><span class="token plain"></span><br></span><span class="token-line theme-code-block-highlighted-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">useAzureSocketIO</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">io</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line theme-code-block-highlighted-line" style="color:#393A34"><span class="token plain">    </span><span class="token literal-property property" style="color:#36acaa">hub</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"Hub"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// The hub name can be any valid string.</span><span class="token plain"></span><br></span><span class="token-line theme-code-block-highlighted-line" style="color:#393A34"><span class="token plain">    </span><span class="token literal-property property" style="color:#36acaa">connectionString</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"&lt;connection-string&gt;"</span><span class="token plain"></span><br></span><span class="token-line theme-code-block-highlighted-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">io</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">on</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"connection"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter">socket</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// Sends a message to the client</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    socket</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">emit</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"hello"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"world"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// Receives a message from the client</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    socket</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">on</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"howdy"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter">arg</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token console class-name">console</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">log</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">arg</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">   </span><span class="token comment" style="color:#999988;font-style:italic">// Prints "stranger"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="client-side-code"><strong>Client-side code</strong><a href="#client-side-code" class="hash-link" aria-label="Direct link to client-side-code" title="Direct link to client-side-code">​</a></h3><p>The change to the client-side code is also minimal. Notice that we are using <code>socket.io-client</code> package and when initializing socket object, we set it up so that the Socket.IO client connects with the cloud service. The rest of the code is included for completeness of a working program.</p><div class="language-js codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockTitle_Ktv7">client.js</div><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-js codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line theme-code-block-highlighted-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> io </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">require</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"socket.io-client"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line theme-code-block-highlighted-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> socket </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">io</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"&lt;web-pubsub-socketio-endpoint&gt;"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line theme-code-block-highlighted-line" style="color:#393A34"><span class="token plain">    </span><span class="token literal-property property" style="color:#36acaa">path</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"/clients/socketio/hubs/Hub"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line theme-code-block-highlighted-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// Receives a message from the server</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">socket</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">on</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"hello"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter">arg</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token console class-name">console</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">log</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">arg</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// Sends a message to the server</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">socket</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">emit</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"howdy"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"stranger"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h2 class="anchor anchorWithStickyNavbar_LWe7" id="how-does-it-work"><strong>How does it work?</strong><a href="#how-does-it-work" class="hash-link" aria-label="Direct link to how-does-it-work" title="Direct link to how-does-it-work">​</a></h2><p>As you can see from the code snippets, both the Socket.IO client and Socket.IO server establish a connection with a cloud service. The benefit of having a cloud service to facilitate the communication between the two is that it reduces the load on your Socket.IO server and removes to the need to worry about what if “I need to send messages to 1000+ clients”. All that’s required is the same `socket.emit()`` call. The cloud service, which maintains persistent connections with your Socket.IO clients, fans out the message to all the clients. Graphically, it looks like this.</p><p><img loading="lazy" alt="Architecture of Socket.IO managed by Azure" src="/azure-webpubsub/assets/images/typical-architecture-managed-socketio-467d864b66a7a799cc57abd245587796.jpg" width="1152" height="648" class="img_ev3q"></p><p>You can read more about how it works behind the scenes <a href="https://learn.microsoft.com/azure/azure-web-pubsub/socketio-service-internal" target="_blank" rel="noopener noreferrer">🔗 by reading the article</a>.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="now-generally-available"><strong>Now generally available.</strong><a href="#now-generally-available" class="hash-link" aria-label="Direct link to now-generally-available" title="Direct link to now-generally-available">​</a></h2><p>Since public preview, we received positive feedback from developers and now we are happy to share that this feature is generally available and suitable for use in production. Besides stable APIs and SLA guarantees, developers can have full support through Azure’s ticket system.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="resources-and-references"><strong>Resources and references</strong><a href="#resources-and-references" class="hash-link" aria-label="Direct link to resources-and-references" title="Direct link to resources-and-references">​</a></h2><ul><li><a href="https://socket.io/" target="_blank" rel="noopener noreferrer">🔗 Socket.IO library documentation</a></li><li><a href="https://learn.microsoft.com/azure/azure-web-pubsub/socketio-quickstart" target="_blank" rel="noopener noreferrer">🔗 Quickstarts to migrate an existing Socket.IO app on Azure</a></li><li><a href="https://learn.microsoft.com/azure/azure-web-pubsub/socketio-service-internal" target="_blank" rel="noopener noreferrer">🔗 Internal: how does Azure solve the scalability challenge for Socket.IO developers</a></li></ul></main>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[What is WebSocket? (part 2/2)]]></title>
            <link>https://azure.github.io/azure-webpubsub/blog/what_is_websocket_part2</link>
            <guid>https://azure.github.io/azure-webpubsub/blog/what_is_websocket_part2</guid>
            <pubDate>Fri, 25 Nov 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[Summary]]></description>
            <content:encoded><![CDATA[<main><h2 class="anchor anchorWithStickyNavbar_LWe7" id="summary"><strong>Summary</strong><a href="#summary" class="hash-link" aria-label="Direct link to summary" title="Direct link to summary">​</a></h2><p>This article is the second of a two-part series that describes the values of WebSocket on a high-level.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="quick-links"><strong>Quick links</strong><a href="#quick-links" class="hash-link" aria-label="Direct link to quick-links" title="Direct link to quick-links">​</a></h2><p>Explore a few live apps built with <strong><a href="https://learn.microsoft.com/en-us/azure/azure-web-pubsub/overview" target="_blank" rel="noopener noreferrer">🔗 Web PubSub</a></strong>, a fully managed WebSocket service from Azure.  </p><p><a href="https://azure.github.io/azure-webpubsub/demos/chat" target="_blank" rel="noopener noreferrer">🔗 A simple chat app</a><br>
<a href="https://azure.github.io/azure-webpubsub/demos/whiteboard" target="_blank" rel="noopener noreferrer">🔗 A collaborative whiteboard app</a> </p><blockquote><p><strong>Definition</strong></p><p>WebSocket gives developers a <strong><em>bidirectional</em></strong>, <strong><em>full-duplex</em></strong> communication channels over HTTP through a single TCP connection </p></blockquote><ul><li></li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="full-duplex"><strong>Full-duplex</strong><a href="#full-duplex" class="hash-link" aria-label="Direct link to full-duplex" title="Direct link to full-duplex">​</a></h2><p>To put it simply, “full-duplex” means that data can be transmitted at the same time in both directions. Like “bidirectional” we just talked about, full-duplex is also about two things, two entities, but full-duplex is more about the <strong>TIMING</strong> of sending data. </p><p>A phone call is considered full-duplex because both the caller and the receiver can send voice data to each other at the same time. </p><p>A walkie-talkie is considered half-duplex because at one time only one person can send voice data. The participants take turns to speak. </p><p><img loading="lazy" alt="Picture of a walkie-talkie" src="/azure-webpubsub/assets/images/walkie_talkie-86467d9c47386511657e759425999a3f.jpg" width="500" height="500" class="img_ev3q"></p><p>The web before WebSocket was largely half-duplex. The client opens a communication channel and requests a resource through this channel from a remote server. It waits for the server to return the requested resource. While the client waits, it cannot send data through the same channel. Also, while the server is sending data, the client cannot request resource through the same channel, much like how we communicate with a walkie-talkie. </p><p>Imagine if you are talking with your grandma using a walkie-talkie and you ask “Grandma, what’s like when you were growing up in the countryside?” Grandma presses the “Talk button” and she starts from the Great Depression, World War 1 and on with World War 2… While grandma paints the scene of her storied life, teasing grandma by completing the stories for her is not an option. Your only option? Listen on. (No grandmas were hurt in telling this joke.) </p><p><img loading="lazy" alt="Picture of a grandma and her granddaughter" src="/azure-webpubsub/assets/images/grandma-4f69b67909e231a6b983953601b687c2.jpg" width="703" height="459" class="img_ev3q"></p><p>The walkie-talkie style of the early web was fine when communication was largely infrequent requests for resources from client to server. For web applications with interactive experience, like a collaborative document or a collaborative design application, users could be making changes at the same time and to have a smooth real-time editing experience, the changes need to be reflected on users’ screens as soon as they are made. The trusty HTTP protocol, being an inherently half-duplex communication model, cannot meet the new requirements without resorting to some workarounds. Hacks no more! WebSocket brings native full-duplex communication to the web.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="to-conclude"><strong>To conclude</strong><a href="#to-conclude" class="hash-link" aria-label="Direct link to to-conclude" title="Direct link to to-conclude">​</a></h2><p>“Bidirectional” and “full-duplex” are the two value propositions WebSocket offers to developers and it has enabled a myriad of new interesting experience on the web, multi-player gaming, online auction, real-time collaborative apps and online chatting, to name a few. And the best of it all, it does not take much to add these real-time capabilities to your applications.
<img loading="lazy" alt="Some scenarios that can be enabled by WebSocket" src="/azure-webpubsub/assets/images/scenarios-eab60a0b5a645c27b355710a716872ad.jpg" width="961" height="557" class="img_ev3q"></p><p><strong>Credits:</strong><br>
<!-- -->The walkie-talkie and the grandma photographs were taken by <strong><a href="https://www.pexels.com/@cottonbro/" target="_blank" rel="noopener noreferrer">🔗 cottonbro studio</a></strong>.  </p></main>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[What is WebSocket? (part 1/2)]]></title>
            <link>https://azure.github.io/azure-webpubsub/blog/what_is_websocket_part1</link>
            <guid>https://azure.github.io/azure-webpubsub/blog/what_is_websocket_part1</guid>
            <pubDate>Mon, 14 Nov 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[Summary]]></description>
            <content:encoded><![CDATA[<main><h2 class="anchor anchorWithStickyNavbar_LWe7" id="summary"><strong>Summary</strong><a href="#summary" class="hash-link" aria-label="Direct link to summary" title="Direct link to summary">​</a></h2><p>This article is the first of a two-part series that describes the values of WebSocket on a high-level.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="quick-links"><strong>Quick links</strong><a href="#quick-links" class="hash-link" aria-label="Direct link to quick-links" title="Direct link to quick-links">​</a></h2><p>Explore a few live apps built with <strong><a href="https://learn.microsoft.com/en-us/azure/azure-web-pubsub/overview" target="_blank" rel="noopener noreferrer">🔗 Web PubSub</a></strong>, a fully managed WebSocket service from Azure.  </p><p><a href="https://azure.github.io/azure-webpubsub/demos/chat" target="_blank" rel="noopener noreferrer">🔗 A simple chat app</a><br>
<a href="https://azure.github.io/azure-webpubsub/demos/whiteboard" target="_blank" rel="noopener noreferrer">🔗 A collaborative whiteboard app</a> </p><blockquote><p><strong>Definition</strong></p><p>WebSocket gives developers a <strong><em>bidirectional</em></strong>, <strong><em>full-duplex</em></strong> communication channels over HTTP through a single TCP connection </p></blockquote><ul><li></li></ul><p>Let us unpack this loaded sentence together and try to understand the italicized words (technical jargon). </p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="bidirectional"><strong>Bidirectional</strong><a href="#bidirectional" class="hash-link" aria-label="Direct link to bidirectional" title="Direct link to bidirectional">​</a></h2><p>The prefix “bi-“ means two of something. We have bicycles, two wheels. We have bifold doors, the fancy doors with two folds. In the context of computer networking, no surprise here, bidirectional means two directions.</p><p><img loading="lazy" alt="Picture of a bicycle, bi-fold doors and bi-directional communication in computer networking" src="/azure-webpubsub/assets/images/bidirectional-d4131451fdab99c761d3086d7e7efb70.jpg" width="407" height="1022" class="img_ev3q"></p><p>However, to truly understand the significance of it, we will need to talk about the interaction between applications running on different computers on a network.&nbsp; In a typical client and server model, the client sends an HTTP request. Once the server receives the request, it does some processing and returns an HTTP response. Most of the activities on the web can be simplified to this request and response interaction. For example, when we visit <a href="https://www.nytimes.com/" target="_blank" rel="noopener noreferrer">www.nytimes.com</a>, the browser sends an HTTP request on the user’s behalf and waits for an HTTP response from its server.</p><p>What is relevant to our discussion here is that the client <strong>ALWAYS</strong> initiates the communication, in other words, the client always <em>asks</em> before the server <em>responds</em>. We can call this form of communication one-directional because the server cannot send data to clients that is not requested. This is the decision made by the designer of HTTP protocol, and this simple design is the technological backbone of the internet. </p><p><img loading="lazy" alt="Client makes request and server responds." src="/azure-webpubsub/assets/images/http-04c681a1ce589e7355f3a2ca430c5082.jpg" width="813" height="418" class="img_ev3q"></p><p>As the web welcomes more and more users, they are increasingly demanding more dynamic and interactive web experience. They want to track their ridesharing car without closing and reopening the app; they want to see the latest financial data, bid in an auction, collaborate on a document all without refreshing the browser all the time. A one-directional communication becomes inadequate in these scenarios. To enable these experiences, the web needs a way for server to send data to clients without client asking. Until WebSocket was standardized in 2008 and quickly supported by modern browsers, the web was unapologetically one-directional. With a bit of uneasiness and feeling cheating, software developers came up with workarounds to mimic bidirectional communication. Hacks no more! WebSocket brings native bi-directional communication to the web.</p><p><img loading="lazy" alt="WebSocket enables bi-directional communication" src="/azure-webpubsub/assets/images/websocket-723ad73776e4551687f3c4331aa77e32.jpg" width="813" height="157" class="img_ev3q"></p><p>In the second part, we will explore the idea of “full-duplex”.</p><hr><p><strong>Credits:</strong><br>
<!-- -->The bicycle photograph is taken by <strong><a href="https://www.pexels.com/@luftschnitzel/" target="_blank" rel="noopener noreferrer">🔗 Philipp M</a></strong>.<br>
<!-- -->The bi-fold door photograph is taken by <strong><a href="https://www.pexels.com/@sena-124356903/" target="_blank" rel="noopener noreferrer">🔗 sena</a></strong>.</p></main>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Welcome]]></title>
            <link>https://azure.github.io/azure-webpubsub/blog/welcome</link>
            <guid>https://azure.github.io/azure-webpubsub/blog/welcome</guid>
            <pubDate>Wed, 29 Jun 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[This is a site dedicated to showing developers what they can build with Azure Web PubSub through live demos. If a picture is worth a thousand words, a live demo is probably worth a lot more than that.]]></description>
            <content:encoded><![CDATA[<main><p>This is a site dedicated to showing developers what they can build with Azure Web PubSub through live demos. If a picture is worth a thousand words, a live demo is probably worth a lot more than that.</p><p>Azure Web PubSub is a cloud service that helps you build real-time messaging web applications using WebSockets and the publish-subscribe pattern easily. This real-time functionality allows publishing content updates between server and connected clients (for example a single page web application or mobile application). The clients do not need to poll the latest updates, or submit new HTTP requests for updates.</p><p>Check out the demos on the site and let us know what you think.</p></main>]]></content:encoded>
        </item>
    </channel>
</rss>